---
http_interactions:
- request:
    method: get
    uri: https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls/5
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/vnd.github.v3.diff
      User-Agent:
      - Octokit Ruby Gem 10.0.0
      Content-Type:
      - application/json
      Authorization:
      - token github_pat_123abc
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 25 Sep 2025 02:19:46 GMT
      Content-Type:
      - application/vnd.github.v3.diff; charset=utf-8
      Content-Length:
      - '153041'
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      Etag:
      - '"e4e39aa46c7dbef30db17c783a793cb53a22efd894fab64273b5d98d7e55ad93"'
      Last-Modified:
      - Thu, 25 Sep 2025 00:25:37 GMT
      Github-Authentication-Token-Expiration:
      - '2025-12-06 19:46:53 +1100'
      X-Github-Media-Type:
      - github.v3; param=diff
      X-Accepted-Github-Permissions:
      - pull_requests=read; contents=read
      X-Github-Api-Version-Selected:
      - '2022-11-28'
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4995'
      X-Ratelimit-Reset:
      - '1758767578'
      X-Ratelimit-Used:
      - '5'
      X-Ratelimit-Resource:
      - core
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Server:
      - github.com
      X-Github-Request-Id:
      - E587:302B76:23D2D0:2B2120:68D4A6C2
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ZGlmZiAtLWdpdCBhLy5idWlsZGtpdGUvcGlwZWxpbmUueW1sIGIvLmJ1aWxka2l0ZS9waXBlbGluZS55bWwKaW5kZXggOTBlMDllYi4uMjc3OGQ1NyAxMDA2NDQKLS0tIGEvLmJ1aWxka2l0ZS9waXBlbGluZS55bWwKKysrIGIvLmJ1aWxka2l0ZS9waXBlbGluZS55bWwKQEAgLTQwLDcgKzQwLDcgQEAgc3RlcHM6CiAKICAgLSBsYWJlbDogIjpwYWNrYWdlOiBDb2xsYXRlIGNvdmVyYWdlIHJlcG9ydHMiCiAgICAgZGVwZW5kc19vbjogcnNwZWMKLSAgICBrZXk6IG1lcmdlLWNvdmVyYWdlCisgICAga2V5OiBjb2xsYXRlLWNvdmVyYWdlCiAgICAgcGx1Z2luczoKICAgICAgIC0gYXJ0aWZhY3RzI3YxLjkuNDoKICAgICAgICAgICBkb3dubG9hZDogImNvdmVyYWdlL3Jlc3VsdHNldC0qLmpzb24iCkBAIC01Niw3ICs1Niw3IEBAIHN0ZXBzOgogICAgICAgLSAiY292ZXJhZ2UvY292ZXJhZ2UuanNvbiIKIAogICAtIGxhYmVsOiAiUmVwb3J0IGNvdmVyYWdlIHRvIEdpdEh1YiIKLSAgICBkZXBlbmRzX29uOiBtZXJnZS1jb3ZlcmFnZQorICAgIGRlcGVuZHNfb246IGNvbGxhdGUtY292ZXJhZ2UKICAgICBrZXk6IHJlcG9ydC1jb3ZlcmFnZQogICAgIHBsdWdpbnM6CiAgICAgICAtIGFydGlmYWN0cyN2MS45LjQ6CkBAIC02Niw0ICs2Niw0IEBAIHN0ZXBzOgogICAgICAgICAgIG1vdW50LWJ1aWxka2l0ZS1hZ2VudDogdHJ1ZQogICAgICAgICAgIHByb3BhZ2F0ZS1lbnZpcm9ubWVudDogdHJ1ZQogICAgICAgICAgIHNoZWxsOiBbIi9iaW4vYmFzaCIsICItZSIsICItYyJdCi0gICAgY29tbWFuZDogLmJ1aWxka2l0ZS9zY3JpcHQvcmVwb3J0ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQorICAgIGNvbW1hbmQ6IC5idWlsZGtpdGUvc2NyaXB0L3JlcG9ydApkaWZmIC0tZ2l0IGEvLmJ1aWxka2l0ZS9zY3JpcHQvY29sbGF0ZSBiLy5idWlsZGtpdGUvc2NyaXB0L2NvbGxhdGUKaW5kZXggMjYxOGMwZC4uNjQyYjNlMyAxMDA3NTUKLS0tIGEvLmJ1aWxka2l0ZS9zY3JpcHQvY29sbGF0ZQorKysgYi8uYnVpbGRraXRlL3NjcmlwdC9jb2xsYXRlCkBAIC0yLDUgKzIsNSBAQAogCiBidW5kbGUgY29uZmlnIHNldCBwYXRoICd2ZW5kb3IvYnVuZGxlJwogYnVuZGxlIGluc3RhbGwgLS1qb2JzPTQgLS1yZXRyeT0zCi1idW5kbGUgZXhlYyByYWtlIGNvdmVyYWdlOm1lcmdlCi10YXIgLWN6ZiBjb3ZlcmFnZS9hc3NldHMudGFyLmd6IGNvdmVyYWdlL2Fzc2V0cwpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKK2J1bmRsZSBleGVjIHJha2UgY292ZXJhZ2U6Y29sbGF0ZQordGFyIC1jemYgY292ZXJhZ2UvYXNzZXRzLnRhci5neiBjb3ZlcmFnZS9hc3NldHMKZGlmZiAtLWdpdCBhLy5idWlsZGtpdGUvc2NyaXB0L3JlcG9ydCBiLy5idWlsZGtpdGUvc2NyaXB0L3JlcG9ydAppbmRleCBhZjk3MTVmLi4zNjgzY2UzIDEwMDc1NQotLS0gYS8uYnVpbGRraXRlL3NjcmlwdC9yZXBvcnQKKysrIGIvLmJ1aWxka2l0ZS9zY3JpcHQvcmVwb3J0CkBAIC0yLDQgKzIsNCBAQAogCiBidW5kbGUgY29uZmlnIHNldCBwYXRoICd2ZW5kb3IvYnVuZGxlJwogZ2VtIGluc3RhbGwgY292ZXJhZ2UtcmVwb3J0ZXIKLWNvdmVyYWdlLXJlcG9ydGVyIHJlcG9ydApcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKK2NvdmVyYWdlLXJlcG9ydGVyCmRpZmYgLS1naXQgYS8uZ2l0aWdub3JlIGIvLmdpdGlnbm9yZQppbmRleCAxYTFkNTIwLi44MDE2NWZiIDEwMDY0NAotLS0gYS8uZ2l0aWdub3JlCisrKyBiLy5naXRpZ25vcmUKQEAgLTksNCArOSw1IEBACiAvc3BlYy9leGFtcGxlcy50eHQKIC90bXAvCiAvR2VtZmlsZS5sb2NrCi0uZW52ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQorLmVudgorKi5nZW0KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS8ucnVib2NvcC55bWwgYi8ucnVib2NvcC55bWwKaW5kZXggNGNjZWVjYi4uYTQwNjE4MiAxMDA2NDQKLS0tIGEvLnJ1Ym9jb3AueW1sCisrKyBiLy5ydWJvY29wLnltbApAQCAtNTcsNiArNTcsNyBAQCBNZXRyaWNzL0Jsb2NrTGVuZ3RoOgogICAgIC0gImxpYi90YXNrcy8qKi8qIgogCiBNZXRyaWNzL0NsYXNzTGVuZ3RoOgorICBNYXg6IDIwMAogICBFeGNsdWRlOgogICAgIC0gInRlc3QvKiovKiIKIApkaWZmIC0tZ2l0IGEvR2VtZmlsZSBiL0dlbWZpbGUKaW5kZXggNDEwZWU4Mi4uZDc0MzExYyAxMDA2NDQKLS0tIGEvR2VtZmlsZQorKysgYi9HZW1maWxlCkBAIC0xMiwzICsxMiw1IEBAIGdlbSAicnVib2NvcC1yYWtlIiwgIjAuNy4xIgogZ2VtICJydWJvY29wLXJzcGVjIiwgIjMuNi4wIgogZ2VtICJzaW1wbGVjb3YiLCAiMC4yMi4wIgogZ2VtICJzaW1wbGVjb3ZfanNvbl9mb3JtYXR0ZXIiCitnZW0gInZjciIsICJ+PiA2LjAiCitnZW0gIndlYm1vY2siLCAifj4gMy4wIgpkaWZmIC0tZ2l0IGEvZXhlL2NvdmVyYWdlLXJlcG9ydGVyIGIvZXhlL2NvdmVyYWdlLXJlcG9ydGVyCm5ldyBmaWxlIG1vZGUgMTAwNzU1CmluZGV4IDAwMDAwMDAuLjgyMjgwNjQKLS0tIC9kZXYvbnVsbAorKysgYi9leGUvY292ZXJhZ2UtcmVwb3J0ZXIKQEAgLTAsMCArMSw4IEBACisjIS91c3IvYmluL2VudiBydWJ5CisjIGZyb3plbl9zdHJpbmdfbGl0ZXJhbDogdHJ1ZQorCiskTE9BRF9QQVRILnVuc2hpZnQoIiN7X19kaXJfX30vLi4vbGliIikKKworcmVxdWlyZSAiY292ZXJhZ2VfcmVwb3J0ZXIiCisKK0NvdmVyYWdlUmVwb3J0ZXI6OkNMSS5zdGFydChBUkdWKQpkaWZmIC0tZ2l0IGEvbGliL2NvdmVyYWdlX3JlcG9ydGVyLnJiIGIvbGliL2NvdmVyYWdlX3JlcG9ydGVyLnJiCmluZGV4IGM5NTcwZjAuLjY5NWUyMTEgMTAwNjQ0Ci0tLSBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci5yYgorKysgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIucmIKQEAgLTEsMTQgKzEsMzQgQEAKICMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCiAKK3JlcXVpcmUgImxvZ2dlciIKK3JlcXVpcmUgIm9jdG9raXQiCisKIG1vZHVsZSBDb3ZlcmFnZVJlcG9ydGVyCiAgIGF1dG9sb2FkIDpDTEksICJjb3ZlcmFnZV9yZXBvcnRlci9jbGkiCiAgIGF1dG9sb2FkIDpWRVJTSU9OLCAiY292ZXJhZ2VfcmVwb3J0ZXIvdmVyc2lvbiIKIAotICByZXF1aXJlX3JlbGF0aXZlICJjb3ZlcmFnZV9yZXBvcnRlci9jb21tZW50X3Bvc3RlciIKLSAgcmVxdWlyZV9yZWxhdGl2ZSAiY292ZXJhZ2VfcmVwb3J0ZXIvY292ZXJhZ2VfYW5hbHlzZXIiCi0gIHJlcXVpcmVfcmVsYXRpdmUgImNvdmVyYWdlX3JlcG9ydGVyL2NvdmVyYWdlX3BhcnNlciIKLSAgcmVxdWlyZV9yZWxhdGl2ZSAiY292ZXJhZ2VfcmVwb3J0ZXIvZGlmZl9wYXJzZXIiCisgIGNsYXNzIDw8IHNlbGYKKyAgICBhdHRyX3dyaXRlciA6bG9nZ2VyCisKKyAgICBkZWYgbG9nZ2VyCisgICAgICBAbG9nZ2VyIHx8PSBMb2dnZXIubmV3KCRzdGRvdXQpLnRhcCBkbyB8bG9nfAorICAgICAgICBsb2cucHJvZ25hbWUgPSBuYW1lCisgICAgICAgIGxvZy5sZXZlbCA9IEVOVlsiQ09WRVJBR0VfUkVQT1JURVJfTE9HX0xFVkVMIl0mLnVwY2FzZSB8fCAiSU5GTyIKKyAgICAgIGVuZAorICAgIGVuZAorICBlbmQKKworICByZXF1aXJlX3JlbGF0aXZlICJjb3ZlcmFnZV9yZXBvcnRlci9jb3ZlcmFnZV9yZXBvcnRfbG9hZGVyIgorICByZXF1aXJlX3JlbGF0aXZlICJjb3ZlcmFnZV9yZXBvcnRlci9tb2RpZmllZF91bmNvdmVyZWRfaW50ZXJzZWN0aW9uIgorICByZXF1aXJlX3JlbGF0aXZlICJjb3ZlcmFnZV9yZXBvcnRlci9nbG9iYWxfY29tbWVudCIKKyAgcmVxdWlyZV9yZWxhdGl2ZSAiY292ZXJhZ2VfcmVwb3J0ZXIvZ2xvYmFsX2NvbW1lbnRfZmFjdG9yeSIKKyAgcmVxdWlyZV9yZWxhdGl2ZSAiY292ZXJhZ2VfcmVwb3J0ZXIvZ2xvYmFsX2NvbW1lbnRfcG9zdGVyIgorICByZXF1aXJlX3JlbGF0aXZlICJjb3ZlcmFnZV9yZXBvcnRlci9pbmxpbmVfY29tbWVudCIKKyAgcmVxdWlyZV9yZWxhdGl2ZSAiY292ZXJhZ2VfcmVwb3J0ZXIvaW5saW5lX2NvbW1lbnRfZmFjdG9yeSIKKyAgcmVxdWlyZV9yZWxhdGl2ZSAiY292ZXJhZ2VfcmVwb3J0ZXIvaW5saW5lX2NvbW1lbnRfcG9zdGVyIgorICByZXF1aXJlX3JlbGF0aXZlICJjb3ZlcmFnZV9yZXBvcnRlci9tb2RpZmllZF9yYW5nZXNfZXh0cmFjdG9yIgogICByZXF1aXJlX3JlbGF0aXZlICJjb3ZlcmFnZV9yZXBvcnRlci9vcHRpb25zIgogICByZXF1aXJlX3JlbGF0aXZlICJjb3ZlcmFnZV9yZXBvcnRlci9wdWxsX3JlcXVlc3QiCiAgIHJlcXVpcmVfcmVsYXRpdmUgImNvdmVyYWdlX3JlcG9ydGVyL3J1bm5lciIKKyAgcmVxdWlyZV9yZWxhdGl2ZSAiY292ZXJhZ2VfcmVwb3J0ZXIvdW5jb3ZlcmVkX3Jhbmdlc19leHRyYWN0b3IiCiBlbmQKZGlmZiAtLWdpdCBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9jb21tZW50X3Bvc3Rlci5yYiBiL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9jb21tZW50X3Bvc3Rlci5yYgpkZWxldGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggNThmYzllNi4uMDAwMDAwMAotLS0gYS9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvY29tbWVudF9wb3N0ZXIucmIKKysrIC9kZXYvbnVsbApAQCAtMSw5MyArMCwwIEBACi0jIGZyb3plbl9zdHJpbmdfbGl0ZXJhbDogdHJ1ZQotCi1tb2R1bGUgQ292ZXJhZ2VSZXBvcnRlcgotICBjbGFzcyBDb21tZW50UG9zdGVyCi0gICAgSU5MSU5FX01BUktFUiA9ICI8IS0tIGNvdmVyYWdlLWlubGluZS1tYXJrZXIgLS0+IgotICAgIEdMT0JBTF9NQVJLRVIgPSAiPCEtLSBjb3ZlcmFnZS1jb21tZW50LW1hcmtlciAtLT4iCi0KLSAgICBkZWYgaW5pdGlhbGl6ZShwdWxsX3JlcXVlc3Q6LCBhbmFseXNpczosIGNvbW1pdF9zaGE6KQotICAgICAgQHB1bGxfcmVxdWVzdCA9IHB1bGxfcmVxdWVzdAotICAgICAgQGFuYWx5c2lzID0gYW5hbHlzaXMKLSAgICAgIEBjb21taXRfc2hhID0gY29tbWl0X3NoYQotICAgIGVuZAotCi0gICAgZGVmIGNhbGwKLSAgICAgIHBvc3RfaW5saW5lX2NvbW1lbnRzCi0gICAgICBwb3N0X2dsb2JhbF9jb21tZW50Ci0gICAgZW5kCi0KLSAgICBwcml2YXRlCi0KLSAgICBhdHRyX3JlYWRlciA6cHVsbF9yZXF1ZXN0LCA6YW5hbHlzaXMsIDpjb21taXRfc2hhCi0KLSAgICBkZWYgcG9zdF9pbmxpbmVfY29tbWVudHMKLSAgICAgIGRlbGV0ZV9vbGRfaW5saW5lX2NvbW1lbnRzCi0KLSAgICAgIGFuYWx5c2lzLnVuY292ZXJlZF9ieV9maWxlLmVhY2ggZG8gfGZpbGUsIGxpbmVzfAotICAgICAgICBjb250aWd1b3VzX2NodW5rcyhsaW5lcykuZWFjaCBkbyB8c3RhcnRfbGluZSwgZW5kX2xpbmV8Ci0gICAgICAgICAgcG9zdF9pbmxpbmVfY29tbWVudChmaWxlOiBmaWxlLCBzdGFydF9saW5lOiBzdGFydF9saW5lLCBlbmRfbGluZTogZW5kX2xpbmUpCi0gICAgICAgIGVuZAotICAgICAgZW5kCi0gICAgZW5kCi0KLSAgICBkZWYgY29udGlndW91c19jaHVua3MobGluZXMpCi0gICAgICBsaW5lcwotICAgICAgICAuc29ydAotICAgICAgICAuY2h1bmtfd2hpbGUgeyB8aSwganwgaiA9PSBpICsgMSB9Ci0gICAgICAgIC5tYXAgeyB8Y2h1bmt8IFtjaHVuay5maXJzdCwgY2h1bmsubGFzdF0gfQotICAgIGVuZAotCi0gICAgZGVmIGlubGluZV9tZXNzYWdlKHN0YXJ0X2xpbmUsIGVuZF9saW5lKQotICAgICAgaWYgc3RhcnRfbGluZSA9PSBlbmRfbGluZQotICAgICAgICAi4p2MIExpbmUgI3tzdGFydF9saW5lfSBpcyBub3QgY292ZXJlZCBieSB0ZXN0cy4iCi0gICAgICBlbHNlCi0gICAgICAgICLinYwgTGluZXMgI3tzdGFydF9saW5lfeKAkyN7ZW5kX2xpbmV9IGFyZSBub3QgY292ZXJlZCBieSB0ZXN0cy4iCi0gICAgICBlbmQKLSAgICBlbmQKLQotICAgIGRlZiBidWlsZF9pbmxpbmVfYm9keShmaWxlOiwgc3RhcnRfbGluZTosIG1lc3NhZ2U6KQotICAgICAgIiN7SU5MSU5FX01BUktFUn1cbiN7bWVzc2FnZX1cblxuX0ZpbGU6ICN7ZmlsZX0sIGxpbmUgI3tzdGFydF9saW5lfV8iCi0gICAgZW5kCi0KLSAgICBkZWYgcG9zdF9pbmxpbmVfY29tbWVudChmaWxlOiwgc3RhcnRfbGluZTosIGVuZF9saW5lOikKLSAgICAgIG1lc3NhZ2UgPSBpbmxpbmVfbWVzc2FnZShzdGFydF9saW5lLCBlbmRfbGluZSkKLSAgICAgIGJvZHkgPSBidWlsZF9pbmxpbmVfYm9keShmaWxlOiBmaWxlLCBzdGFydF9saW5lOiBzdGFydF9saW5lLCBtZXNzYWdlOiBtZXNzYWdlKQotICAgICAgcHVsbF9yZXF1ZXN0LmFkZF9jb21tZW50X29uX2xpbmVzKAotICAgICAgICBjb21taXRfaWQ6ICBjb21taXRfc2hhLAotICAgICAgICBmaWxlX3BhdGg6ICBmaWxlLAotICAgICAgICBzdGFydF9saW5lOiBzdGFydF9saW5lLAotICAgICAgICBlbmRfbGluZTogICBlbmRfbGluZSwKLSAgICAgICAgYm9keTogICAgICAgYm9keQotICAgICAgKQotICAgIGVuZAotCi0gICAgZGVmIHBvc3RfZ2xvYmFsX2NvbW1lbnQKLSAgICAgIHN1bW1hcnkgPSA8PH5NRAotICAgICAgICAje0dMT0JBTF9NQVJLRVJ9Ci0gICAgICAgIPCfp6ogKipUZXN0IENvdmVyYWdlIFN1bW1hcnkqKgotCi0gICAgICAgIOKchSAqKiN7YW5hbHlzaXMuZGlmZl9jb3ZlcmFnZX0lKiogb2YgY2hhbmdlZCBsaW5lcyBhcmUgY292ZXJlZC4KLSAgICAgIE1ECi0KLSAgICAgIGVuc3VyZV9nbG9iYWxfY29tbWVudChzdW1tYXJ5KQotICAgIGVuZAotCi0gICAgZGVmIGRlbGV0ZV9vbGRfaW5saW5lX2NvbW1lbnRzCi0gICAgICBjb21tZW50cyA9IHB1bGxfcmVxdWVzdC5pbmxpbmVfY29tbWVudHMKLSAgICAgIGNvbW1lbnRzLnNlbGVjdCB7IHxjfCBjLmJvZHkmLmluY2x1ZGU/KElOTElORV9NQVJLRVIpIH0uZWFjaCBkbyB8Y29tbWVudHwKLSAgICAgICAgcHVsbF9yZXF1ZXN0LmRlbGV0ZV9jb21tZW50KGNvbW1lbnQuaWQpCi0gICAgICBlbmQKLSAgICBlbmQKLQotICAgIGRlZiBlbnN1cmVfZ2xvYmFsX2NvbW1lbnQoYm9keSkKLSAgICAgIGNvbW1lbnRzID0gQHB1bGxfcmVxdWVzdC5nbG9iYWxfY29tbWVudHMKLSAgICAgIGV4aXN0aW5nID0gY29tbWVudHMuZmluZCB7IHxjfCBjLmJvZHkmLmluY2x1ZGU/KEdMT0JBTF9NQVJLRVIpIH0KLSAgICAgIGJvZHlfd2l0aF9tYXJrZXIgPSBib2R5LmluY2x1ZGU/KEdMT0JBTF9NQVJLRVIpID8gYm9keSA6ICIje0dMT0JBTF9NQVJLRVJ9XG4je2JvZHl9IgotICAgICAgaWYgZXhpc3RpbmcKLSAgICAgICAgQHB1bGxfcmVxdWVzdC51cGRhdGVfY29tbWVudChpZDogZXhpc3RpbmcuaWQsIGJvZHk6IGJvZHlfd2l0aF9tYXJrZXIpCi0gICAgICBlbHNlCi0gICAgICAgIEBwdWxsX3JlcXVlc3QuYWRkX2NvbW1lbnQoYm9keTogYm9keV93aXRoX21hcmtlcikKLSAgICAgIGVuZAotICAgIGVuZAotICBlbmQKLWVuZApkaWZmIC0tZ2l0IGEvbGliL2NvdmVyYWdlX3JlcG9ydGVyL2NvdmVyYWdlX2FuYWx5c2VyLnJiIGIvbGliL2NvdmVyYWdlX3JlcG9ydGVyL2NvdmVyYWdlX2FuYWx5c2VyLnJiCmRlbGV0ZWQgZmlsZSBtb2RlIDEwMDY0NAppbmRleCBjMzEwM2MyLi4wMDAwMDAwCi0tLSBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9jb3ZlcmFnZV9hbmFseXNlci5yYgorKysgL2Rldi9udWxsCkBAIC0xLDM5ICswLDAgQEAKLSMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCi0KLW1vZHVsZSBDb3ZlcmFnZVJlcG9ydGVyCi0gIEFuYWx5c2lzUmVzdWx0ID0gRGF0YS5kZWZpbmUoOnRvdGFsX2NoYW5nZWQsIDp0b3RhbF9jb3ZlcmVkLCA6ZGlmZl9jb3ZlcmFnZSwgOnVuY292ZXJlZF9ieV9maWxlKQotCi0gIGNsYXNzIENvdmVyYWdlQW5hbHlzZXIKLSAgICBkZWYgaW5pdGlhbGl6ZShjb3ZlcmFnZTosIGRpZmY6KQotICAgICAgQGNvdmVyYWdlID0gY292ZXJhZ2UKLSAgICAgIEBkaWZmICAgICA9IGRpZmYKLSAgICBlbmQKLQotICAgICMgcnVib2NvcDpkaXNhYmxlIE1ldHJpY3MvQWJjU2l6ZQotICAgIGRlZiBjYWxsCi0gICAgICB0b3RhbCA9IDAKLSAgICAgIGNvdmVyZWQgPSAwCi0gICAgICB1bmNvdmVyZWRfbWFwID0ge30KLQotICAgICAgQGRpZmYuZWFjaCBkbyB8ZmlsZSwgbGluZXN8Ci0gICAgICAgIG5leHQgdW5sZXNzIGxpbmVzICYmICFsaW5lcy5lbXB0eT8KLQotICAgICAgICB0b3RhbCArPSBsaW5lcy5zaXplCi0gICAgICAgIGNvdmVyZWRfbGluZXMgPSBBcnJheShAY292ZXJhZ2VbZmlsZV0pCi0gICAgICAgIGNvdmVyZWQgKz0gKGxpbmVzICYgY292ZXJlZF9saW5lcykuc2l6ZQotICAgICAgICBtaXNzZWQgPSBsaW5lcyAtIGNvdmVyZWRfbGluZXMKLSAgICAgICAgdW5jb3ZlcmVkX21hcFtmaWxlXSA9IG1pc3NlZCBpZiBtaXNzZWQuYW55PwotICAgICAgZW5kCi0KLSAgICAgIGRpZmZfY292ID0gdG90YWwgPiAwID8gKGNvdmVyZWQgKiAxMDAuMCAvIHRvdGFsKS5yb3VuZCgyKSA6IDEwMC4wCi0KLSAgICAgIEFuYWx5c2lzUmVzdWx0Lm5ldygKLSAgICAgICAgdG90YWxfY2hhbmdlZDogICAgIHRvdGFsLAotICAgICAgICB0b3RhbF9jb3ZlcmVkOiAgICAgY292ZXJlZCwKLSAgICAgICAgZGlmZl9jb3ZlcmFnZTogICAgIGRpZmZfY292LAotICAgICAgICB1bmNvdmVyZWRfYnlfZmlsZTogdW5jb3ZlcmVkX21hcAotICAgICAgKQotICAgIGVuZAotICAgICMgcnVib2NvcDplbmFibGUgTWV0cmljcy9BYmNTaXplCi0gIGVuZAotZW5kCmRpZmYgLS1naXQgYS9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvY292ZXJhZ2VfcGFyc2VyLnJiIGIvbGliL2NvdmVyYWdlX3JlcG9ydGVyL2NvdmVyYWdlX3BhcnNlci5yYgpkZWxldGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggZTExNDU1Zi4uMDAwMDAwMAotLS0gYS9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvY292ZXJhZ2VfcGFyc2VyLnJiCisrKyAvZGV2L251bGwKQEAgLTEsODUgKzAsMCBAQAotIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKLQotcmVxdWlyZSAianNvbiIKLQotbW9kdWxlIENvdmVyYWdlUmVwb3J0ZXIKLSAgY2xhc3MgQ292ZXJhZ2VQYXJzZXIKLSAgICBkZWYgaW5pdGlhbGl6ZShyZXN1bHRzZXRfcGF0aCkKLSAgICAgIEByZXN1bHRzZXRfcGF0aCA9IHJlc3VsdHNldF9wYXRoCi0gICAgZW5kCi0KLSAgICBkZWYgY2FsbAotICAgICAgcmF3ID0gcmVhZF9qc29uCi0gICAgICByZXR1cm4ge30gdW5sZXNzIHJhdy5pc19hPyhIYXNoKQotCi0gICAgICBhZ2dyZWdhdGUgPSBIYXNoLm5ldyB7IHxoLCBrfCBoW2tdID0gW10gfQotCi0gICAgICByYXcuZWFjaF92YWx1ZSBkbyB8ZW50cnl8Ci0gICAgICAgIG5leHQgdW5sZXNzIGVudHJ5LmlzX2E/KEhhc2gpCi0KLSAgICAgICAgY292ZXJhZ2VfaGFzaCA9IGV4dHJhY3RfY292ZXJhZ2VfaGFzaChlbnRyeSkKLSAgICAgICAgbmV4dCB1bmxlc3MgY292ZXJhZ2VfaGFzaAotCi0gICAgICAgIGNvdmVyYWdlX2hhc2guZWFjaCBkbyB8ZmlsZSwgbGluZV9kYXRhfAotICAgICAgICAgIGNvdmVyZWRfbGluZXMgPSBleHRyYWN0X2NvdmVyZWRfbGluZXMobGluZV9kYXRhKQotICAgICAgICAgIGFnZ3JlZ2F0ZVtmaWxlXSB8PSBjb3ZlcmVkX2xpbmVzICMgc2V0LXVuaW9uIHRvIGF2b2lkIGR1cGxpY2F0ZXMKLSAgICAgICAgZW5kCi0gICAgICBlbmQKLQotICAgICAgYWdncmVnYXRlCi0gICAgZW5kCi0KLSAgICBwcml2YXRlCi0KLSAgICBkZWYgcmVhZF9qc29uCi0gICAgICByZXR1cm4ge30gdW5sZXNzIEZpbGUuZmlsZT8oQHJlc3VsdHNldF9wYXRoKQotCi0gICAgICBjb250ZW50ID0gRmlsZS5yZWFkKEByZXN1bHRzZXRfcGF0aCkKLSAgICAgIEpTT04ucGFyc2UoY29udGVudCkKLSAgICByZXNjdWUgU3RhbmRhcmRFcnJvcgotICAgICAge30KLSAgICBlbmQKLQotICAgIGRlZiBleHRyYWN0X2NvdmVyYWdlX2hhc2goZW50cnkpCi0gICAgICBpZiBlbnRyeVsiY292ZXJhZ2UiXS5pc19hPyhIYXNoKQotICAgICAgICBlbnRyeVsiY292ZXJhZ2UiXQotICAgICAgZWxzaWYgZW50cnlbImZpbGVzIl0uaXNfYT8oQXJyYXkpCi0gICAgICAgIGVudHJ5WyJmaWxlcyJdLmVhY2hfd2l0aF9vYmplY3Qoe30pIGRvIHxmLCBhY2N8Ci0gICAgICAgICAgbmV4dCB1bmxlc3MgZi5pc19hPyhIYXNoKSAmJiBmWyJmaWxlbmFtZSJdICYmIGZbImNvdmVyYWdlIl0uaXNfYT8oQXJyYXkpCi0KLSAgICAgICAgICBhY2NbZlsiZmlsZW5hbWUiXV0gPSBmWyJjb3ZlcmFnZSJdCi0gICAgICAgIGVuZAotICAgICAgZW5kCi0gICAgZW5kCi0KLSAgICBkZWYgZXh0cmFjdF9jb3ZlcmVkX2xpbmVzKGxpbmVfZGF0YSkKLSAgICAgIGNhc2UgbGluZV9kYXRhCi0gICAgICB3aGVuIEFycmF5Ci0gICAgICAgIGFycmF5X2NvdmVyZWRfbGluZXMobGluZV9kYXRhKQotICAgICAgd2hlbiBIYXNoCi0gICAgICAgIGlmIGxpbmVfZGF0YVsibGluZXMiXS5pc19hPyhBcnJheSkKLSAgICAgICAgICBhcnJheV9jb3ZlcmVkX2xpbmVzKGxpbmVfZGF0YVsibGluZXMiXSkKLSAgICAgICAgZWxzZQotICAgICAgICAgIGhhc2hfY292ZXJlZF9saW5lcyhsaW5lX2RhdGEpCi0gICAgICAgIGVuZAotICAgICAgZWxzZQotICAgICAgICBbXQotICAgICAgZW5kCi0gICAgZW5kCi0KLSAgICBkZWYgYXJyYXlfY292ZXJlZF9saW5lcyhhcnIpCi0gICAgICBjb3ZlcmVkID0gW10KLSAgICAgIGFyci5lYWNoX3dpdGhfaW5kZXggZG8gfGNvdW50LCBpZHh8Ci0gICAgICAgIGNvdmVyZWQgPDwgKGlkeCArIDEpIGlmIGNvdW50LnRvX2kucG9zaXRpdmU/Ci0gICAgICBlbmQKLSAgICAgIGNvdmVyZWQKLSAgICBlbmQKLQotICAgIGRlZiBoYXNoX2NvdmVyZWRfbGluZXMoaGFzaCkKLSAgICAgIGhhc2guZWFjaF93aXRoX29iamVjdChbXSkgZG8gfChrLCB2KSwgYWNjfAotICAgICAgICBsaW5lX25vID0gay50b19pCi0gICAgICAgIGFjYyA8PCBsaW5lX25vIGlmIGxpbmVfbm8ucG9zaXRpdmU/ICYmIHYudG9faS5wb3NpdGl2ZT8KLSAgICAgIGVuZC5zb3J0Ci0gICAgZW5kCi0gIGVuZAotZW5kCmRpZmYgLS1naXQgYS9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvY292ZXJhZ2VfcmVwb3J0X2xvYWRlci5yYiBiL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9jb3ZlcmFnZV9yZXBvcnRfbG9hZGVyLnJiCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjZlNjQxNmYKLS0tIC9kZXYvbnVsbAorKysgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvY292ZXJhZ2VfcmVwb3J0X2xvYWRlci5yYgpAQCAtMCwwICsxLDIwIEBACisjIGZyb3plbl9zdHJpbmdfbGl0ZXJhbDogdHJ1ZQorCityZXF1aXJlICJqc29uIgorCittb2R1bGUgQ292ZXJhZ2VSZXBvcnRlcgorICBjbGFzcyBDb3ZlcmFnZVJlcG9ydExvYWRlcgorICAgIGRlZiBpbml0aWFsaXplKGNvdmVyYWdlX2ZpbGVfcGF0aCkKKyAgICAgIEBjb3ZlcmFnZV9maWxlX3BhdGggPSBjb3ZlcmFnZV9maWxlX3BhdGgKKyAgICBlbmQKKworICAgIGRlZiBjYWxsCisgICAgICBjb250ZW50ID0gRmlsZS5yZWFkKEBjb3ZlcmFnZV9maWxlX3BhdGgpCisgICAgICBKU09OLnBhcnNlKGNvbnRlbnQpCisgICAgZW5kCisKKyAgICBwcml2YXRlCisKKyAgICBhdHRyX3JlYWRlciA6Y292ZXJhZ2VfZmlsZV9wYXRoCisgIGVuZAorZW5kCmRpZmYgLS1naXQgYS9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvZ2xvYmFsX2NvbW1lbnQucmIgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvZ2xvYmFsX2NvbW1lbnQucmIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMzZkMDRlNwotLS0gL2Rldi9udWxsCisrKyBiL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9nbG9iYWxfY29tbWVudC5yYgpAQCAtMCwwICsxLDM0IEBACisjIGZyb3plbl9zdHJpbmdfbGl0ZXJhbDogdHJ1ZQorCittb2R1bGUgQ292ZXJhZ2VSZXBvcnRlcgorICBjbGFzcyBHbG9iYWxDb21tZW50CisgICAgZGVmIGluaXRpYWxpemUoY292ZXJhZ2VfcGVyY2VudGFnZTosIGNvbW1pdF9zaGE6KQorICAgICAgQGNvdmVyYWdlX3BlcmNlbnRhZ2UgPSBjb3ZlcmFnZV9wZXJjZW50YWdlCisgICAgICBAY29tbWl0X3NoYSA9IGNvbW1pdF9zaGEKKyAgICAgIEBib2R5ID0gYnVpbGRfYm9keQorICAgIGVuZAorCisgICAgZGVmIHRvX2gKKyAgICAgIHsKKyAgICAgICAgY292ZXJhZ2VfcGVyY2VudGFnZTogY292ZXJhZ2VfcGVyY2VudGFnZSwKKyAgICAgICAgY29tbWl0X3NoYTogICAgICAgICAgY29tbWl0X3NoYSwKKyAgICAgICAgYm9keTogICAgICAgICAgICAgICAgYm9keQorICAgICAgfQorICAgIGVuZAorCisgICAgYXR0cl9yZWFkZXIgOmNvdmVyYWdlX3BlcmNlbnRhZ2UsIDpjb21taXRfc2hhLCA6Ym9keQorCisgICAgcHJpdmF0ZQorCisgICAgZGVmIGJ1aWxkX2JvZHkKKyAgICAgIDw8fk1ECisgICAgICAgIDwhLS0gY292ZXJhZ2UtY29tbWVudC1tYXJrZXIgLS0+CisgICAgICAgIPCfp6ogKipUZXN0IENvdmVyYWdlIFN1bW1hcnkqKgorCisgICAgICAgIOKchSAqKiN7Y292ZXJhZ2VfcGVyY2VudGFnZX0lKiogb2YgY2hhbmdlZCBsaW5lcyBhcmUgY292ZXJlZC4KKworICAgICAgICBfQ29tbWl0OiAje2NvbW1pdF9zaGF9XworICAgICAgTUQKKyAgICBlbmQKKyAgZW5kCitlbmQKZGlmZiAtLWdpdCBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9nbG9iYWxfY29tbWVudF9mYWN0b3J5LnJiIGIvbGliL2NvdmVyYWdlX3JlcG9ydGVyL2dsb2JhbF9jb21tZW50X2ZhY3RvcnkucmIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uZmMwZDYzOQotLS0gL2Rldi9udWxsCisrKyBiL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9nbG9iYWxfY29tbWVudF9mYWN0b3J5LnJiCkBAIC0wLDAgKzEsMjggQEAKKyMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCisKK21vZHVsZSBDb3ZlcmFnZVJlcG9ydGVyCisgIGNsYXNzIEdsb2JhbENvbW1lbnRGYWN0b3J5CisgICAgZGVmIGluaXRpYWxpemUoY29tbWl0X3NoYTopCisgICAgICBAY29tbWl0X3NoYSA9IGNvbW1pdF9zaGEKKyAgICBlbmQKKworICAgIGRlZiBjYWxsCisgICAgICBjb3ZlcmFnZV9wZXJjZW50YWdlID0gY2FsY3VsYXRlX2NvdmVyYWdlX3BlcmNlbnRhZ2UKKyAgICAgIEdsb2JhbENvbW1lbnQubmV3KAorICAgICAgICBjb3ZlcmFnZV9wZXJjZW50YWdlOiBjb3ZlcmFnZV9wZXJjZW50YWdlLAorICAgICAgICBjb21taXRfc2hhOiAgICAgICAgICBjb21taXRfc2hhCisgICAgICApCisgICAgZW5kCisKKyAgICBwcml2YXRlCisKKyAgICBhdHRyX3JlYWRlciA6Y29tbWl0X3NoYQorCisgICAgZGVmIGNhbGN1bGF0ZV9jb3ZlcmFnZV9wZXJjZW50YWdlCisgICAgICAjIFNpbmNlIHdlIG9ubHkgaGF2ZSB1bmNvdmVyZWQgcmFuZ2VzLCB3ZSBjYW4ndCBjYWxjdWxhdGUgZXhhY3QgY292ZXJhZ2UgcGVyY2VudGFnZQorICAgICAgIyB3aXRob3V0IGtub3dpbmcgdGhlIHRvdGFsIGNoYW5nZWQgbGluZXMuIEZvciBub3csIHJldHVybiBhIHBsYWNlaG9sZGVyLgorICAgICAgIyBUaGlzIGNvdWxkIGJlIGVuaGFuY2VkIHRvIGFjY2VwdCB0b3RhbCBjaGFuZ2VkIGxpbmVzIGFzIGEgcGFyYW1ldGVyLgorICAgICAgIk4vQSIKKyAgICBlbmQKKyAgZW5kCitlbmQKZGlmZiAtLWdpdCBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9nbG9iYWxfY29tbWVudF9wb3N0ZXIucmIgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvZ2xvYmFsX2NvbW1lbnRfcG9zdGVyLnJiCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjM4NGE3Y2EKLS0tIC9kZXYvbnVsbAorKysgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvZ2xvYmFsX2NvbW1lbnRfcG9zdGVyLnJiCkBAIC0wLDAgKzEsMzIgQEAKKyMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCisKK21vZHVsZSBDb3ZlcmFnZVJlcG9ydGVyCisgIGNsYXNzIEdsb2JhbENvbW1lbnRQb3N0ZXIKKyAgICBHTE9CQUxfTUFSS0VSID0gIjwhLS0gY292ZXJhZ2UtY29tbWVudC1tYXJrZXIgLS0+IgorCisgICAgZGVmIGluaXRpYWxpemUocHVsbF9yZXF1ZXN0OiwgZ2xvYmFsX2NvbW1lbnQ6KQorICAgICAgQHB1bGxfcmVxdWVzdCA9IHB1bGxfcmVxdWVzdAorICAgICAgQGdsb2JhbF9jb21tZW50ID0gZ2xvYmFsX2NvbW1lbnQKKyAgICBlbmQKKworICAgIGRlZiBjYWxsCisgICAgICBlbnN1cmVfZ2xvYmFsX2NvbW1lbnQKKyAgICBlbmQKKworICAgIHByaXZhdGUKKworICAgIGF0dHJfcmVhZGVyIDpwdWxsX3JlcXVlc3QsIDpnbG9iYWxfY29tbWVudAorCisgICAgZGVmIGVuc3VyZV9nbG9iYWxfY29tbWVudAorICAgICAgY29tbWVudHMgPSBwdWxsX3JlcXVlc3QuZ2xvYmFsX2NvbW1lbnRzCisgICAgICBleGlzdGluZyA9IGNvbW1lbnRzLmZpbmQgeyB8Y3wgYy5ib2R5Ji5pbmNsdWRlPyhHTE9CQUxfTUFSS0VSKSB9CisgICAgICBib2R5X3dpdGhfbWFya2VyID0gZ2xvYmFsX2NvbW1lbnQuYm9keS5pbmNsdWRlPyhHTE9CQUxfTUFSS0VSKSA/IGdsb2JhbF9jb21tZW50LmJvZHkgOiAiI3tHTE9CQUxfTUFSS0VSfVxuI3tnbG9iYWxfY29tbWVudC5ib2R5fSIKKworICAgICAgaWYgZXhpc3RpbmcKKyAgICAgICAgcHVsbF9yZXF1ZXN0LnVwZGF0ZV9nbG9iYWxfY29tbWVudChpZDogZXhpc3RpbmcuaWQsIGJvZHk6IGJvZHlfd2l0aF9tYXJrZXIpCisgICAgICBlbHNlCisgICAgICAgIHB1bGxfcmVxdWVzdC5hZGRfZ2xvYmFsX2NvbW1lbnQoYm9keTogYm9keV93aXRoX21hcmtlcikKKyAgICAgIGVuZAorICAgIGVuZAorICBlbmQKK2VuZApkaWZmIC0tZ2l0IGEvbGliL2NvdmVyYWdlX3JlcG9ydGVyL2lubGluZV9jb21tZW50LnJiIGIvbGliL2NvdmVyYWdlX3JlcG9ydGVyL2lubGluZV9jb21tZW50LnJiCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmM1YjViNWMKLS0tIC9kZXYvbnVsbAorKysgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvaW5saW5lX2NvbW1lbnQucmIKQEAgLTAsMCArMSwzMyBAQAorIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKKworbW9kdWxlIENvdmVyYWdlUmVwb3J0ZXIKKyAgY2xhc3MgSW5saW5lQ29tbWVudAorICAgIGF0dHJfcmVhZGVyIDpmaWxlLCA6c3RhcnRfbGluZSwgOmVuZF9saW5lLCA6bWVzc2FnZSwgOmJvZHkKKworICAgIGRlZiBpbml0aWFsaXplKGZpbGU6LCBzdGFydF9saW5lOiwgZW5kX2xpbmU6LCBtZXNzYWdlOiwgYm9keTopCisgICAgICBAZmlsZSA9IGZpbGUKKyAgICAgIEBzdGFydF9saW5lID0gc3RhcnRfbGluZQorICAgICAgQGVuZF9saW5lID0gZW5kX2xpbmUKKyAgICAgIEBtZXNzYWdlID0gbWVzc2FnZQorICAgICAgQGJvZHkgPSBib2R5CisgICAgZW5kCisKKyAgICBkZWYgc2luZ2xlX2xpbmU/CisgICAgICBzdGFydF9saW5lID09IGVuZF9saW5lCisgICAgZW5kCisKKyAgICBkZWYgcmFuZ2U/CisgICAgICAhc2luZ2xlX2xpbmU/CisgICAgZW5kCisKKyAgICBkZWYgdG9faAorICAgICAgeworICAgICAgICBmaWxlOiAgICAgICBmaWxlLAorICAgICAgICBzdGFydF9saW5lOiBzdGFydF9saW5lLAorICAgICAgICBlbmRfbGluZTogICBlbmRfbGluZSwKKyAgICAgICAgbWVzc2FnZTogICAgbWVzc2FnZSwKKyAgICAgICAgYm9keTogICAgICAgYm9keQorICAgICAgfQorICAgIGVuZAorICBlbmQKK2VuZApkaWZmIC0tZ2l0IGEvbGliL2NvdmVyYWdlX3JlcG9ydGVyL2lubGluZV9jb21tZW50X2ZhY3RvcnkucmIgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvaW5saW5lX2NvbW1lbnRfZmFjdG9yeS5yYgpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi4zZWEwMjVhCi0tLSAvZGV2L251bGwKKysrIGIvbGliL2NvdmVyYWdlX3JlcG9ydGVyL2lubGluZV9jb21tZW50X2ZhY3RvcnkucmIKQEAgLTAsMCArMSw0OSBAQAorIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKKworbW9kdWxlIENvdmVyYWdlUmVwb3J0ZXIKKyAgY2xhc3MgSW5saW5lQ29tbWVudEZhY3RvcnkKKyAgICBJTkxJTkVfTUFSS0VSID0gIjwhLS0gY292ZXJhZ2UtaW5saW5lLW1hcmtlciAtLT4iCisKKyAgICBkZWYgaW5pdGlhbGl6ZShjb21taXRfc2hhOiwgaW50ZXJzZWN0aW9uOikKKyAgICAgIEBjb21taXRfc2hhID0gY29tbWl0X3NoYQorICAgICAgQGludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbgorICAgIGVuZAorCisgICAgZGVmIGNhbGwKKyAgICAgIGNvbW1lbnRzID0gW10KKworICAgICAgQGludGVyc2VjdGlvbi5lYWNoIGRvIHxmaWxlLCByYW5nZXN8CisgICAgICAgIHJhbmdlcy5lYWNoIGRvIHxzdGFydF9saW5lLCBlbmRfbGluZXwKKyAgICAgICAgICBtZXNzYWdlID0gYnVpbGRfbWVzc2FnZShzdGFydF9saW5lLCBlbmRfbGluZSkKKyAgICAgICAgICBib2R5ID0gYnVpbGRfYm9keShmaWxlOiBmaWxlLCBzdGFydF9saW5lOiBzdGFydF9saW5lLCBtZXNzYWdlOiBtZXNzYWdlKQorCisgICAgICAgICAgY29tbWVudHMgPDwgSW5saW5lQ29tbWVudC5uZXcoCisgICAgICAgICAgICBmaWxlOiAgICAgICBmaWxlLAorICAgICAgICAgICAgc3RhcnRfbGluZTogc3RhcnRfbGluZSwKKyAgICAgICAgICAgIGVuZF9saW5lOiAgIGVuZF9saW5lLAorICAgICAgICAgICAgbWVzc2FnZTogICAgbWVzc2FnZSwKKyAgICAgICAgICAgIGJvZHk6ICAgICAgIGJvZHkKKyAgICAgICAgICApCisgICAgICAgIGVuZAorICAgICAgZW5kCisKKyAgICAgIGNvbW1lbnRzCisgICAgZW5kCisKKyAgICBwcml2YXRlCisKKyAgICBhdHRyX3JlYWRlciA6Y29tbWl0X3NoYSwgOmludGVyc2VjdGlvbgorCisgICAgZGVmIGJ1aWxkX21lc3NhZ2Uoc3RhcnRfbGluZSwgZW5kX2xpbmUpCisgICAgICBpZiBzdGFydF9saW5lID09IGVuZF9saW5lCisgICAgICAgICLinYwgTGluZSAje3N0YXJ0X2xpbmV9IGlzIG5vdCBjb3ZlcmVkIGJ5IHRlc3RzLiIKKyAgICAgIGVsc2UKKyAgICAgICAgIuKdjCBMaW5lcyAje3N0YXJ0X2xpbmV94oCTI3tlbmRfbGluZX0gYXJlIG5vdCBjb3ZlcmVkIGJ5IHRlc3RzLiIKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgZGVmIGJ1aWxkX2JvZHkoZmlsZTosIHN0YXJ0X2xpbmU6LCBtZXNzYWdlOikKKyAgICAgICIje0lOTElORV9NQVJLRVJ9XG4je21lc3NhZ2V9XG5cbl9GaWxlOiAje2ZpbGV9LCBsaW5lICN7c3RhcnRfbGluZX1fXG5fQ29tbWl0OiAje2NvbW1pdF9zaGF9XyIKKyAgICBlbmQKKyAgZW5kCitlbmQKZGlmZiAtLWdpdCBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9pbmxpbmVfY29tbWVudF9wb3N0ZXIucmIgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvaW5saW5lX2NvbW1lbnRfcG9zdGVyLnJiCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjI5YWU0ZTEKLS0tIC9kZXYvbnVsbAorKysgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvaW5saW5lX2NvbW1lbnRfcG9zdGVyLnJiCkBAIC0wLDAgKzEsNDggQEAKKyMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCisKK3JlcXVpcmUgInNldCIKKworbW9kdWxlIENvdmVyYWdlUmVwb3J0ZXIKKyAgY2xhc3MgSW5saW5lQ29tbWVudFBvc3RlcgorICAgIGRlZiBpbml0aWFsaXplKHB1bGxfcmVxdWVzdDosIGNvbW1pdF9zaGE6LCBpbmxpbmVfY29tbWVudHM6KQorICAgICAgQHB1bGxfcmVxdWVzdCA9IHB1bGxfcmVxdWVzdAorICAgICAgQGNvbW1pdF9zaGEgPSBjb21taXRfc2hhCisgICAgICBAdXBkYXRlZF9jb21tZW50X2lkcyA9IFNldC5uZXcKKyAgICAgIEBpbmxpbmVfY29tbWVudHMgPSBpbmxpbmVfY29tbWVudHMKKyAgICBlbmQKKworICAgIGRlZiBjYWxsCisgICAgICBpbmxpbmVfY29tbWVudHMuZWFjaCBkbyB8Y29tbWVudHwKKyAgICAgICAgbG9nZ2VyLmRlYnVnKCJQb3N0aW5nIGlubGluZSBjb21tZW50IGZvciAje2NvbW1lbnQuZmlsZX06ICN7Y29tbWVudC5zdGFydF9saW5lfeKAkyN7Y29tbWVudC5lbmRfbGluZX0iKQorICAgICAgICBwb3N0X2NvbW1lbnQoY29tbWVudCkKKyAgICAgIGVuZAorCisgICAgICBAdXBkYXRlZF9jb21tZW50X2lkcworICAgIGVuZAorCisgICAgcHJpdmF0ZQorCisgICAgYXR0cl9yZWFkZXIgOnB1bGxfcmVxdWVzdCwgOmNvbW1pdF9zaGEsIDp1cGRhdGVkX2NvbW1lbnRfaWRzLCA6aW5saW5lX2NvbW1lbnRzCisKKyAgICBkZWYgbG9nZ2VyCisgICAgICBDb3ZlcmFnZVJlcG9ydGVyLmxvZ2dlcgorICAgIGVuZAorCisgICAgZGVmIHBvc3RfY29tbWVudChjb21tZW50KQorICAgICAgZXhpc3RpbmdfY29tbWVudCA9IHB1bGxfcmVxdWVzdC5maW5kX2V4aXN0aW5nX2lubGluZV9jb21tZW50KGNvbW1lbnQuZmlsZSwgY29tbWVudC5zdGFydF9saW5lLCBjb21tZW50LmVuZF9saW5lKQorCisgICAgICBpZiBleGlzdGluZ19jb21tZW50CisgICAgICAgIHB1bGxfcmVxdWVzdC51cGRhdGVfaW5saW5lX2NvbW1lbnQoaWQ6IGV4aXN0aW5nX2NvbW1lbnQuaWQsIGJvZHk6IGNvbW1lbnQuYm9keSkKKyAgICAgICAgQHVwZGF0ZWRfY29tbWVudF9pZHMuYWRkKGV4aXN0aW5nX2NvbW1lbnQuaWQpCisgICAgICBlbHNlCisgICAgICAgIHB1bGxfcmVxdWVzdC5hZGRfY29tbWVudF9vbl9saW5lcygKKyAgICAgICAgICBjb21taXRfaWQ6ICBjb21taXRfc2hhLAorICAgICAgICAgIGZpbGVfcGF0aDogIGNvbW1lbnQuZmlsZSwKKyAgICAgICAgICBzdGFydF9saW5lOiBjb21tZW50LnN0YXJ0X2xpbmUsCisgICAgICAgICAgZW5kX2xpbmU6ICAgY29tbWVudC5lbmRfbGluZSwKKyAgICAgICAgICBib2R5OiAgICAgICBjb21tZW50LmJvZHkKKyAgICAgICAgKQorICAgICAgZW5kCisgICAgZW5kCisgIGVuZAorZW5kCmRpZmYgLS1naXQgYS9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvZGlmZl9wYXJzZXIucmIgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvbW9kaWZpZWRfcmFuZ2VzX2V4dHJhY3Rvci5yYgpzaW1pbGFyaXR5IGluZGV4IDU5JQpyZW5hbWUgZnJvbSBsaWIvY292ZXJhZ2VfcmVwb3J0ZXIvZGlmZl9wYXJzZXIucmIKcmVuYW1lIHRvIGxpYi9jb3ZlcmFnZV9yZXBvcnRlci9tb2RpZmllZF9yYW5nZXNfZXh0cmFjdG9yLnJiCmluZGV4IGIyMDVkMTguLjk4ZjkwNjQgMTAwNjQ0Ci0tLSBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9kaWZmX3BhcnNlci5yYgorKysgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvbW9kaWZpZWRfcmFuZ2VzX2V4dHJhY3Rvci5yYgpAQCAtMSwzNiArMSwzMCBAQAogIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKIAotcmVxdWlyZSAib3BlbjMiCi1yZXF1aXJlICJzaGVsbHdvcmRzIgotCiBtb2R1bGUgQ292ZXJhZ2VSZXBvcnRlcgotICBjbGFzcyBEaWZmUGFyc2VyCisgIGNsYXNzIE1vZGlmaWVkUmFuZ2VzRXh0cmFjdG9yCiAgICAgSFVOS19IRUFERVIgPSAvXkBAIC1cZCsoPzosXGQrKT8gXCsoXGQrKSg/OiwoXGQrKSk/IEBALwogCi0gICAgZGVmIGluaXRpYWxpemUoYmFzZV9yZWYpCi0gICAgICBAYmFzZV9yZWYgPSBiYXNlX3JlZgorICAgIGRlZiBpbml0aWFsaXplKGRpZmZfdGV4dCkKKyAgICAgIEBkaWZmX3RleHQgPSBkaWZmX3RleHQKICAgICBlbmQKIAogICAgIGRlZiBjYWxsCi0gICAgICBvdXRwdXQgPSBydW5fZ2l0X2RpZmYKLSAgICAgIHJldHVybiB7fSB1bmxlc3Mgb3V0cHV0CisgICAgICByZXR1cm4ge30gdW5sZXNzIEBkaWZmX3RleHQKIAotICAgICAgcGFyc2VfZGlmZihvdXRwdXQpCisgICAgICBwYXJzZV9kaWZmKEBkaWZmX3RleHQpCiAgICAgcmVzY3VlIFN0YW5kYXJkRXJyb3IKICAgICAgIHt9CiAgICAgZW5kCiAKICAgICBwcml2YXRlCiAKLSAgICBkZWYgcnVuX2dpdF9kaWZmCi0gICAgICByZWYgPSBTaGVsbHdvcmRzLmVzY2FwZShAYmFzZV9yZWYudG9fcykKLSAgICAgIGNtZCA9ICJnaXQgZGlmZiAtLXVuaWZpZWQ9MCAje3JlZn0uLi5IRUFEIC0tZGlmZi1maWx0ZXI9QU0gLS1uby1jb2xvciIKLSAgICAgIHN0ZG91dCwgc3RhdHVzID0gT3BlbjMuY2FwdHVyZTJlKGNtZCkKLSAgICAgIHJldHVybiBuaWwgdW5sZXNzIHN0YXR1cy5zdWNjZXNzPworICAgIGRlZiB0aGlzX2lzX2FuX2V4YW1wbGVfbWV0aG9kCisgICAgICAjIFRoaXMgaXMgZHVtbXkgY29kZSB0aGF0IGlzIG5ldmVyIGNhbGxlZC4KKyAgICAgICMgSXQgaGFzIGJlZW4gYWRkZWQgdG8gZW5zdXJlIHRoYXQgdGhlcmUgaXMgY29kZSB3aXRob3V0IGNvdmVyYWdlLgogCi0gICAgICBzdGRvdXQKLSAgICByZXNjdWUgU3RhbmRhcmRFcnJvcgotICAgICAgbmlsCisgICAgICBFTlYuZWFjaCBkbyB8a2V5LCB2YWx1ZXwKKyAgICAgICAgcHV0cyAiI3trZXl9PSN7dmFsdWV9IgorICAgICAgZW5kCiAgICAgZW5kCiAKICAgICBkZWYgcGFyc2VfZGlmZih0ZXh0KQpAQCAtNTYsNyArNTAsOCBAQCBkZWYgcGFyc2VfZGlmZih0ZXh0KQogICAgICAgICBjdXJyZW50X25ld19saW5lID0gcHJvY2Vzc19jb250ZW50X2xpbmUobGluZSwgY2hhbmdlZCwgY3VycmVudF9maWxlLCBjdXJyZW50X25ld19saW5lKQogICAgICAgZW5kCiAKLSAgICAgIGNoYW5nZWQudHJhbnNmb3JtX3ZhbHVlcyB7IHxhcnJ8IGFyci51bmlxLnNvcnQgfQorICAgICAgIyBDb252ZXJ0IGFycmF5cyBvZiBsaW5lIG51bWJlcnMgdG8gcmFuZ2VzCisgICAgICBjaGFuZ2VkLnRyYW5zZm9ybV92YWx1ZXMgeyB8YXJyfCBjb25zb2xpZGF0ZV90b19yYW5nZXMoYXJyLnVuaXEuc29ydCkgfQogICAgIGVuZAogCiAgICAgZGVmIGZpbGVfaGVhZGVyX2xpbmU/KGxpbmUpCkBAIC05Miw1ICs4NywyOSBAQCBkZWYgcGFyc2VfbmV3X2ZpbGVfcGF0aChsaW5lKQogICAgICAgICBtWzFdCiAgICAgICBlbmQKICAgICBlbmQKKworICAgIGRlZiBjb25zb2xpZGF0ZV90b19yYW5nZXMobGluZV9udW1iZXJzKQorICAgICAgcmV0dXJuIFtdIGlmIGxpbmVfbnVtYmVycy5lbXB0eT8KKworICAgICAgcmFuZ2VzID0gW10KKyAgICAgIHN0YXJ0ID0gbGluZV9udW1iZXJzLmZpcnN0CisgICAgICBsYXN0ID0gbGluZV9udW1iZXJzLmZpcnN0CisKKyAgICAgIGxpbmVfbnVtYmVycy5lYWNoX2NvbnMoMikgZG8gfGN1cnJlbnQsIG5leHRfbGluZXwKKyAgICAgICAgaWYgbmV4dF9saW5lID09IGN1cnJlbnQgKyAxCisgICAgICAgICAgIyBDb25zZWN1dGl2ZSBsaW5lLCBleHRlbmQgY3VycmVudCByYW5nZQorICAgICAgICAgIGxhc3QgPSBuZXh0X2xpbmUKKyAgICAgICAgZWxzZQorICAgICAgICAgICMgR2FwIGZvdW5kLCBjbG9zZSBjdXJyZW50IHJhbmdlIGFuZCBzdGFydCBuZXcgb25lCisgICAgICAgICAgcmFuZ2VzIDw8IFtzdGFydCwgbGFzdF0KKyAgICAgICAgICBzdGFydCA9IG5leHRfbGluZQorICAgICAgICAgIGxhc3QgPSBuZXh0X2xpbmUKKyAgICAgICAgZW5kCisgICAgICBlbmQKKworICAgICAgIyBBZGQgdGhlIGZpbmFsIHJhbmdlCisgICAgICByYW5nZXMgPDwgW3N0YXJ0LCBsYXN0XQorICAgICAgcmFuZ2VzCisgICAgZW5kCiAgIGVuZAogZW5kCmRpZmYgLS1naXQgYS9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvbW9kaWZpZWRfdW5jb3ZlcmVkX2ludGVyc2VjdGlvbi5yYiBiL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9tb2RpZmllZF91bmNvdmVyZWRfaW50ZXJzZWN0aW9uLnJiCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjRhNjY5NzgKLS0tIC9kZXYvbnVsbAorKysgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvbW9kaWZpZWRfdW5jb3ZlcmVkX2ludGVyc2VjdGlvbi5yYgpAQCAtMCwwICsxLDY0IEBACisjIGZyb3plbl9zdHJpbmdfbGl0ZXJhbDogdHJ1ZQorCittb2R1bGUgQ292ZXJhZ2VSZXBvcnRlcgorICAjIEFuYWx5emVzIGNvdmVyYWdlIGRhdGEgYWdhaW5zdCBkaWZmIGRhdGEgdG8gZmluZCB1bmNvdmVyZWQgbGluZXMgaW4gY2hhbmdlZCBjb2RlCisgICMKKyAgIyBAcGFyYW0gY292ZXJhZ2UgW0hhc2hdIENvdmVyYWdlIGRhdGEgd2hlcmU6CisgICMgICAtIEtleXMgYXJlIGZpbGVuYW1lcyAoZS5nLiwgImFwcC9tb2RlbHMvdXNlci5yYiIpCisgICMgICAtIFZhbHVlcyBhcmUgYXJyYXlzIG9mIHJhbmdlcyByZXByZXNlbnRpbmcgdW5jb3ZlcmVkIGxpbmVzCisgICMgICAtIEV4YW1wbGU6IHsgImFwcC9tb2RlbHMvdXNlci5yYiIgPT4gW1sxMiwxNF0sWzI5LDMwXV0gfQorICAjCisgICMgQHBhcmFtIGRpZmYgW0hhc2hdIERpZmYgZGF0YSB3aGVyZToKKyAgIyAgIC0gS2V5cyBhcmUgZmlsZW5hbWVzIChlLmcuLCAiYXBwL21vZGVscy91c2VyLnJiIikKKyAgIyAgIC0gVmFsdWVzIGFyZSBhcnJheXMgb2YgYXJyYXlzIHJlcHJlc2VudGluZyBtb2RpZmllZCBvciBuZXcgbGluZSByYW5nZXMKKyAgIyAgIC0gRXhhbXBsZTogeyAiYXBwL3NlcnZpY2VzL2Zvby5yYiIgPT4gW1sxMDAsMTIwXV0gfQorICBjbGFzcyBNb2RpZmllZFVuY292ZXJlZEludGVyc2VjdGlvbgorICAgIGRlZiBpbml0aWFsaXplKHVuY292ZXJlZF9yYW5nZXM6LCBtb2RpZmllZF9yYW5nZXM6KQorICAgICAgQHVuY292ZXJlZF9yYW5nZXMgPSB1bmNvdmVyZWRfcmFuZ2VzCisgICAgICBAbW9kaWZpZWRfcmFuZ2VzID0gbW9kaWZpZWRfcmFuZ2VzCisgICAgZW5kCisKKyAgICBkZWYgY2FsbAorICAgICAgbG9nZ2VyLmRlYnVnKCJTdGFydGluZyBjb3ZlcmFnZSBhbmFseXNpcyBmb3IgI3tAbW9kaWZpZWRfcmFuZ2VzLnNpemV9IG1vZGlmaWVkIGZpbGVzIikKKworICAgICAgaW50ZXJzZWN0aW9ucyA9IHt9CisKKyAgICAgIEBtb2RpZmllZF9yYW5nZXMuZWFjaCBkbyB8ZmlsZSwgbW9kaWZpZWRfcmFuZ2VzfAorICAgICAgICBuZXh0IHVubGVzcyBAdW5jb3ZlcmVkX3Jhbmdlcy5rZXk/KGZpbGUpCisgICAgICAgIG5leHQgaWYgbW9kaWZpZWRfcmFuZ2VzLm5pbD8KKworICAgICAgICB1bmNvdmVyZWRfcmFuZ2VzID0gQHVuY292ZXJlZF9yYW5nZXNbZmlsZV0gfHwgW10KKyAgICAgICAgaW50ZXJzZWN0aW5nX3JhbmdlcyA9IGludGVyc2VjdF9yYW5nZXMobW9kaWZpZWRfcmFuZ2VzLCB1bmNvdmVyZWRfcmFuZ2VzKQorICAgICAgICBpbnRlcnNlY3Rpb25zW2ZpbGVdID0gaW50ZXJzZWN0aW5nX3JhbmdlcworICAgICAgZW5kCisKKyAgICAgIGxvZ2dlci5kZWJ1ZygiSWRlbnRpZmllZCBtb2RpZmllZCB1bmNvdmVyZWQgaW50ZXJzZWN0aW9uOiAje2ludGVyc2VjdGlvbnN9IikKKworICAgICAgaW50ZXJzZWN0aW9ucworICAgIGVuZAorCisgICAgcHJpdmF0ZQorCisgICAgZGVmIGxvZ2dlcgorICAgICAgQ292ZXJhZ2VSZXBvcnRlci5sb2dnZXIKKyAgICBlbmQKKworICAgICMgcnVib2NvcDpkaXNhYmxlIE1ldHJpY3MvQWJjU2l6ZQorICAgIGRlZiBpbnRlcnNlY3RfcmFuZ2VzKGNoYW5nZWQsIHVuY292ZXJlZCkKKyAgICAgIGkgPSBqID0gMAorICAgICAgcmVzdWx0ID0gW10KKyAgICAgIHdoaWxlIGkgPCBjaGFuZ2VkLnNpemUgJiYgaiA8IHVuY292ZXJlZC5zaXplCisgICAgICAgIHMgPSBbY2hhbmdlZFtpXVswXSwgdW5jb3ZlcmVkW2pdWzBdXS5tYXgKKyAgICAgICAgZSA9IFtjaGFuZ2VkW2ldWzFdLCB1bmNvdmVyZWRbal1bMV1dLm1pbgorICAgICAgICByZXN1bHQgPDwgW3MsIGVdIGlmIHMgPD0gZQorICAgICAgICBpZiBjaGFuZ2VkW2ldWzFdIDwgdW5jb3ZlcmVkW2pdWzFdCisgICAgICAgICAgaSArPSAxCisgICAgICAgIGVsc2UKKyAgICAgICAgICBqICs9IDEKKyAgICAgICAgZW5kCisgICAgICBlbmQKKyAgICAgIHJlc3VsdAorICAgIGVuZAorICAgICMgcnVib2NvcDplbmFibGUgTWV0cmljcy9BYmNTaXplCisgIGVuZAorZW5kCmRpZmYgLS1naXQgYS9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvb3B0aW9ucy5yYiBiL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9vcHRpb25zLnJiCmluZGV4IGFmYmE4YjEuLjY1MzdjMGQgMTAwNjQ0Ci0tLSBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9vcHRpb25zLnJiCisrKyBiL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9vcHRpb25zLnJiCkBAIC0xLDEzICsxLDE2IEBACiAjIGZyb3plbl9zdHJpbmdfbGl0ZXJhbDogdHJ1ZQogCityZXF1aXJlICJvcHRwYXJzZSIKKwogbW9kdWxlIENvdmVyYWdlUmVwb3J0ZXIKICAgY2xhc3MgT3B0aW9ucwogICAgIERFRkFVTFRTID0gewotICAgICAgY292ZXJhZ2VfcGF0aDogRU5WLmZldGNoKCJDT1ZFUkFHRV9QQVRIIiwgImNvdmVyYWdlL2NvdmVyYWdlLmpzb24iKSwKLSAgICAgIGh0bWxfcm9vdDogICAgIEVOVi5mZXRjaCgiSFRNTF9ST09UIiwgImNvdmVyYWdlIiksCi0gICAgICBiYXNlX3JlZjogICAgICBFTlYuZmV0Y2goIkJBU0VfUkVGIiwgIm9yaWdpbi9tYWluIiksCi0gICAgICBidWlsZF91cmw6ICAgICBFTlYuZmV0Y2goIkJVSUxEX1VSTCIsIG5pbCksCi0gICAgICBnaXRodWJfdG9rZW46ICBFTlYuZmV0Y2goIkdJVEhVQl9UT0tFTiIsIG5pbCkKKyAgICAgIGJ1aWxkX3VybDogICAgICAgICAgICBFTlYuZmV0Y2goIkJVSUxEX1VSTCIsIG5pbCksCisgICAgICBjb21taXRfc2hhOiAgICAgICAgICAgRU5WLmZldGNoKCJDT01NSVRfU0hBIiwgbmlsKSwKKyAgICAgIGNvdmVyYWdlX3JlcG9ydF9wYXRoOiBFTlYuZmV0Y2goIkNPVkVSQUdFX1JFUE9SVF9QQVRIIiwgImNvdmVyYWdlL2NvdmVyYWdlLmpzb24iKSwKKyAgICAgIGdpdGh1Yl90b2tlbjogICAgICAgICBFTlYuZmV0Y2goIkdJVEhVQl9UT0tFTiIsIG5pbCksCisgICAgICBwcl9udW1iZXI6ICAgICAgICAgICAgRU5WLmZldGNoKCJQUl9OVU1CRVIiLCBuaWwpLAorICAgICAgcmVwbzogICAgICAgICAgICAgICAgIEVOVi5mZXRjaCgiUkVQTyIsIG5pbCkKICAgICB9LmZyZWV6ZQogCiAgICAgIyBydWJvY29wOmRpc2FibGUgTWV0cmljcy9BYmNTaXplCkBAIC0xNiwyMSArMTksMjYgQEAgZGVmIHNlbGYucGFyc2UoYXJndikKICAgICAgIG9wdHMgPSBERUZBVUxUUy5kdXAKIAogICAgICAgcGFyc2VyID0gT3B0aW9uUGFyc2VyLm5ldyBkbyB8b3wKLSAgICAgICAgby5iYW5uZXIgPSAiVXNhZ2U6IGNvdmVyYWdlX3JlcG9ydGVyIFtvcHRpb25zXSIKKyAgICAgICAgby5iYW5uZXIgPSAiVXNhZ2U6IGNvdmVyYWdlLXJlcG9ydGVyIFtvcHRpb25zXSIKKyAgICAgICAgby5vbigiLS1idWlsZC11cmwgVVJMIiwgIkNJIGJ1aWxkIFVSTCB1c2VkIGZvciBsaW5rcyAoZGVmYXVsdDogJEJVSUxEX1VSTCkiKSBkbyB8dnwKKyAgICAgICAgICBvcHRzWzpidWlsZF91cmxdID0gdgorICAgICAgICBlbmQKKyAgICAgICAgby5vbigiLS1jb21taXQtc2hhIFNIQSIsICJHaXRIdWIgY29tbWl0IFNIQSAoZGVmYXVsdDogJENPTU1JVF9TSEEpIikgZG8gfHZ8CisgICAgICAgICAgb3B0c1s6Y29tbWl0X3NoYV0gPSB2CisgICAgICAgIGVuZAogICAgICAgICBvLm9uKAotICAgICAgICAgICItLWNvdmVyYWdlLXBhdGggUEFUSCIsCisgICAgICAgICAgIi0tY292ZXJhZ2UtcmVwb3J0LXBhdGggUEFUSCIsCiAgICAgICAgICAgIlBhdGggdG8gbWVyZ2VkIFNpbXBsZUNvdiBjb3ZlcmFnZS5qc29uIChkZWZhdWx0OiBjb3ZlcmFnZS9jb3ZlcmFnZS5qc29uKSIKICAgICAgICAgKSBkbyB8dnwKLSAgICAgICAgICBvcHRzWzpjb3ZlcmFnZV9wYXRoXSA9IHYKLSAgICAgICAgZW5kCi0gICAgICAgIG8ub24oIi0taHRtbC1yb290IFBBVEgiLCAiUm9vdCBvZiBIVE1MIGNvdmVyYWdlIHJlcG9ydCAoZGVmYXVsdDogY292ZXJhZ2UpIikgZG8gfHZ8Ci0gICAgICAgICAgb3B0c1s6aHRtbF9yb290XSA9IHYKKyAgICAgICAgICBvcHRzWzpjb3ZlcmFnZV9yZXBvcnRfcGF0aF0gPSB2CiAgICAgICAgIGVuZAogICAgICAgICBvLm9uKCItLWdpdGh1Yi10b2tlbiBUT0tFTiIsICJHaXRIdWIgdG9rZW4gKGRlZmF1bHQ6ICRHSVRIVUJfVE9LRU4pIikgeyB8dnwgb3B0c1s6Z2l0aHViX3Rva2VuXSA9IHYgfQotICAgICAgICBvLm9uKCItLWJ1aWxkLXVybCBVUkwiLCAiQ0kgYnVpbGQgVVJMIHVzZWQgZm9yIGxpbmtzIChkZWZhdWx0OiAkQlVJTERfVVJMKSIpIGRvIHx2fAotICAgICAgICAgIG9wdHNbOmJ1aWxkX3VybF0gPSB2CisgICAgICAgIG8ub24oIi0tcHItbnVtYmVyIE5VTUJFUiIsICJHaXRIdWIgcHVsbCByZXF1ZXN0IG51bWJlciAoZGVmYXVsdDogJFBSX05VTUJFUikiKSBkbyB8dnwKKyAgICAgICAgICBvcHRzWzpwcl9udW1iZXJdID0gdgorICAgICAgICBlbmQKKyAgICAgICAgby5vbigiLS1yZXBvIFJFUE8iLCAiR2l0SHViIHJlcG9zaXRvcnkgKGRlZmF1bHQ6ICRSRVBPKSIpIGRvIHx2fAorICAgICAgICAgIG9wdHNbOnJlcG9dID0gdgogICAgICAgICBlbmQKLSAgICAgICAgby5vbigiLS1iYXNlLXJlZiBSRUYiLCAiQmFzZSBnaXQgcmVmIGZvciBkaWZmIChkZWZhdWx0OiBvcmlnaW4vbWFpbikiKSB7IHx2fCBvcHRzWzpiYXNlX3JlZl0gPSB2IH0KICAgICAgICAgby5vbl90YWlsKCItaCIsICItLWhlbHAiLCAiU2hvdyBoZWxwIikgZG8KICAgICAgICAgICBwdXRzIG8KICAgICAgICAgICBleGl0IDAKQEAgLTM4LDcgKzQ2LDYgQEAgZGVmIHNlbGYucGFyc2UoYXJndikKICAgICAgIGVuZAogICAgICAgIyBydWJvY29wOmVuYWJsZSBNZXRyaWNzL0FiY1NpemUKICAgICAgICMgcnVib2NvcDplbmFibGUgTWV0cmljcy9NZXRob2RMZW5ndGgKLQogICAgICAgcGFyc2VyLnBhcnNlIShhcmd2KQogCiAgICAgICB2YWxpZGF0ZSEob3B0cykKZGlmZiAtLWdpdCBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9wdWxsX3JlcXVlc3QucmIgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvcHVsbF9yZXF1ZXN0LnJiCmluZGV4IGFmZGEwMjkuLmIzYjVhMjcgMTAwNjQ0Ci0tLSBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9wdWxsX3JlcXVlc3QucmIKKysrIGIvbGliL2NvdmVyYWdlX3JlcG9ydGVyL3B1bGxfcmVxdWVzdC5yYgpAQCAtMyw1NSArMywxNzggQEAKIG1vZHVsZSBDb3ZlcmFnZVJlcG9ydGVyCiAgIGNsYXNzIFB1bGxSZXF1ZXN0CiAgICAgZGVmIGluaXRpYWxpemUoZ2l0aHViX3Rva2VuOiwgcmVwbzosIHByX251bWJlcjopCi0gICAgICBvcHRzID0geyBnaXRodWJfdG9rZW46IGdpdGh1Yl90b2tlbiB9CisgICAgICBvcHRzID0geyBhY2Nlc3NfdG9rZW46IGdpdGh1Yl90b2tlbiB9CiAKLSAgICAgIEBjbGllbnQgPSBPY3Rva2l0OjpDbGllbnQubmV3KCoqb3B0cykKKyAgICAgIEBjbGllbnQgPSA6Ok9jdG9raXQ6OkNsaWVudC5uZXcoKipvcHRzKQogICAgICAgQGNsaWVudC5hdXRvX3BhZ2luYXRlID0gdHJ1ZQotICAgICAgQHJlcG8gPSByZXBvCisgICAgICBAcmVwbyA9IG5vcm1hbGl6ZV9yZXBvKHJlcG8pCiAgICAgICBAcHJfbnVtYmVyID0gcHJfbnVtYmVyCiAgICAgZW5kCiAKLSAgICBkZWYgaW5saW5lX2NvbW1lbnRzCi0gICAgICBjbGllbnQuaXNzdWVfY29tbWVudHMocmVwbywgcHJfbnVtYmVyKQorICAgIGRlZiBsYXRlc3RfY29tbWl0X3NoYQorICAgICAgQGxhdGVzdF9jb21taXRfc2hhIHx8PSBjbGllbnQucHVsbF9yZXF1ZXN0KHJlcG8sIHByX251bWJlcikuaGVhZC5zaGEKICAgICBlbmQKIAorICAgICMgZ2V0IGdsb2JhbCBjb21tZW50cwogICAgIGRlZiBnbG9iYWxfY29tbWVudHMKKyAgICAgIGNsaWVudC5pc3N1ZV9jb21tZW50cyhyZXBvLCBwcl9udW1iZXIpCisgICAgZW5kCisKKyAgICAjIGFkZCBnbG9iYWwgY29tbWVudAorICAgIGRlZiBhZGRfZ2xvYmFsX2NvbW1lbnQoYm9keTopCisgICAgICBjbGllbnQuYWRkX2NvbW1lbnQocmVwbywgcHJfbnVtYmVyLCBib2R5KQorICAgIGVuZAorCisgICAgIyB1cGRhdGUgZ2xvYmFsIGNvbW1lbnQKKyAgICBkZWYgdXBkYXRlX2dsb2JhbF9jb21tZW50KGlkOiwgYm9keTopCisgICAgICBjbGllbnQudXBkYXRlX2NvbW1lbnQocmVwbywgaWQsIGJvZHkpCisgICAgZW5kCisKKyAgICAjIGRlbGV0ZSBnbG9iYWwgY29tbWVudAorICAgIGRlZiBkZWxldGVfZ2xvYmFsX2NvbW1lbnQoaWQpCisgICAgICBjbGllbnQuZGVsZXRlX2NvbW1lbnQocmVwbywgaWQpCisgICAgZW5kCisKKyAgICAjIGdldCBpbmxpbmUgY29tbWVudHMKKyAgICBkZWYgaW5saW5lX2NvbW1lbnRzCiAgICAgICBjbGllbnQucHVsbF9yZXF1ZXN0X2NvbW1lbnRzKHJlcG8sIHByX251bWJlcikKICAgICBlbmQKIAotICAgIGRlZiBhZGRfY29tbWVudChib2R5OikKLSAgICAgIGNsaWVudC5wb3N0KAotICAgICAgICAiL3JlcG9zLyN7cmVwb30vcHVsbHMvI3twcl9udW1iZXJ9L2NvbW1lbnRzIiwKLSAgICAgICAgYm9keTogYm9keQotICAgICAgKQorICAgICMgdXBkYXRlIGlubGluZSBjb21tZW50CisgICAgZGVmIHVwZGF0ZV9pbmxpbmVfY29tbWVudChpZDosIGJvZHk6KQorICAgICAgY2xpZW50LnVwZGF0ZV9wdWxsX3JlcXVlc3RfY29tbWVudChyZXBvLCBpZCwgYm9keSkKICAgICBlbmQKIAotICAgIGRlZiB1cGRhdGVfY29tbWVudChpZDosIGJvZHk6KQotICAgICAgY2xpZW50LnBhdGNoKAotICAgICAgICAiL3JlcG9zLyN7cmVwb30vcHVsbHMvY29tbWVudHMvI3tpZH0iLAotICAgICAgICBib2R5OiBib2R5Ci0gICAgICApCisgICAgIyBkZWxldGUgaW5saW5lIGNvbW1lbnQKKyAgICBkZWYgZGVsZXRlX2lubGluZV9jb21tZW50KGlkKQorICAgICAgY2xpZW50LmRlbGV0ZV9wdWxsX3JlcXVlc3RfY29tbWVudChyZXBvLCBpZCkKICAgICBlbmQKIAotICAgIGRlZiBhZGRfY29tbWVudF9vbl9saW5lcyhjb21taXRfaWQ6LCBmaWxlX3BhdGg6LCBzdGFydF9saW5lOiwgZW5kX2xpbmU6LCBib2R5Oiwgc2lkZTogIlJJR0hUIikKLSAgICAgIHBheWxvYWQgPSB7Ci0gICAgICAgIGJvZHk6ICAgICAgIGJvZHksCi0gICAgICAgIGNvbW1pdF9pZDogIGNvbW1pdF9pZCwKLSAgICAgICAgcGF0aDogICAgICAgZmlsZV9wYXRoLAotICAgICAgICBzdGFydF9saW5lOiBzdGFydF9saW5lLAotICAgICAgICBzdGFydF9zaWRlOiBzaWRlLAotICAgICAgICBsaW5lOiAgICAgICBlbmRfbGluZSwKLSAgICAgICAgc2lkZTogICAgICAgc2lkZQotICAgICAgfQorICAgIGRlZiBhZGRfY29tbWVudF9vbl9saW5lcyhjb21taXRfaWQ6LCBmaWxlX3BhdGg6LCBzdGFydF9saW5lOiwgZW5kX2xpbmU6LCBib2R5OikKKyAgICAgIGV4aXN0aW5nX2NvbW1lbnQgPSBmaW5kX2V4aXN0aW5nX2lubGluZV9jb21tZW50KGZpbGVfcGF0aCwgc3RhcnRfbGluZSwgZW5kX2xpbmUpCiAKLSAgICAgIGNsaWVudC5wb3N0KAotICAgICAgICAiL3JlcG9zLyN7cmVwb30vcHVsbHMvI3twcl9udW1iZXJ9L2NvbW1lbnRzIiwKLSAgICAgICAgcGF5bG9hZAotICAgICAgKQorICAgICAgaWYgZXhpc3RpbmdfY29tbWVudAorICAgICAgICB1cGRhdGVfaW5saW5lX2NvbW1lbnQoaWQ6IGV4aXN0aW5nX2NvbW1lbnQuaWQsIGJvZHk6IGJvZHkpCisgICAgICBlbHNlCisgICAgICAgIGRpZmZfbGluZV9pbmZvID0gZmluZF9kaWZmX2xpbmVfbnVtYmVycyhkaWZmLCBmaWxlX3BhdGgsIHN0YXJ0X2xpbmUsIGVuZF9saW5lKQorICAgICAgICBwYXlsb2FkID0gYnVpbGRfY29tbWVudF9wYXlsb2FkKGJvZHksIGNvbW1pdF9pZCwgZmlsZV9wYXRoLCBkaWZmX2xpbmVfaW5mbywgc3RhcnRfbGluZSwgZW5kX2xpbmUpCisgICAgICAgIGNyZWF0ZV9jb21tZW50X3dpdGhfZXJyb3JfaGFuZGxpbmcocGF5bG9hZCkKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgZGVmIGRlbGV0ZV9jb3ZlcmFnZV9jb21tZW50c19mb3JfZmlsZShmaWxlX3BhdGgpCisgICAgICBjb3ZlcmFnZV9jb21tZW50cyA9IGlubGluZV9jb21tZW50cy5zZWxlY3QgZG8gfGNvbW1lbnR8CisgICAgICAgIGNvbW1lbnQuYm9keSYuaW5jbHVkZT8oIjwhLS0gY292ZXJhZ2UtaW5saW5lLW1hcmtlciAtLT4iKSAmJgorICAgICAgICAgIGNvbW1lbnQucGF0aCA9PSBmaWxlX3BhdGgKKyAgICAgIGVuZAorCisgICAgICBjb3ZlcmFnZV9jb21tZW50cy5lYWNoIHsgfGNvbW1lbnR8IGRlbGV0ZV9pbmxpbmVfY29tbWVudChjb21tZW50LmlkKSB9CisgICAgZW5kCisKKyAgICBkZWYgZmluZF9leGlzdGluZ19pbmxpbmVfY29tbWVudChmaWxlX3BhdGgsIHN0YXJ0X2xpbmUsIGVuZF9saW5lKQorICAgICAgaW5saW5lX2NvbW1lbnRzLmZpbmQgZG8gfGNvbW1lbnR8CisgICAgICAgIGNvdmVyYWdlX2NvbW1lbnRfZm9yX2ZpbGU/KGNvbW1lbnQsIGZpbGVfcGF0aCkgJiYKKyAgICAgICAgICBjb21tZW50X21hdGNoZXNfbGluZV9yYW5nZT8oY29tbWVudCwgc3RhcnRfbGluZSwgZW5kX2xpbmUpCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGRlZiBkaWZmCisgICAgICBAZGlmZiB8fD0gY2xpZW50LnB1bGxfcmVxdWVzdChyZXBvLCBwcl9udW1iZXIsIGFjY2VwdDogImFwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMuZGlmZiIpCiAgICAgZW5kCiAKICAgICBwcml2YXRlCiAKICAgICBhdHRyX3JlYWRlciA6Y2xpZW50LCA6cmVwbywgOnByX251bWJlcgorCisgICAgZGVmIGxvZ2dlcgorICAgICAgQ292ZXJhZ2VSZXBvcnRlci5sb2dnZXIKKyAgICBlbmQKKworICAgIGRlZiBub3JtYWxpemVfcmVwbyhyZXBvKQorICAgICAgcmV0dXJuIHJlcG8gaWYgcmVwby5pbmNsdWRlPygiLyIpICYmICFyZXBvLmluY2x1ZGU/KCI6Ly8iKQorICAgICAgcmV0dXJuIGV4dHJhY3RfZ2l0aHViX3JlcG8ocmVwbykgaWYgcmVwby5pbmNsdWRlPygiZ2l0aHViLmNvbSIpCisKKyAgICAgIHJhaXNlIEFyZ3VtZW50RXJyb3IsICJSZXBvc2l0b3J5IG11c3QgYmUgaW4gZm9ybWF0ICdvd25lci9yZXBvJyBvciBhIGZ1bGwgR2l0SHViIFVSTCIKKyAgICBlbmQKKworICAgIGRlZiBidWlsZF9jb21tZW50X3BheWxvYWQoYm9keSwgY29tbWl0X2lkLCBmaWxlX3BhdGgsIF9kaWZmX2xpbmVfaW5mbywgc3RhcnRfbGluZSwgZW5kX2xpbmUpCisgICAgICBhY3R1YWxfZmlsZV9wYXRoID0gZmluZF9hY3R1YWxfZmlsZV9wYXRoX2luX2RpZmYoZGlmZiwgZmlsZV9wYXRoKQorICAgICAgcGF5bG9hZCA9IHsKKyAgICAgICAgYm9keTogICAgICBib2R5LAorICAgICAgICBjb21taXRfaWQ6IGNvbW1pdF9pZCwKKyAgICAgICAgcGF0aDogICAgICBhY3R1YWxfZmlsZV9wYXRoLAorICAgICAgICBzaWRlOiAgICAgICJSSUdIVCIKKyAgICAgIH0KKworICAgICAgaWYgZW5kX2xpbmUgPiBzdGFydF9saW5lICYmIHN0YXJ0X2xpbmUKKyAgICAgICAgcGF5bG9hZFs6bGluZV0gPSBlbmRfbGluZQorICAgICAgICBwYXlsb2FkWzpzdGFydF9saW5lXSA9IHN0YXJ0X2xpbmUKKyAgICAgIGVsc2lmIGVuZF9saW5lID09IHN0YXJ0X2xpbmUKKyAgICAgICAgcGF5bG9hZFs6bGluZV0gPSBlbmRfbGluZQorICAgICAgZW5kCisKKyAgICAgIHBheWxvYWQKKyAgICBlbmQKKworICAgIGRlZiBjcmVhdGVfY29tbWVudF93aXRoX2Vycm9yX2hhbmRsaW5nKHBheWxvYWQpCisgICAgICBjbGllbnQucG9zdCgiL3JlcG9zLyN7cmVwb30vcHVsbHMvI3twcl9udW1iZXJ9L2NvbW1lbnRzIiwgcGF5bG9hZCkKKyAgICByZXNjdWUgT2N0b2tpdDo6RXJyb3IgPT4gZQorICAgICAgaGFuZGxlX2dpdGh1Yl9hcGlfZXJyb3IoZSwgcGF5bG9hZCkKKyAgICBlbmQKKworICAgIGRlZiBoYW5kbGVfZ2l0aHViX2FwaV9lcnJvcihlcnJvciwgcGF5bG9hZCkKKyAgICAgIGxvZ2dlci5lcnJvcigiR2l0SHViIEFQSSBFcnJvcjogI3tlcnJvci5tZXNzYWdlfSIpCisgICAgICBsb2dnZXIuZXJyb3IoIlBheWxvYWQ6ICN7cGF5bG9hZC5pbnNwZWN0fSIpCisgICAgICByYWlzZQorICAgIGVuZAorCisgICAgZGVmIGNvdmVyYWdlX2NvbW1lbnRfZm9yX2ZpbGU/KGNvbW1lbnQsIGZpbGVfcGF0aCkKKyAgICAgIGNvbW1lbnQuYm9keSYuaW5jbHVkZT8oIjwhLS0gY292ZXJhZ2UtaW5saW5lLW1hcmtlciAtLT4iKSAmJgorICAgICAgICBjb21tZW50LnBhdGggPT0gZmlsZV9wYXRoCisgICAgZW5kCisKKyAgICBkZWYgY29tbWVudF9tYXRjaGVzX2xpbmVfcmFuZ2U/KGNvbW1lbnQsIHN0YXJ0X2xpbmUsIGVuZF9saW5lKQorICAgICAgaWYgZW5kX2xpbmUgPiBzdGFydF9saW5lCisgICAgICAgIGNvbW1lbnQubGluZSA9PSBlbmRfbGluZSAmJiBjb21tZW50LnN0YXJ0X2xpbmUgPT0gc3RhcnRfbGluZQorICAgICAgZWxzZQorICAgICAgICBjb21tZW50LmxpbmUgPT0gc3RhcnRfbGluZSAmJiAoY29tbWVudC5zdGFydF9saW5lLm5pbD8gfHwgY29tbWVudC5zdGFydF9saW5lID09IHN0YXJ0X2xpbmUpCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGRlZiBleHRyYWN0X2dpdGh1Yl9yZXBvKHJlcG8pCisgICAgICBtYXRjaCA9IHJlcG8ubWF0Y2goJXJ7Z2l0aHViXC5jb21bOi9dKFteL10rL1teL10rPykoPzpcLmdpdCk/Lz8kfSkKKyAgICAgIG1hdGNoWzFdIGlmIG1hdGNoCisgICAgZW5kCisKKyAgICBkZWYgZmluZF9hY3R1YWxfZmlsZV9wYXRoX2luX2RpZmYoZGlmZl90ZXh0LCBmaWxlX3BhdGgpCisgICAgICByZXR1cm4gZmlsZV9wYXRoIGlmIGRpZmZfdGV4dC5uaWw/IHx8IGRpZmZfdGV4dC5lbXB0eT8KKworICAgICAgIyBUcnkgZXhhY3QgbWF0Y2ggZmlyc3QKKyAgICAgIHJldHVybiBmaWxlX3BhdGggaWYgZGlmZl90ZXh0LmluY2x1ZGU/KCJkaWZmIC0tZ2l0IGEvI3tmaWxlX3BhdGh9IikKKworICAgICAgIyBUcnkgYmFzZW5hbWUgbWF0Y2gKKyAgICAgIGJhc2VuYW1lID0gRmlsZS5iYXNlbmFtZShmaWxlX3BhdGgpCisgICAgICBkaWZmX3RleHQuc2NhbiglcntkaWZmIC0tZ2l0IGEvKFteXHNdKyl9KSBkbyB8bWF0Y2h8CisgICAgICAgIHJldHVybiBtYXRjaFswXSBpZiBGaWxlLmJhc2VuYW1lKG1hdGNoWzBdKSA9PSBiYXNlbmFtZQorICAgICAgZW5kCisKKyAgICAgIGZpbGVfcGF0aAorICAgIGVuZAorCisgICAgZGVmIGZpbmRfZGlmZl9saW5lX251bWJlcnMoZGlmZl90ZXh0LCBmaWxlX3BhdGgsIHN0YXJ0X2xpbmUsIGVuZF9saW5lKQorICAgICAgZmluZF9hY3R1YWxfZmlsZV9wYXRoX2luX2RpZmYoZGlmZl90ZXh0LCBmaWxlX3BhdGgpCisKKyAgICAgICMgRm9yIG5vdywgcmV0dXJuIGJhc2ljIHN0cnVjdHVyZSAtIHRoaXMgY291bGQgYmUgZW5oYW5jZWQgdG8gcGFyc2UgYWN0dWFsIGRpZmYKKyAgICAgICMgYW5kIGRldGVybWluZSB0aGUgY29ycmVjdCBzaWRlIGFuZCBsaW5lIG51bWJlcnMKKyAgICAgIHJlc3VsdCA9IHsKKyAgICAgICAgc2lkZTogICAgICAgIlJJR0hUIiwKKyAgICAgICAgc3RhcnRfc2lkZTogIlJJR0hUIgorICAgICAgfQorCisgICAgICByZXN1bHRbOmxpbmVdID0gZW5kX2xpbmUKKyAgICAgIHJlc3VsdFs6c3RhcnRfbGluZV0gPSBzdGFydF9saW5lIGlmIGVuZF9saW5lID4gc3RhcnRfbGluZQorCisgICAgICByZXN1bHQKKyAgICBlbmQKICAgZW5kCiBlbmQKZGlmZiAtLWdpdCBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9ydW5uZXIucmIgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvcnVubmVyLnJiCmluZGV4IDMyYWJkZDguLmJiZTM1ZGQgMTAwNjQ0Ci0tLSBhL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci9ydW5uZXIucmIKKysrIGIvbGliL2NvdmVyYWdlX3JlcG9ydGVyL3J1bm5lci5yYgpAQCAtMywyNyArMywzMCBAQAogbW9kdWxlIENvdmVyYWdlUmVwb3J0ZXIKICAgY2xhc3MgUnVubmVyCiAgICAgZGVmIGluaXRpYWxpemUob3B0aW9ucykKLSAgICAgIEBjb21taXRfc2hhICAgID0gb3B0aW9uc1s6Y29tbWl0X3NoYV0KLSAgICAgIEBjb3ZlcmFnZV9wYXRoID0gb3B0aW9uc1s6Y292ZXJhZ2VfcGF0aF0KLSAgICAgIEBnaXRodWJfdG9rZW4gID0gb3B0aW9uc1s6Z2l0aHViX3Rva2VuXQotICAgICAgQGJ1aWxkX3VybCAgICAgPSBvcHRpb25zWzpidWlsZF91cmxdCi0gICAgICBAYmFzZV9yZWYgICAgICA9IG9wdGlvbnNbOmJhc2VfcmVmXQotICAgICAgQHJlcG8gICAgICAgICAgPSBvcHRpb25zWzpyZXBvXQotICAgICAgQHByX251bWJlciAgICAgPSBvcHRpb25zWzpwcl9udW1iZXJdCisgICAgICBAY29tbWl0X3NoYSAgICAgICAgICAgPSBvcHRpb25zWzpjb21taXRfc2hhXQorICAgICAgQGNvdmVyYWdlX3JlcG9ydF9wYXRoID0gb3B0aW9uc1s6Y292ZXJhZ2VfcmVwb3J0X3BhdGhdCisgICAgICBAZ2l0aHViX3Rva2VuICAgICAgICAgPSBvcHRpb25zWzpnaXRodWJfdG9rZW5dCisgICAgICBAYnVpbGRfdXJsICAgICAgICAgICAgPSBvcHRpb25zWzpidWlsZF91cmxdCisgICAgICBAcmVwbyAgICAgICAgICAgICAgICAgPSBvcHRpb25zWzpyZXBvXQorICAgICAgQHByX251bWJlciAgICAgICAgICAgID0gb3B0aW9uc1s6cHJfbnVtYmVyXQogICAgIGVuZAogCisgICAgIyBydWJvY29wOmRpc2FibGUgTWV0cmljcy9BYmNTaXplCiAgICAgZGVmIHJ1bgotICAgICAgY292ZXJhZ2UgPSBDb3ZlcmFnZVBhcnNlci5uZXcoY292ZXJhZ2VfcGF0aCkuY2FsbAotICAgICAgZGlmZiAgICAgPSBEaWZmUGFyc2VyLm5ldyhiYXNlX3JlZikuY2FsbAotCi0gICAgICBhbmFseXNpcyA9IENvdmVyYWdlQW5hbHlzZXIubmV3KGNvdmVyYWdlOiwgZGlmZjopLmNhbGwKICAgICAgIHB1bGxfcmVxdWVzdCA9IFB1bGxSZXF1ZXN0Lm5ldyhnaXRodWJfdG9rZW46LCByZXBvOiwgcHJfbnVtYmVyOikKLQotICAgICAgQ29tbWVudFBvc3Rlci5uZXcocHVsbF9yZXF1ZXN0OiwgYW5hbHlzaXM6LCBjb21taXRfc2hhOikuY2FsbAorICAgICAgY292ZXJhZ2VfcmVwb3J0ID0gQ292ZXJhZ2VSZXBvcnRMb2FkZXIubmV3KGNvdmVyYWdlX3JlcG9ydF9wYXRoKS5jYWxsCisgICAgICBtb2RpZmllZF9yYW5nZXMgPSBNb2RpZmllZFJhbmdlc0V4dHJhY3Rvci5uZXcocHVsbF9yZXF1ZXN0LmRpZmYpLmNhbGwKKyAgICAgIHVuY292ZXJlZF9yYW5nZXMgPSBVbmNvdmVyZWRSYW5nZXNFeHRyYWN0b3IubmV3KGNvdmVyYWdlX3JlcG9ydCkuY2FsbAorICAgICAgaW50ZXJzZWN0aW9uID0gTW9kaWZpZWRVbmNvdmVyZWRJbnRlcnNlY3Rpb24ubmV3KHVuY292ZXJlZF9yYW5nZXM6LCBtb2RpZmllZF9yYW5nZXM6KS5jYWxsCisgICAgICBpbmxpbmVfY29tbWVudHMgPSBJbmxpbmVDb21tZW50RmFjdG9yeS5uZXcoaW50ZXJzZWN0aW9uOiwgY29tbWl0X3NoYTopLmNhbGwKKyAgICAgIElubGluZUNvbW1lbnRQb3N0ZXIubmV3KHB1bGxfcmVxdWVzdDosIGNvbW1pdF9zaGE6LCBpbmxpbmVfY29tbWVudHM6KS5jYWxsCisgICAgICBnbG9iYWxfY29tbWVudCA9IEdsb2JhbENvbW1lbnRGYWN0b3J5Lm5ldyhjb21taXRfc2hhOikuY2FsbAorICAgICAgR2xvYmFsQ29tbWVudFBvc3Rlci5uZXcocHVsbF9yZXF1ZXN0OiwgZ2xvYmFsX2NvbW1lbnQ6KS5jYWxsCiAgICAgZW5kCisgICAgIyBydWJvY29wOmVuYWJsZSBNZXRyaWNzL0FiY1NpemUKIAogICAgIHByaXZhdGUKIAotICAgIGF0dHJfcmVhZGVyIDpjb3ZlcmFnZV9wYXRoLCA6Z2l0aHViX3Rva2VuLCA6YnVpbGRfdXJsLCA6YmFzZV9yZWYsIDpyZXBvLCA6cHJfbnVtYmVyLCA6Y29tbWl0X3NoYQorICAgIGF0dHJfcmVhZGVyIDpjb3ZlcmFnZV9yZXBvcnRfcGF0aCwgOmdpdGh1Yl90b2tlbiwgOmJ1aWxkX3VybCwgOnJlcG8sIDpwcl9udW1iZXIsIDpjb21taXRfc2hhCiAgIGVuZAogZW5kCmRpZmYgLS1naXQgYS9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvdW5jb3ZlcmVkX3Jhbmdlc19leHRyYWN0b3IucmIgYi9saWIvY292ZXJhZ2VfcmVwb3J0ZXIvdW5jb3ZlcmVkX3Jhbmdlc19leHRyYWN0b3IucmIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMzU0YTgxMgotLS0gL2Rldi9udWxsCisrKyBiL2xpYi9jb3ZlcmFnZV9yZXBvcnRlci91bmNvdmVyZWRfcmFuZ2VzX2V4dHJhY3Rvci5yYgpAQCAtMCwwICsxLDg0IEBACisjIGZyb3plbl9zdHJpbmdfbGl0ZXJhbDogdHJ1ZQorCityZXF1aXJlICJqc29uIgorCittb2R1bGUgQ292ZXJhZ2VSZXBvcnRlcgorICBjbGFzcyBVbmNvdmVyZWRSYW5nZXNFeHRyYWN0b3IKKyAgICBkZWYgaW5pdGlhbGl6ZShjb3ZlcmFnZV9yZXBvcnQpCisgICAgICBAY292ZXJhZ2VfcmVwb3J0ID0gY292ZXJhZ2VfcmVwb3J0CisgICAgZW5kCisKKyAgICBkZWYgY2FsbAorICAgICAgY292ZXJhZ2VfbWFwID0gSGFzaC5uZXcgeyB8aCwga3wgaFtrXSA9IFtdIH0KKworICAgICAgcmV0dXJuIGNvdmVyYWdlX21hcCB1bmxlc3MgY292ZXJhZ2UKKworICAgICAgY292ZXJhZ2UuZWFjaCBkbyB8ZmlsZW5hbWUsIGRhdGF8CisgICAgICAgIG5vcm1hbGl6ZWRfZmlsZW5hbWUgPSBub3JtYWxpemVfZmlsZW5hbWUoZmlsZW5hbWUpCisgICAgICAgIHVuY292ZXJlZF9yYW5nZXMgPSBleHRyYWN0X3VuY292ZXJlZF9yYW5nZXMoZGF0YVsibGluZXMiXSkKKyAgICAgICAgY292ZXJhZ2VfbWFwW25vcm1hbGl6ZWRfZmlsZW5hbWVdID0gdW5jb3ZlcmVkX3JhbmdlcworICAgICAgZW5kCisKKyAgICAgIGNvdmVyYWdlX21hcAorICAgIGVuZAorCisgICAgcHJpdmF0ZQorCisgICAgZGVmIGNvdmVyYWdlCisgICAgICByZXR1cm4gbmlsIHVubGVzcyBAY292ZXJhZ2VfcmVwb3J0LmlzX2E/KEhhc2gpCisKKyAgICAgIEBjb3ZlcmFnZV9yZXBvcnRbImNvdmVyYWdlIl0KKyAgICBlbmQKKworICAgIGRlZiBleHRyYWN0X3VuY292ZXJlZF9yYW5nZXMobGluZXMpCisgICAgICByZXR1cm4gW10gdW5sZXNzIGxpbmVzLmlzX2E/KEFycmF5KQorCisgICAgICB1bmNvdmVyZWRfbGluZXMgPSBbXQorICAgICAgbGluZXMuZWFjaF93aXRoX2luZGV4IGRvIHxjb3VudCwgaWR4fAorICAgICAgICAjIE9ubHkgbGluZXMgd2l0aCAwIGNvdW50IGFyZSBjb25zaWRlcmVkIHVuY292ZXJlZAorICAgICAgICAjIG51bGwgdmFsdWVzIGFyZSBub3QgcmVsZXZhbnQgZm9yIGNvdmVyYWdlCisgICAgICAgIHVuY292ZXJlZF9saW5lcyA8PCAoaWR4ICsgMSkgaWYgY291bnQgPT0gMAorICAgICAgZW5kCisgICAgICBjb252ZXJ0X3RvX3Jhbmdlcyh1bmNvdmVyZWRfbGluZXMpCisgICAgZW5kCisKKyAgICBkZWYgY29udmVydF90b19yYW5nZXMobGluZXMpCisgICAgICByZXR1cm4gW10gaWYgbGluZXMuZW1wdHk/CisKKyAgICAgIHJhbmdlcyA9IFtdCisgICAgICBzdGFydF9saW5lID0gbGluZXMuZmlyc3QKKyAgICAgIGVuZF9saW5lID0gbGluZXMuZmlyc3QKKworICAgICAgbGluZXMuZWFjaF9jb25zKDIpIGRvIHxjdXJyZW50LCBuZXh0X2xpbmV8CisgICAgICAgIGlmIG5leHRfbGluZSA9PSBjdXJyZW50ICsgMQorICAgICAgICAgICMgQ29uc2VjdXRpdmUgbGluZXMsIGV4dGVuZCB0aGUgcmFuZ2UKKyAgICAgICAgICBlbmRfbGluZSA9IG5leHRfbGluZQorICAgICAgICBlbHNlCisgICAgICAgICAgIyBHYXAgZm91bmQsIGNsb3NlIGN1cnJlbnQgcmFuZ2UgYW5kIHN0YXJ0IG5ldyBvbmUKKyAgICAgICAgICByYW5nZXMgPDwgW3N0YXJ0X2xpbmUsIGVuZF9saW5lXQorICAgICAgICAgIHN0YXJ0X2xpbmUgPSBuZXh0X2xpbmUKKyAgICAgICAgICBlbmRfbGluZSA9IG5leHRfbGluZQorICAgICAgICBlbmQKKyAgICAgIGVuZAorCisgICAgICAjIEFkZCB0aGUgbGFzdCByYW5nZQorICAgICAgcmFuZ2VzIDw8IFtzdGFydF9saW5lLCBlbmRfbGluZV0KKyAgICAgIHJhbmdlcworICAgIGVuZAorCisgICAgZGVmIG5vcm1hbGl6ZV9maWxlbmFtZShmaWxlX3BhdGgpCisgICAgICByZXR1cm4gbmlsIGlmIGZpbGVfcGF0aC5uaWw/IHx8IGZpbGVfcGF0aC5lbXB0eT8KKworICAgICAgIyBVc2UgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBhcyBwcm9qZWN0IHJvb3QKKyAgICAgIHByb2plY3Rfcm9vdCA9IERpci5wd2QKKworICAgICAgIyBJZiB0aGUgZmlsZSBwYXRoIHN0YXJ0cyB3aXRoIHRoZSBwcm9qZWN0IHJvb3QsIHJlbW92ZSB0aGF0IHByZWZpeAorICAgICAgaWYgZmlsZV9wYXRoLnN0YXJ0X3dpdGg/KHByb2plY3Rfcm9vdCkKKyAgICAgICAgZmlsZV9wYXRoLmRlbGV0ZV9wcmVmaXgocHJvamVjdF9yb290KS5kZWxldGVfcHJlZml4KCIvIikKKyAgICAgIGVsc2UKKyAgICAgICAgIyBJZiBpdCBkb2Vzbid0IHN0YXJ0IHdpdGggcHJvamVjdCByb290LCByZXR1cm4gYXMtaXMgKGFzc3VtaW5nIGl0J3MgYWxyZWFkeSByZWxhdGl2ZSkKKyAgICAgICAgZmlsZV9wYXRoCisgICAgICBlbmQKKyAgICBlbmQKKyAgZW5kCitlbmQKZGlmZiAtLWdpdCBhL2xpYi90YXNrcy9jb3ZlcmFnZS5yYWtlIGIvbGliL3Rhc2tzL2NvdmVyYWdlLnJha2UKaW5kZXggZjA3ZmE1MC4uNTA4OTdmZCAxMDA2NDQKLS0tIGEvbGliL3Rhc2tzL2NvdmVyYWdlLnJha2UKKysrIGIvbGliL3Rhc2tzL2NvdmVyYWdlLnJha2UKQEAgLTIsMTQgKzIsMTQgQEAKIAogbmFtZXNwYWNlIDpjb3ZlcmFnZSBkbwogICBkZXNjICJNZXJnZSBjb3ZlcmFnZSByZXBvcnRzIGFuZCB1cGxvYWQgYXJ0aWZhY3RzIgotICB0YXNrIDptZXJnZSBkbworICB0YXNrIDpjb2xsYXRlIGRvCiAgICAgcmVxdWlyZSAic2ltcGxlY292IgogICAgIHJlcXVpcmUgInNpbXBsZWNvdl9qc29uX2Zvcm1hdHRlciIKIAogICAgICMgQ29sbGF0ZSBKU09OIGNvdmVyYWdlIHJlcG9ydHMgYW5kIGdlbmVyYXRlIGJvdGggSFRNTCBhbmQgSlNPTiBvdXRwdXRzCiAgICAgZmlsZXMgPSBEaXJbImNvdmVyYWdlL3Jlc3VsdHNldC0qLmpzb24iXQogICAgIGFib3J0ICJObyBjb3ZlcmFnZSBKU09OIGZpbGVzIGZvdW5kIHRvIGNvbGxhdGUiIGlmIGZpbGVzLmVtcHR5PwotICAgIHB1dHMgIkNvbGxhdGluZyBjb3ZlcmFnZSBmaWxlczogI3tmaWxlcy5qb2luKCcsICcpfSIKKyAgICBwdXRzICJDb2xsYXRlIGNvdmVyYWdlIGZpbGVzOiAje2ZpbGVzLmpvaW4oJywgJyl9IgogICAgIFNpbXBsZUNvdi5jb2xsYXRlKGZpbGVzKSBkbwogICAgICAgZm9ybWF0dGVyIFNpbXBsZUNvdjo6Rm9ybWF0dGVyOjpNdWx0aUZvcm1hdHRlci5uZXcoCiAgICAgICAgIFsKQEAgLTIxLDIxICsyMSw0IEBAIG5hbWVzcGFjZSA6Y292ZXJhZ2UgZG8KIAogICAgIHB1dHMgIuKchSBDb3ZlcmFnZSBtZXJnZWQgYW5kIHJlcG9ydCBnZW5lcmF0ZWQuIgogICBlbmQKLQotICBkZXNjICJSZXBvcnQgY292ZXJhZ2UgdG8gR2l0SHViIgotICB0YXNrIDpyZXBvcnQgZG8KLSAgICByZXF1aXJlICJjb3ZlcmFnZV9yZXBvcnRlciIKLSAgICBvcHRpb25zID0gewotICAgICAgY292ZXJhZ2VfcGF0aDogImNvdmVyYWdlL2NvdmVyYWdlLmpzb24iLAotICAgICAgaHRtbF9yb290OiAgICAgImNvdmVyYWdlIiwKLSAgICAgIGdpdGh1Yl90b2tlbjogIEVOVi5mZXRjaCgiR0lUSFVCX1RPS0VOIiwgbmlsKSwKLSAgICAgIGJ1aWxkX3VybDogICAgIEVOVi5mZXRjaCgiQlVJTERLSVRFX0JVSUxEX1VSTCIsIG5pbCksCi0gICAgICBiYXNlX3JlZjogICAgICBFTlYuZmV0Y2goIkJVSUxES0lURV9CQVNFX1JFRiIsIG5pbCksCi0gICAgICBjb21taXRfc2hhOiAgICBFTlYuZmV0Y2goIkJVSUxES0lURV9DT01NSVRfU0hBIiwgbmlsKSwKLSAgICAgIHJlcG86ICAgICAgICAgIEVOVi5mZXRjaCgiQlVJTERLSVRFX1JFUE8iLCBuaWwpLAotICAgICAgcHJfbnVtYmVyOiAgICAgRU5WLmZldGNoKCJCVUlMREtJVEVfUFVMTF9SRVFVRVNUX05VTUJFUiIsIG5pbCkKLSAgICB9Ci0KLSAgICBDb3ZlcmFnZVJlcG9ydGVyOjpSdW5uZXIubmV3KG9wdGlvbnMpLnJ1bgotICBlbmQKIGVuZApkaWZmIC0tZ2l0IGEvc2NyaXB0cy9SRUFETUUubWQgYi9zY3JpcHRzL1JFQURNRS5tZApuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi43ZWExMGQwCi0tLSAvZGV2L251bGwKKysrIGIvc2NyaXB0cy9SRUFETUUubWQKQEAgLTAsMCArMSwxNTIgQEAKKyMgRml4dHVyZSBDYXB0dXJlIFNjcmlwdHMKKworVGhpcyBkaXJlY3RvcnkgY29udGFpbnMgc2NyaXB0cyB0byBoZWxwIHlvdSBjYXB0dXJlIHJlYWwgSFRUUCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzIGZyb20gcnVubmluZyB0aGUgY292ZXJhZ2UtcmVwb3J0ZXIgYWdhaW5zdCBhY3R1YWwgR2l0SHViIHB1bGwgcmVxdWVzdHMuIFRoZXNlIGNhcHR1cmVkIGludGVyYWN0aW9ucyBjYW4gdGhlbiBiZSB1c2VkIGFzIHRlc3QgZml4dHVyZXMuCisKKyMjIFByZXJlcXVpc2l0ZXMKKworMS4gSW5zdGFsbCB0aGUgcmVxdWlyZWQgZ2VtczoKKyAgIGBgYGJhc2gKKyAgIGJ1bmRsZSBpbnN0YWxsCisgICBgYGAKKworMi4gU2V0IHVwIHlvdXIgZW52aXJvbm1lbnQgdmFyaWFibGVzOgorICAgYGBgYmFzaAorICAgZXhwb3J0IEdJVEhVQl9UT0tFTj0ieW91cl9naXRodWJfdG9rZW5faGVyZSIKKyAgIGV4cG9ydCBSRVBPPSJvd25lci9yZXBvc2l0b3J5IgorICAgZXhwb3J0IFBSX05VTUJFUj0iMTIzIgorICAgZXhwb3J0IENPTU1JVF9TSEE9ImFiYzEyM2RlZjQ1NiIKKyAgIGV4cG9ydCBDT1ZFUkFHRV9SRVBPUlRfUEFUSD0iY292ZXJhZ2UvY292ZXJhZ2UuanNvbiIKKyAgIGV4cG9ydCBCVUlMRF9VUkw9Imh0dHBzOi8vY2kuZXhhbXBsZS5jb20vYnVpbGQvMTIzIgorICAgYGBgCisKKyMjIEF2YWlsYWJsZSBTY3JpcHRzCisKKyMjIyAxLiBWQ1IgQ2Fzc2V0dGUgQ2FwdHVyZSAoYGNhcHR1cmVfZml4dHVyZXMucmJgKQorCitUaGlzIHNjcmlwdCB1c2VzIFZDUiB0byByZWNvcmQgSFRUUCBpbnRlcmFjdGlvbnMgaW4gYSBmb3JtYXQgdGhhdCBjYW4gYmUgcmVwbGF5ZWQgaW4gdGVzdHMuCisKKyoqVXNhZ2U6KioKK2BgYGJhc2gKKy4vc2NyaXB0cy9jYXB0dXJlX2ZpeHR1cmVzLnJiCitgYGAKKworKipXaGF0IGl0IGRvZXM6KioKKy0gUmVjb3JkcyBhbGwgSFRUUCByZXF1ZXN0cy9yZXNwb25zZXMgdXNpbmcgVkNSCistIFNhdmVzIHRoZW0gYXMgWUFNTCBjYXNzZXR0ZXMgaW4gYHNwZWMvZml4dHVyZXMvdmNyX2Nhc3NldHRlcy9gCistIENhbiBiZSByZXBsYXllZCBpbiB0ZXN0cyB1c2luZyBWQ1IKKworKipPdXRwdXQ6KioKKy0gQ3JlYXRlcyBgc3BlYy9maXh0dXJlcy92Y3JfY2Fzc2V0dGVzL3JlYWxfcHJfMTIzLnltbGAKKworIyMjIDIuIFJhdyBSZXF1ZXN0IENhcHR1cmUgKGBjYXB0dXJlX3Jhd19yZXF1ZXN0cy5yYmApCisKK1RoaXMgc2NyaXB0IGNhcHR1cmVzIHJhdyBIVFRQIHJlcXVlc3RzIGFuZCByZXNwb25zZXMgaW4gSlNPTiBmb3JtYXQgZm9yIGRldGFpbGVkIGFuYWx5c2lzLgorCisqKlVzYWdlOioqCitgYGBiYXNoCisuL3NjcmlwdHMvY2FwdHVyZV9yYXdfcmVxdWVzdHMucmIKK2BgYAorCisqKldoYXQgaXQgZG9lczoqKgorLSBJbnRlcmNlcHRzIEhUVFAgcmVxdWVzdHMgYXQgdGhlIE9jdG9raXQgbGV2ZWwKKy0gQ2FwdHVyZXMgcmVxdWVzdCBtZXRob2QsIFVSSSwgaGVhZGVycywgYW5kIGJvZHkKKy0gQ2FwdHVyZXMgcmVzcG9uc2Ugc3RhdHVzLCBoZWFkZXJzLCBhbmQgYm9keQorLSBTYXZlcyBldmVyeXRoaW5nIGFzIHByZXR0eS1wcmludGVkIEpTT04KKworKipPdXRwdXQ6KioKKy0gQ3JlYXRlcyBgc3BlYy9maXh0dXJlcy9yYXdfcmVxdWVzdHMvcHJfMTIzXzIwMjQwMTAxXzEyMDAwMC5qc29uYAorCisjIyMgMy4gTG9nZ2luZyBTY3JpcHQgKGBydW5fd2l0aF9sb2dnaW5nLnJiYCkKKworVGhpcyBzY3JpcHQgcnVucyB0aGUgbm9ybWFsIENMSSBidXQgd2l0aCBkZXRhaWxlZCBIVFRQIHJlcXVlc3QvcmVzcG9uc2UgbG9nZ2luZy4KKworKipVc2FnZToqKgorYGBgYmFzaAorLi9zY3JpcHRzL3J1bl93aXRoX2xvZ2dpbmcucmIgLS1naXRodWItdG9rZW4gJEdJVEhVQl9UT0tFTiAtLXJlcG8gJFJFUE8gLS1wci1udW1iZXIgJFBSX05VTUJFUgorYGBgCisKKyoqV2hhdCBpdCBkb2VzOioqCistIFJ1bnMgdGhlIG5vcm1hbCBjb3ZlcmFnZS1yZXBvcnRlciB3b3JrZmxvdworLSBMb2dzIGFsbCBIVFRQIHJlcXVlc3RzIGFuZCByZXNwb25zZXMgdG8gc3Rkb3V0CistIFVzZWZ1bCBmb3IgZGVidWdnaW5nIGFuZCB1bmRlcnN0YW5kaW5nIHRoZSBBUEkgY2FsbHMKKworIyMgVXNpbmcgQ2FwdHVyZWQgRml4dHVyZXMgaW4gVGVzdHMKKworIyMjIFdpdGggVkNSIENhc3NldHRlcworCitgYGBydWJ5CisjIEluIHlvdXIgc3BlYyBmaWxlCitSU3BlYy5kZXNjcmliZSAiQ292ZXJhZ2VSZXBvcnRlciBJbnRlZ3JhdGlvbiIgZG8KKyAgaXQgInByb2Nlc3NlcyBhIHJlYWwgUFIiLCA6dmNyIGRvCisgICAgIyBWQ1Igd2lsbCBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgY2Fzc2V0dGUKKyAgICBvcHRpb25zID0geworICAgICAgZ2l0aHViX3Rva2VuOiAiZmFrZV90b2tlbiIsCisgICAgICByZXBvOiAidGVzdC9yZXBvIiwKKyAgICAgIHByX251bWJlcjogIjEyMyIsCisgICAgICAjIC4uLiBvdGhlciBvcHRpb25zCisgICAgfQorICAgIAorICAgIGV4cGVjdCB7IENvdmVyYWdlUmVwb3J0ZXI6OlJ1bm5lci5uZXcob3B0aW9ucykucnVuIH0ubm90X3RvIHJhaXNlX2Vycm9yCisgIGVuZAorZW5kCitgYGAKKworIyMjIFdpdGggUmF3IEpTT04gRml4dHVyZXMKKworYGBgcnVieQorIyBMb2FkIGFuZCBwYXJzZSByYXcgcmVxdWVzdCBkYXRhCitkZWYgbG9hZF9maXh0dXJlKGZpbGVuYW1lKQorICBKU09OLnBhcnNlKEZpbGUucmVhZCgic3BlYy9maXh0dXJlcy9yYXdfcmVxdWVzdHMvI3tmaWxlbmFtZX0iKSkKK2VuZAorCisjIFVzZSBpbiB0ZXN0cworaXQgIm1hdGNoZXMgZXhwZWN0ZWQgQVBJIGNhbGxzIiBkbworICBmaXh0dXJlID0gbG9hZF9maXh0dXJlKCJwcl8xMjNfMjAyNDAxMDFfMTIwMDAwLmpzb24iKQorICAKKyAgZXhwZWN0KGZpeHR1cmVbInJlcXVlc3RzIl0pLnRvIGluY2x1ZGUoCisgICAgaGFzaF9pbmNsdWRpbmcoIm1ldGhvZCIgPT4gIkdFVCIsICJ1cmkiID0+IC9cL3JlcG9zXC8uKlwvcHVsbHNcLzEyMy8pCisgICkKK2VuZAorYGBgCisKKyMjIEJlc3QgUHJhY3RpY2VzCisKKzEuICoqVXNlIGEgdGVzdCByZXBvc2l0b3J5Kio6IENyZWF0ZSBhIHRlc3QgcmVwb3NpdG9yeSB3aXRoIGEgUFIgc3BlY2lmaWNhbGx5IGZvciBjYXB0dXJpbmcgZml4dHVyZXMKKzIuICoqQ2xlYW4gdXAgYWZ0ZXIgY2FwdHVyZSoqOiBEZWxldGUgYW55IGNvbW1lbnRzIGNyZWF0ZWQgZHVyaW5nIGZpeHR1cmUgY2FwdHVyZQorMy4gKipTYW5pdGl6ZSBzZW5zaXRpdmUgZGF0YSoqOiBSZW1vdmUgb3IgcmVwbGFjZSB0b2tlbnMsIHBlcnNvbmFsIGluZm9ybWF0aW9uLCBldGMuCis0LiAqKlZlcnNpb24gY29udHJvbCBmaXh0dXJlcyoqOiBDb21taXQgZml4dHVyZSBmaWxlcyB0byBnaXQgZm9yIHRlYW0gc2hhcmluZworNS4gKipSZWd1bGFyIHVwZGF0ZXMqKjogUmUtY2FwdHVyZSBmaXh0dXJlcyB3aGVuIEdpdEh1YiBBUEkgY2hhbmdlcworCisjIyBFbnZpcm9ubWVudCBWYXJpYWJsZXMgUmVmZXJlbmNlCisKK3wgVmFyaWFibGUgfCBEZXNjcmlwdGlvbiB8IEV4YW1wbGUgfAorfC0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18Cit8IGBHSVRIVUJfVE9LRU5gIHwgR2l0SHViIHBlcnNvbmFsIGFjY2VzcyB0b2tlbiB8IGBnaHBfeHh4eHh4eHh4eHh4YCB8Cit8IGBSRVBPYCB8IFJlcG9zaXRvcnkgaW4gb3duZXIvcmVwbyBmb3JtYXQgfCBgb2N0b2NhdC9IZWxsby1Xb3JsZGAgfAorfCBgUFJfTlVNQkVSYCB8IFB1bGwgcmVxdWVzdCBudW1iZXIgfCBgMTIzYCB8Cit8IGBDT01NSVRfU0hBYCB8IEdpdCBjb21taXQgU0hBIHwgYGFiYzEyM2RlZjQ1NmAgfAorfCBgQ09WRVJBR0VfUkVQT1JUX1BBVEhgIHwgUGF0aCB0byBjb3ZlcmFnZS5qc29uIHwgYGNvdmVyYWdlL2NvdmVyYWdlLmpzb25gIHwKK3wgYEJVSUxEX1VSTGAgfCBDSSBidWlsZCBVUkwgZm9yIGxpbmtzIHwgYGh0dHBzOi8vZ2l0aHViLmNvbS9vd25lci9yZXBvL2FjdGlvbnMvcnVucy8xMjNgIHwKKworIyMgVHJvdWJsZXNob290aW5nCisKKyMjIyBDb21tb24gSXNzdWVzCisKKzEuICoqQXV0aGVudGljYXRpb24gZXJyb3JzKio6IEVuc3VyZSB5b3VyIEdpdEh1YiB0b2tlbiBoYXMgdGhlIGNvcnJlY3QgcGVybWlzc2lvbnMKKzIuICoqRmlsZSBub3QgZm91bmQqKjogTWFrZSBzdXJlIHRoZSBjb3ZlcmFnZSByZXBvcnQgZmlsZSBleGlzdHMKKzMuICoqTmV0d29yayBlcnJvcnMqKjogQ2hlY2sgeW91ciBpbnRlcm5ldCBjb25uZWN0aW9uIGFuZCBHaXRIdWIgQVBJIHN0YXR1cworNC4gKipQZXJtaXNzaW9uIGRlbmllZCoqOiBFbnN1cmUgdGhlIHNjcmlwdCBmaWxlcyBhcmUgZXhlY3V0YWJsZSAoYGNobW9kICt4YCkKKworIyMjIERlYnVnIE1vZGUKKworUnVuIGFueSBzY3JpcHQgd2l0aCBgREVCVUc9MWAgZm9yIG1vcmUgdmVyYm9zZSBvdXRwdXQ6CitgYGBiYXNoCitERUJVRz0xIC4vc2NyaXB0cy9jYXB0dXJlX2ZpeHR1cmVzLnJiCitgYGAKKworIyMgU2VjdXJpdHkgTm90ZXMKKworLSBOZXZlciBjb21taXQgcmVhbCBHaXRIdWIgdG9rZW5zIHRvIHZlcnNpb24gY29udHJvbAorLSBVc2UgZW52aXJvbm1lbnQgdmFyaWFibGVzIG9yIHNlY3VyZSBjcmVkZW50aWFsIHN0b3JhZ2UKKy0gQ29uc2lkZXIgdXNpbmcgR2l0SHViJ3MgdGVzdCB0b2tlbiBvciBhIGRlZGljYXRlZCB0ZXN0IGFjY291bnQKKy0gU2FuaXRpemUgZml4dHVyZSBmaWxlcyBiZWZvcmUgY29tbWl0dGluZyBpZiB0aGV5IGNvbnRhaW4gc2Vuc2l0aXZlIGRhdGEKZGlmZiAtLWdpdCBhL3NjcmlwdHMvY2FwdHVyZS5zaCBiL3NjcmlwdHMvY2FwdHVyZS5zaApuZXcgZmlsZSBtb2RlIDEwMDc1NQppbmRleCAwMDAwMDAwLi42YWYzNTcwCi0tLSAvZGV2L251bGwKKysrIGIvc2NyaXB0cy9jYXB0dXJlLnNoCkBAIC0wLDAgKzEsMTIxIEBACisjIS9iaW4vYmFzaAorIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKKworc2V0IC1lCisKKyMgQ29sb3JzIGZvciBvdXRwdXQKK1JFRD0nXDAzM1swOzMxbScKK0dSRUVOPSdcMDMzWzA7MzJtJworWUVMTE9XPSdcMDMzWzE7MzNtJworQkxVRT0nXDAzM1swOzM0bScKK05DPSdcMDMzWzBtJyAjIE5vIENvbG9yCisKK2VjaG8gLWUgIiR7QkxVRX3wn5SnIENvdmVyYWdlIFJlcG9ydGVyIEZpeHR1cmUgQ2FwdHVyZSBUb29sJHtOQ30iCitlY2hvICIiCisKKyMgQ2hlY2sgaWYgcmVxdWlyZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBzZXQKK2NoZWNrX2Vudl92YXIoKSB7CisgICAgaWYgWyAteiAiJHshMX0iIF07IHRoZW4KKyAgICAgICAgZWNobyAtZSAiJHtSRUR94p2MIEVycm9yOiAkMSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBub3Qgc2V0JHtOQ30iCisgICAgICAgIGVjaG8gIlBsZWFzZSBzZXQgaXQgd2l0aDogZXhwb3J0ICQxPVwieW91cl92YWx1ZVwiIgorICAgICAgICBleGl0IDEKKyAgICBmaQorfQorCitlY2hvIC1lICIke1lFTExPV33wn5OLIENoZWNraW5nIGVudmlyb25tZW50IHZhcmlhYmxlcy4uLiR7TkN9IgorY2hlY2tfZW52X3ZhciAiR0lUSFVCX1RPS0VOIgorY2hlY2tfZW52X3ZhciAiUkVQTyIKK2NoZWNrX2Vudl92YXIgIlBSX05VTUJFUiIKKworIyBPcHRpb25hbCB2YXJpYWJsZXMgd2l0aCBkZWZhdWx0cworQ09NTUlUX1NIQT0ke0NPTU1JVF9TSEE6LSJhYmMxMjNkZWY0NTYifQorQ09WRVJBR0VfUkVQT1JUX1BBVEg9JHtDT1ZFUkFHRV9SRVBPUlRfUEFUSDotImNvdmVyYWdlL2NvdmVyYWdlLmpzb24ifQorQlVJTERfVVJMPSR7QlVJTERfVVJMOi0iaHR0cHM6Ly9jaS5leGFtcGxlLmNvbS9idWlsZC8xMjMifQorCitlY2hvIC1lICIke0dSRUVOfeKchSBBbGwgcmVxdWlyZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBzZXQke05DfSIKK2VjaG8gIiIKKworIyBEaXNwbGF5IGN1cnJlbnQgY29uZmlndXJhdGlvbgorZWNobyAtZSAiJHtCTFVFffCfk4ogQ3VycmVudCBDb25maWd1cmF0aW9uOiR7TkN9IgorZWNobyAiICBSZXBvc2l0b3J5OiAkUkVQTyIKK2VjaG8gIiAgUFIgTnVtYmVyOiAkUFJfTlVNQkVSIgorZWNobyAiICBDb21taXQgU0hBOiAkQ09NTUlUX1NIQSIKK2VjaG8gIiAgQ292ZXJhZ2UgUmVwb3J0OiAkQ09WRVJBR0VfUkVQT1JUX1BBVEgiCitlY2hvICIgIEJ1aWxkIFVSTDogJEJVSUxEX1VSTCIKK2VjaG8gIiIKKworIyBDaGVjayBpZiBjb3ZlcmFnZSByZXBvcnQgZXhpc3RzCitpZiBbICEgLWYgIiRDT1ZFUkFHRV9SRVBPUlRfUEFUSCIgXTsgdGhlbgorICAgIGVjaG8gLWUgIiR7WUVMTE9XfeKaoO+4jyAgV2FybmluZzogQ292ZXJhZ2UgcmVwb3J0IGZpbGUgbm90IGZvdW5kIGF0ICRDT1ZFUkFHRV9SRVBPUlRfUEFUSCR7TkN9IgorICAgIGVjaG8gIlRoZSBzY3JpcHQgd2lsbCBzdGlsbCBydW4sIGJ1dCBjb3ZlcmFnZSBhbmFseXNpcyBtYXkgZmFpbC4iCisgICAgZWNobyAiIgorZmkKKworIyBNZW51IGZvciBzY3JpcHQgc2VsZWN0aW9uCitlY2hvIC1lICIke0JMVUV98J+OryBDaG9vc2UgY2FwdHVyZSBtZXRob2Q6JHtOQ30iCitlY2hvICIxKSBWQ1IgQ2Fzc2V0dGUgQ2FwdHVyZSAocmVjb21tZW5kZWQgZm9yIHRlc3RzKSIKK2VjaG8gIjIpIFJhdyBSZXF1ZXN0IENhcHR1cmUgKGRldGFpbGVkIEpTT04gb3V0cHV0KSIKK2VjaG8gIjMpIExvZ2dpbmcgTW9kZSAodmVyYm9zZSBjb25zb2xlIG91dHB1dCkiCitlY2hvICI0KSBBbGwgbWV0aG9kcyIKK2VjaG8gIiIKKworcmVhZCAtcCAiRW50ZXIgeW91ciBjaG9pY2UgKDEtNCk6ICIgY2hvaWNlCisKK2Nhc2UgJGNob2ljZSBpbgorICAgIDEpCisgICAgICAgIGVjaG8gLWUgIiR7R1JFRU598J+OrCBTdGFydGluZyBWQ1IgY2Fzc2V0dGUgY2FwdHVyZS4uLiR7TkN9IgorICAgICAgICAuL3NjcmlwdHMvY2FwdHVyZV9maXh0dXJlcy5yYgorICAgICAgICA7OworICAgIDIpCisgICAgICAgIGVjaG8gLWUgIiR7R1JFRU598J+TiiBTdGFydGluZyByYXcgcmVxdWVzdCBjYXB0dXJlLi4uJHtOQ30iCisgICAgICAgIC4vc2NyaXB0cy9jYXB0dXJlX3Jhd19yZXF1ZXN0cy5yYgorICAgICAgICA7OworICAgIDMpCisgICAgICAgIGVjaG8gLWUgIiR7R1JFRU598J+TnSBTdGFydGluZyBsb2dnaW5nIG1vZGUuLi4ke05DfSIKKyAgICAgICAgLi9zY3JpcHRzL3J1bl93aXRoX2xvZ2dpbmcucmIgXAorICAgICAgICAgICAgLS1naXRodWItdG9rZW4gIiRHSVRIVUJfVE9LRU4iIFwKKyAgICAgICAgICAgIC0tcmVwbyAiJFJFUE8iIFwKKyAgICAgICAgICAgIC0tcHItbnVtYmVyICIkUFJfTlVNQkVSIiBcCisgICAgICAgICAgICAtLWNvbW1pdC1zaGEgIiRDT01NSVRfU0hBIiBcCisgICAgICAgICAgICAtLWNvdmVyYWdlLXJlcG9ydC1wYXRoICIkQ09WRVJBR0VfUkVQT1JUX1BBVEgiIFwKKyAgICAgICAgICAgIC0tYnVpbGQtdXJsICIkQlVJTERfVVJMIgorICAgICAgICA7OworICAgIDQpCisgICAgICAgIGVjaG8gLWUgIiR7R1JFRU598J+agCBSdW5uaW5nIGFsbCBjYXB0dXJlIG1ldGhvZHMuLi4ke05DfSIKKyAgICAgICAgZWNobyAiIgorICAgICAgICAKKyAgICAgICAgZWNobyAtZSAiJHtZRUxMT1d9MS8zOiBWQ1IgQ2Fzc2V0dGUgQ2FwdHVyZSR7TkN9IgorICAgICAgICAuL3NjcmlwdHMvY2FwdHVyZV9maXh0dXJlcy5yYgorICAgICAgICBlY2hvICIiCisgICAgICAgIAorICAgICAgICBlY2hvIC1lICIke1lFTExPV30yLzM6IFJhdyBSZXF1ZXN0IENhcHR1cmUke05DfSIKKyAgICAgICAgLi9zY3JpcHRzL2NhcHR1cmVfcmF3X3JlcXVlc3RzLnJiCisgICAgICAgIGVjaG8gIiIKKyAgICAgICAgCisgICAgICAgIGVjaG8gLWUgIiR7WUVMTE9XfTMvMzogTG9nZ2luZyBNb2RlJHtOQ30iCisgICAgICAgIC4vc2NyaXB0cy9ydW5fd2l0aF9sb2dnaW5nLnJiIFwKKyAgICAgICAgICAgIC0tZ2l0aHViLXRva2VuICIkR0lUSFVCX1RPS0VOIiBcCisgICAgICAgICAgICAtLXJlcG8gIiRSRVBPIiBcCisgICAgICAgICAgICAtLXByLW51bWJlciAiJFBSX05VTUJFUiIgXAorICAgICAgICAgICAgLS1jb21taXQtc2hhICIkQ09NTUlUX1NIQSIgXAorICAgICAgICAgICAgLS1jb3ZlcmFnZS1yZXBvcnQtcGF0aCAiJENPVkVSQUdFX1JFUE9SVF9QQVRIIiBcCisgICAgICAgICAgICAtLWJ1aWxkLXVybCAiJEJVSUxEX1VSTCIKKyAgICAgICAgOzsKKyAgICAqKQorICAgICAgICBlY2hvIC1lICIke1JFRH3inYwgSW52YWxpZCBjaG9pY2UuIFBsZWFzZSBydW4gdGhlIHNjcmlwdCBhZ2Fpbi4ke05DfSIKKyAgICAgICAgZXhpdCAxCisgICAgICAgIDs7Citlc2FjCisKK2VjaG8gIiIKK2VjaG8gLWUgIiR7R1JFRU598J+OiSBDYXB0dXJlIHByb2Nlc3MgY29tcGxldGVkISR7TkN9IgorZWNobyAiIgorZWNobyAtZSAiJHtCTFVFffCfk4EgQ2hlY2sgdGhlc2UgZGlyZWN0b3JpZXMgZm9yIG91dHB1dDoke05DfSIKK2VjaG8gIiAgLSBzcGVjL2ZpeHR1cmVzL3Zjcl9jYXNzZXR0ZXMvIChWQ1IgY2Fzc2V0dGVzKSIKK2VjaG8gIiAgLSBzcGVjL2ZpeHR1cmVzL3Jhd19yZXF1ZXN0cy8gKFJhdyBKU09OIGRhdGEpIgorZWNobyAiIgorZWNobyAtZSAiJHtZRUxMT1d98J+SoSBOZXh0IHN0ZXBzOiR7TkN9IgorZWNobyAiICAxLiBSZXZpZXcgdGhlIGNhcHR1cmVkIGRhdGEiCitlY2hvICIgIDIuIFNhbml0aXplIGFueSBzZW5zaXRpdmUgaW5mb3JtYXRpb24iCitlY2hvICIgIDMuIFVzZSB0aGUgZml4dHVyZXMgaW4geW91ciB0ZXN0cyIKK2VjaG8gIiAgNC4gQ29uc2lkZXIgY2xlYW5pbmcgdXAgYW55IHRlc3QgY29tbWVudHMgb24gdGhlIFBSIgpkaWZmIC0tZ2l0IGEvc2NyaXB0cy9jYXB0dXJlX2ZpeHR1cmVzLnJiIGIvc2NyaXB0cy9jYXB0dXJlX2ZpeHR1cmVzLnJiCm5ldyBmaWxlIG1vZGUgMTAwNzU1CmluZGV4IDAwMDAwMDAuLmNlZDAzMmEKLS0tIC9kZXYvbnVsbAorKysgYi9zY3JpcHRzL2NhcHR1cmVfZml4dHVyZXMucmIKQEAgLTAsMCArMSw2OCBAQAorIyEvdXNyL2Jpbi9lbnYgcnVieQorIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKKworcmVxdWlyZSAidmNyIgorcmVxdWlyZSAid2VibW9jayIKK3JlcXVpcmUgImNvdmVyYWdlX3JlcG9ydGVyIgorCisjIENvbmZpZ3VyZSBWQ1IgdG8gcmVjb3JkIHJlYWwgSFRUUCBpbnRlcmFjdGlvbnMKK1ZDUi5jb25maWd1cmUgZG8gfGNvbmZpZ3wKKyAgY29uZmlnLmNhc3NldHRlX2xpYnJhcnlfZGlyID0gInNwZWMvZml4dHVyZXMvdmNyX2Nhc3NldHRlcyIKKyAgY29uZmlnLmhvb2tfaW50byA6d2VibW9jaworICBjb25maWcuY29uZmlndXJlX3JzcGVjX21ldGFkYXRhIQorICBjb25maWcuYWxsb3dfaHR0cF9jb25uZWN0aW9uc193aGVuX25vX2Nhc3NldHRlID0gdHJ1ZQorICBjb25maWcuZGVmYXVsdF9jYXNzZXR0ZV9vcHRpb25zID0geworICAgIHJlY29yZDogICAgICAgICAgICA6bmV3X2VwaXNvZGVzLAorICAgIG1hdGNoX3JlcXVlc3RzX29uOiAlaVttZXRob2QgdXJpIGJvZHldCisgIH0KK2VuZAorCisjIENyZWF0ZSBmaXh0dXJlcyBkaXJlY3RvcnkgaWYgaXQgZG9lc24ndCBleGlzdAorRmlsZVV0aWxzLm1rZGlyX3AoInNwZWMvZml4dHVyZXMvdmNyX2Nhc3NldHRlcyIpCisKK2RlZiBidWlsZF9vcHRpb25zCisgIHsKKyAgICBnaXRodWJfdG9rZW46ICAgICAgICAgRU5WLmZldGNoKCJHSVRIVUJfVE9LRU4iLCBuaWwpLAorICAgIHJlcG86ICAgICAgICAgICAgICAgICBFTlZbIlJFUE8iXSB8fCAieW91ci1vcmcveW91ci1yZXBvIiwKKyAgICBwcl9udW1iZXI6ICAgICAgICAgICAgRU5WWyJQUl9OVU1CRVIiXSB8fCAiMTIzIiwKKyAgICBjb21taXRfc2hhOiAgICAgICAgICAgRU5WWyJDT01NSVRfU0hBIl0gfHwgImFiYzEyM2RlZjQ1NiIsCisgICAgY292ZXJhZ2VfcmVwb3J0X3BhdGg6IEVOVlsiQ09WRVJBR0VfUkVQT1JUX1BBVEgiXSB8fCAiY292ZXJhZ2UvY292ZXJhZ2UuanNvbiIsCisgICAgYnVpbGRfdXJsOiAgICAgICAgICAgIEVOVlsiQlVJTERfVVJMIl0gfHwgImh0dHBzOi8vY2kuZXhhbXBsZS5jb20vYnVpbGQvMTIzIgorICB9CitlbmQKKworZGVmIHZhbGlkYXRlX29wdGlvbnMob3B0aW9ucykKKyAgcmV0dXJuIGlmIG9wdGlvbnNbOmdpdGh1Yl90b2tlbl0KKworICBwdXRzICJFcnJvcjogR0lUSFVCX1RPS0VOIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHJlcXVpcmVkIgorICBleGl0IDEKK2VuZAorCitkZWYgcHJpbnRfY2FwdHVyZV9pbmZvKG9wdGlvbnMpCisgIHB1dHMgIkNhcHR1cmluZyBpbnRlcmFjdGlvbnMgZm9yIFBSICMje29wdGlvbnNbOnByX251bWJlcl19IGluICN7b3B0aW9uc1s6cmVwb119IgorICBwdXRzICJDb21taXQgU0hBOiAje29wdGlvbnNbOmNvbW1pdF9zaGFdfSIKKyAgcHV0cyAiQ292ZXJhZ2UgcmVwb3J0OiAje29wdGlvbnNbOmNvdmVyYWdlX3JlcG9ydF9wYXRoXX0iCitlbmQKKworZGVmIHJ1bl9jb3ZlcmFnZV9yZXBvcnRlcihvcHRpb25zKQorICBWQ1IudXNlX2Nhc3NldHRlKCJyZWFsX3ByXyN7b3B0aW9uc1s6cHJfbnVtYmVyXX0iKSBkbworICAgIHJ1bm5lciA9IENvdmVyYWdlUmVwb3J0ZXI6OlJ1bm5lci5uZXcob3B0aW9ucykKKyAgICBydW5uZXIucnVuCisgICAgcHV0cyAi4pyFIFN1Y2Nlc3NmdWxseSBjYXB0dXJlZCBpbnRlcmFjdGlvbnMhIgorICByZXNjdWUgU3RhbmRhcmRFcnJvciA9PiBlCisgICAgcHV0cyAi4p2MIEVycm9yIGR1cmluZyBleGVjdXRpb246ICN7ZS5tZXNzYWdlfSIKKyAgICBwdXRzIGUuYmFja3RyYWNlLmZpcnN0KDUpCisgICAgZXhpdCAxCisgIGVuZAorZW5kCisKK2RlZiBjYXB0dXJlX3ByX2ludGVyYWN0aW9ucworICBvcHRpb25zID0gYnVpbGRfb3B0aW9ucworICB2YWxpZGF0ZV9vcHRpb25zKG9wdGlvbnMpCisgIHByaW50X2NhcHR1cmVfaW5mbyhvcHRpb25zKQorICBydW5fY292ZXJhZ2VfcmVwb3J0ZXIob3B0aW9ucykKKyAgcHV0cyAi8J+TgSBDYXNzZXR0ZSBzYXZlZCB0bzogc3BlYy9maXh0dXJlcy92Y3JfY2Fzc2V0dGVzL3JlYWxfcHJfI3tvcHRpb25zWzpwcl9udW1iZXJdfS55bWwiCitlbmQKKworIyBSdW4gdGhlIGNhcHR1cmUKK2NhcHR1cmVfcHJfaW50ZXJhY3Rpb25zCmRpZmYgLS1naXQgYS9zY3JpcHRzL2NhcHR1cmVfcmF3X3JlcXVlc3RzLnJiIGIvc2NyaXB0cy9jYXB0dXJlX3Jhd19yZXF1ZXN0cy5yYgpuZXcgZmlsZSBtb2RlIDEwMDc1NQppbmRleCAwMDAwMDAwLi40ZDhhYTY1Ci0tLSAvZGV2L251bGwKKysrIGIvc2NyaXB0cy9jYXB0dXJlX3Jhd19yZXF1ZXN0cy5yYgpAQCAtMCwwICsxLDE3NCBAQAorIyEvdXNyL2Jpbi9lbnYgcnVieQorIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKKworcmVxdWlyZSAianNvbiIKK3JlcXVpcmUgIm5ldC9odHRwIgorcmVxdWlyZSAidXJpIgorcmVxdWlyZSAiY292ZXJhZ2VfcmVwb3J0ZXIiCisKKyMgQ3VzdG9tIEhUVFAgaW50ZXJjZXB0b3IgdG8gY2FwdHVyZSByYXcgcmVxdWVzdHMvcmVzcG9uc2VzCitjbGFzcyBSZXF1ZXN0Q2FwdHVyZQorICBkZWYgaW5pdGlhbGl6ZQorICAgIEByZXF1ZXN0cyA9IFtdCisgICAgQHJlc3BvbnNlcyA9IFtdCisgIGVuZAorCisgIGRlZiBjYXB0dXJlX3JlcXVlc3QobWV0aG9kLCB1cmksIGhlYWRlcnMsIGJvZHkpCisgICAgcmVxdWVzdF9kYXRhID0geworICAgICAgbWV0aG9kOiAgICBtZXRob2QsCisgICAgICB1cmk6ICAgICAgIHVyaS50b19zLAorICAgICAgaGVhZGVyczogICBoZWFkZXJzLAorICAgICAgYm9keTogICAgICBib2R5LAorICAgICAgdGltZXN0YW1wOiBUaW1lLm5vdy5pc284NjAxCisgICAgfQorICAgIEByZXF1ZXN0cyA8PCByZXF1ZXN0X2RhdGEKKyAgICBwdXRzICLwn5OkIENhcHR1cmVkICN7bWV0aG9kfSByZXF1ZXN0IHRvICN7dXJpfSIKKyAgZW5kCisKKyAgZGVmIGNhcHR1cmVfcmVzcG9uc2Uoc3RhdHVzLCBoZWFkZXJzLCBib2R5KQorICAgIHJlc3BvbnNlX2RhdGEgPSB7CisgICAgICBzdGF0dXM6ICAgIHN0YXR1cywKKyAgICAgIGhlYWRlcnM6ICAgaGVhZGVycywKKyAgICAgIGJvZHk6ICAgICAgYm9keSwKKyAgICAgIHRpbWVzdGFtcDogVGltZS5ub3cuaXNvODYwMQorICAgIH0KKyAgICBAcmVzcG9uc2VzIDw8IHJlc3BvbnNlX2RhdGEKKyAgICBwdXRzICLwn5OlIENhcHR1cmVkIHJlc3BvbnNlOiAje3N0YXR1c30iCisgIGVuZAorCisgIGRlZiBzYXZlX3RvX2ZpbGUoZmlsZW5hbWUpCisgICAgZGF0YSA9IHsKKyAgICAgIHJlcXVlc3RzOiAgICBAcmVxdWVzdHMsCisgICAgICByZXNwb25zZXM6ICAgQHJlc3BvbnNlcywKKyAgICAgIGNhcHR1cmVkX2F0OiBUaW1lLm5vdy5pc284NjAxCisgICAgfQorCisgICAgRmlsZS53cml0ZShmaWxlbmFtZSwgSlNPTi5wcmV0dHlfZ2VuZXJhdGUoZGF0YSkpCisgICAgcHV0cyAi8J+SviBTYXZlZCAje0ByZXF1ZXN0cy5sZW5ndGh9IHJlcXVlc3RzIGFuZCAje0ByZXNwb25zZXMubGVuZ3RofSByZXNwb25zZXMgdG8gI3tmaWxlbmFtZX0iCisgIGVuZAorZW5kCisKKyMgTW9ua2V5IHBhdGNoIE9jdG9raXQgdG8gY2FwdHVyZSByZXF1ZXN0cworbW9kdWxlIE9jdG9raXRDYXB0dXJlCisgIGRlZiBzZWxmLmluY2x1ZGVkKGJhc2UpCisgICAgYmFzZS5jbGFzc19ldmFsIGRvCisgICAgICBhbGlhc19tZXRob2QgOnJlcXVlc3Rfd2l0aG91dF9jYXB0dXJlLCA6cmVxdWVzdAorCisgICAgICBkZWYgcmVxdWVzdChtZXRob2QsIHBhdGgsIGRhdGE9e30sIG9wdGlvbnM9e30pCisgICAgICAgICMgQ2FwdHVyZSB0aGUgcmVxdWVzdAorICAgICAgICB1cmkgPSBVUkkuam9pbihAYXBpX2VuZHBvaW50LCBwYXRoKQorICAgICAgICBAY2FwdHVyZSYuY2FwdHVyZV9yZXF1ZXN0KG1ldGhvZCwgdXJpLCBvcHRpb25zWzpoZWFkZXJzXSB8fCB7fSwgZGF0YS50b19qc29uKQorCisgICAgICAgICMgTWFrZSB0aGUgYWN0dWFsIHJlcXVlc3QKKyAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0X3dpdGhvdXRfY2FwdHVyZShtZXRob2QsIHBhdGgsIGRhdGEsIG9wdGlvbnMpCisKKyAgICAgICAgIyBDYXB0dXJlIHRoZSByZXNwb25zZQorICAgICAgICBAY2FwdHVyZSYuY2FwdHVyZV9yZXNwb25zZShyZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLmhlYWRlcnMsIHJlc3BvbnNlLmJvZHkpCisKKyAgICAgICAgcmVzcG9uc2UKKyAgICAgIGVuZAorICAgIGVuZAorICBlbmQKK2VuZAorCitkZWYgYnVpbGRfY2FwdHVyZV9vcHRpb25zCisgIHsKKyAgICBnaXRodWJfdG9rZW46ICAgICAgICAgRU5WLmZldGNoKCJHSVRIVUJfVE9LRU4iLCBuaWwpLAorICAgIHJlcG86ICAgICAgICAgICAgICAgICBFTlZbIlJFUE8iXSB8fCAieW91ci1vcmcveW91ci1yZXBvIiwKKyAgICBwcl9udW1iZXI6ICAgICAgICAgICAgRU5WWyJQUl9OVU1CRVIiXSB8fCAiMTIzIiwKKyAgICBjb21taXRfc2hhOiAgICAgICAgICAgRU5WWyJDT01NSVRfU0hBIl0gfHwgImFiYzEyM2RlZjQ1NiIsCisgICAgY292ZXJhZ2VfcmVwb3J0X3BhdGg6IEVOVlsiQ09WRVJBR0VfUkVQT1JUX1BBVEgiXSB8fCAiY292ZXJhZ2UvY292ZXJhZ2UuanNvbiIsCisgICAgYnVpbGRfdXJsOiAgICAgICAgICAgIEVOVlsiQlVJTERfVVJMIl0gfHwgImh0dHBzOi8vY2kuZXhhbXBsZS5jb20vYnVpbGQvMTIzIgorICB9CitlbmQKKworZGVmIHZhbGlkYXRlX2NhcHR1cmVfb3B0aW9ucyhvcHRpb25zKQorICByZXR1cm4gaWYgb3B0aW9uc1s6Z2l0aHViX3Rva2VuXQorCisgIHB1dHMgIkVycm9yOiBHSVRIVUJfVE9LRU4gZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgcmVxdWlyZWQiCisgIGV4aXQgMQorZW5kCisKK2RlZiBwcmludF9jYXB0dXJlX2luZm8ob3B0aW9ucykKKyAgcHV0cyAi8J+UjSBDYXB0dXJpbmcgcmF3IEhUVFAgaW50ZXJhY3Rpb25zIGZvciBQUiAjI3tvcHRpb25zWzpwcl9udW1iZXJdfSBpbiAje29wdGlvbnNbOnJlcG9dfSIKKyAgcHV0cyAiQ29tbWl0IFNIQTogI3tvcHRpb25zWzpjb21taXRfc2hhXX0iCisgIHB1dHMgIkNvdmVyYWdlIHJlcG9ydDogI3tvcHRpb25zWzpjb3ZlcmFnZV9yZXBvcnRfcGF0aF19IgorZW5kCisKK2RlZiBzZXR1cF9jYXB0dXJlX2Vudmlyb25tZW50CisgIGNhcHR1cmUgPSBSZXF1ZXN0Q2FwdHVyZS5uZXcKKyAgRmlsZVV0aWxzLm1rZGlyX3AoInNwZWMvZml4dHVyZXMvcmF3X3JlcXVlc3RzIikKKyAgY2FwdHVyZQorZW5kCisKK2RlZiBjcmVhdGVfcHVsbF9yZXF1ZXN0X3dpdGhfY2FwdHVyZShvcHRpb25zLCBjYXB0dXJlKQorICBwdWxsX3JlcXVlc3QgPSBDb3ZlcmFnZVJlcG9ydGVyOjpQdWxsUmVxdWVzdC5uZXcoCisgICAgZ2l0aHViX3Rva2VuOiBvcHRpb25zWzpnaXRodWJfdG9rZW5dLAorICAgIHJlcG86ICAgICAgICAgb3B0aW9uc1s6cmVwb10sCisgICAgcHJfbnVtYmVyOiAgICBvcHRpb25zWzpwcl9udW1iZXJdCisgICkKKworICAjIEluamVjdCBjYXB0dXJlIGludG8gdGhlIE9jdG9raXQgY2xpZW50CisgIGNsaWVudCA9IHB1bGxfcmVxdWVzdC5pbnN0YW5jZV92YXJpYWJsZV9nZXQoOkBjbGllbnQpCisgIGNsaWVudC5leHRlbmQoT2N0b2tpdENhcHR1cmUpCisgIGNsaWVudC5pbnN0YW5jZV92YXJpYWJsZV9zZXQoOkBjYXB0dXJlLCBjYXB0dXJlKQorICBwdWxsX3JlcXVlc3QKK2VuZAorCitkZWYgcnVuX2NvdmVyYWdlX3dvcmtmbG93KG9wdGlvbnMsIHB1bGxfcmVxdWVzdCkKKyAgY292ZXJhZ2VfcmVwb3J0ID0gQ292ZXJhZ2VSZXBvcnRlcjo6Q292ZXJhZ2VSZXBvcnRMb2FkZXIubmV3KG9wdGlvbnNbOmNvdmVyYWdlX3JlcG9ydF9wYXRoXSkuY2FsbAorICBtb2RpZmllZF9yYW5nZXMgPSBDb3ZlcmFnZVJlcG9ydGVyOjpNb2RpZmllZFJhbmdlc0V4dHJhY3Rvci5uZXcocHVsbF9yZXF1ZXN0LmRpZmYpLmNhbGwKKyAgdW5jb3ZlcmVkX3JhbmdlcyA9IENvdmVyYWdlUmVwb3J0ZXI6OlVuY292ZXJlZFJhbmdlc0V4dHJhY3Rvci5uZXcoY292ZXJhZ2VfcmVwb3J0KS5jYWxsCisgIGludGVyc2VjdGlvbiA9IENvdmVyYWdlUmVwb3J0ZXI6Ok1vZGlmaWVkVW5jb3ZlcmVkSW50ZXJzZWN0aW9uLm5ldygKKyAgICB1bmNvdmVyZWRfcmFuZ2VzOiB1bmNvdmVyZWRfcmFuZ2VzLAorICAgIG1vZGlmaWVkX3JhbmdlczogIG1vZGlmaWVkX3JhbmdlcworICApLmNhbGwKKyAgaW5saW5lX2NvbW1lbnRzID0gQ292ZXJhZ2VSZXBvcnRlcjo6SW5saW5lQ29tbWVudEZhY3RvcnkubmV3KAorICAgIGludGVyc2VjdGlvbjogaW50ZXJzZWN0aW9uLAorICAgIGNvbW1pdF9zaGE6ICAgb3B0aW9uc1s6Y29tbWl0X3NoYV0KKyAgKQorICBDb3ZlcmFnZVJlcG9ydGVyOjpJbmxpbmVDb21tZW50UG9zdGVyLm5ldygKKyAgICBwdWxsX3JlcXVlc3Q6ICAgIHB1bGxfcmVxdWVzdCwKKyAgICBjb21taXRfc2hhOiAgICAgIG9wdGlvbnNbOmNvbW1pdF9zaGFdLAorICAgIGlubGluZV9jb21tZW50czogaW5saW5lX2NvbW1lbnRzCisgICkuY2FsbAorICBnbG9iYWxfY29tbWVudCA9IENvdmVyYWdlUmVwb3J0ZXI6Okdsb2JhbENvbW1lbnRGYWN0b3J5Lm5ldyhjb21taXRfc2hhOiBvcHRpb25zWzpjb21taXRfc2hhXSkKKyAgQ292ZXJhZ2VSZXBvcnRlcjo6R2xvYmFsQ29tbWVudFBvc3Rlci5uZXcocHVsbF9yZXF1ZXN0OiBwdWxsX3JlcXVlc3QpLmNhbGwoZ2xvYmFsX2NvbW1lbnQpCitlbmQKKworZGVmIHNhdmVfc3VjY2Vzc2Z1bF9jYXB0dXJlKGNhcHR1cmUsIG9wdGlvbnMpCisgIGZpbGVuYW1lID0gInNwZWMvZml4dHVyZXMvcmF3X3JlcXVlc3RzL3ByXyN7b3B0aW9uc1s6cHJfbnVtYmVyXX1fI3tUaW1lLm5vdy5zdHJmdGltZSgnJVklbSVkXyVIJU0lUycpfS5qc29uIgorICBjYXB0dXJlLnNhdmVfdG9fZmlsZShmaWxlbmFtZSkKKyAgcHV0cyAi4pyFIFN1Y2Nlc3NmdWxseSBjYXB0dXJlZCBpbnRlcmFjdGlvbnMhIgorZW5kCisKK2RlZiBoYW5kbGVfY2FwdHVyZV9lcnJvcihlcnJvciwgY2FwdHVyZSwgb3B0aW9ucykKKyAgcHV0cyAi4p2MIEVycm9yIGR1cmluZyBleGVjdXRpb246ICN7ZXJyb3IubWVzc2FnZX0iCisgIHB1dHMgZXJyb3IuYmFja3RyYWNlLmZpcnN0KDUpCisKKyAgIyBTYXZlIHBhcnRpYWwgY2FwdHVyZSBpZiB3ZSBoYXZlIGFueSBkYXRhCisgIGlmIGNhcHR1cmUuaW5zdGFuY2VfdmFyaWFibGVfZ2V0KDpAcmVxdWVzdHMpLmFueT8KKyAgICBmaWxlbmFtZSA9ICJzcGVjL2ZpeHR1cmVzL3Jhd19yZXF1ZXN0cy9wcl8je29wdGlvbnNbOnByX251bWJlcl19X2Vycm9yXyN7VGltZS5ub3cuc3RyZnRpbWUoJyVZJW0lZF8lSCVNJVMnKX0uanNvbiIKKyAgICBjYXB0dXJlLnNhdmVfdG9fZmlsZShmaWxlbmFtZSkKKyAgZW5kCisKKyAgZXhpdCAxCitlbmQKKworZGVmIGNhcHR1cmVfcmF3X2ludGVyYWN0aW9ucworICBvcHRpb25zID0gYnVpbGRfY2FwdHVyZV9vcHRpb25zCisgIHZhbGlkYXRlX2NhcHR1cmVfb3B0aW9ucyhvcHRpb25zKQorICBwcmludF9jYXB0dXJlX2luZm8ob3B0aW9ucykKKyAgY2FwdHVyZSA9IHNldHVwX2NhcHR1cmVfZW52aXJvbm1lbnQKKworICBiZWdpbgorICAgIHB1bGxfcmVxdWVzdCA9IGNyZWF0ZV9wdWxsX3JlcXVlc3Rfd2l0aF9jYXB0dXJlKG9wdGlvbnMsIGNhcHR1cmUpCisgICAgcnVuX2NvdmVyYWdlX3dvcmtmbG93KG9wdGlvbnMsIHB1bGxfcmVxdWVzdCkKKyAgICBzYXZlX3N1Y2Nlc3NmdWxfY2FwdHVyZShjYXB0dXJlLCBvcHRpb25zKQorICByZXNjdWUgU3RhbmRhcmRFcnJvciA9PiBlCisgICAgaGFuZGxlX2NhcHR1cmVfZXJyb3IoZSwgY2FwdHVyZSwgb3B0aW9ucykKKyAgZW5kCitlbmQKKworIyBSdW4gdGhlIGNhcHR1cmUKK2NhcHR1cmVfcmF3X2ludGVyYWN0aW9ucwpkaWZmIC0tZ2l0IGEvc2NyaXB0cy9ydW5fd2l0aF9sb2dnaW5nLnJiIGIvc2NyaXB0cy9ydW5fd2l0aF9sb2dnaW5nLnJiCm5ldyBmaWxlIG1vZGUgMTAwNzU1CmluZGV4IDAwMDAwMDAuLjIxYjcxN2MKLS0tIC9kZXYvbnVsbAorKysgYi9zY3JpcHRzL3J1bl93aXRoX2xvZ2dpbmcucmIKQEAgLTAsMCArMSw0OCBAQAorIyEvdXNyL2Jpbi9lbnYgcnVieQorIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKKworcmVxdWlyZSAibG9nZ2VyIgorcmVxdWlyZSAiY292ZXJhZ2VfcmVwb3J0ZXIiCisKKyMgU2V0IHVwIGxvZ2dpbmcKK2xvZ2dlciA9IExvZ2dlci5uZXcoJHN0ZG91dCkKK2xvZ2dlci5sZXZlbCA9IExvZ2dlcjo6REVCVUcKK0NvdmVyYWdlUmVwb3J0ZXIubG9nZ2VyID0gbG9nZ2VyCisKKyMgT3ZlcnJpZGUgT2N0b2tpdCdzIGxvZ2dlciB0byBjYXB0dXJlIG1vcmUgZGV0YWlscworcmVxdWlyZSAib2N0b2tpdCIKK09jdG9raXQuY29uZmlndXJlIGRvIHxjb25maWd8CisgIGNvbmZpZy5sb2dnZXIgPSBsb2dnZXIKK2VuZAorCisjIE1vbmtleSBwYXRjaCB0byBsb2cgSFRUUCByZXF1ZXN0cworbW9kdWxlIE9jdG9raXQKKyAgY2xhc3MgQ2xpZW50CisgICAgYWxpYXMgcmVxdWVzdF93aXRob3V0X2xvZ2dpbmcgcmVxdWVzdAorCisgICAgZGVmIHJlcXVlc3QobWV0aG9kLCBwYXRoLCBkYXRhPXt9LCBvcHRpb25zPXt9KQorICAgICAgbG9nZ2VyLmRlYnVnKCLwn4yQICN7bWV0aG9kLnVwY2FzZX0gI3twYXRofSIpCisgICAgICBsb2dnZXIuZGVidWcoIvCfk6QgUmVxdWVzdCBkYXRhOiAje2RhdGEuaW5zcGVjdH0iKSBpZiBkYXRhLmFueT8KKworICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0X3dpdGhvdXRfbG9nZ2luZyhtZXRob2QsIHBhdGgsIGRhdGEsIG9wdGlvbnMpCisKKyAgICAgIGxvZ2dlci5kZWJ1Zygi8J+TpSBSZXNwb25zZSBzdGF0dXM6ICN7cmVzcG9uc2Uuc3RhdHVzfSIpCisgICAgICBsb2dnZXIuZGVidWcoIvCfk6UgUmVzcG9uc2UgYm9keTogI3tyZXNwb25zZS5ib2R5WzAuLjUwMF19Li4uIikgaWYgcmVzcG9uc2UuYm9keSAmJiByZXNwb25zZS5ib2R5Lmxlbmd0aCA+IDUwMAorCisgICAgICByZXNwb25zZQorICAgIGVuZAorICBlbmQKK2VuZAorCitwdXRzICLwn5qAIFJ1bm5pbmcgY292ZXJhZ2UtcmVwb3J0ZXIgd2l0aCBkZXRhaWxlZCBsb2dnaW5nLi4uIgorcHV0cyAiU2V0IGVudmlyb25tZW50IHZhcmlhYmxlczoiCitwdXRzICIgIEdJVEhVQl9UT0tFTj15b3VyX3Rva2VuIgorcHV0cyAiICBSRVBPPW93bmVyL3JlcG8iCitwdXRzICIgIFBSX05VTUJFUj0xMjMiCitwdXRzICIgIENPTU1JVF9TSEE9YWJjMTIzIgorcHV0cyAiICBDT1ZFUkFHRV9SRVBPUlRfUEFUSD1jb3ZlcmFnZS9jb3ZlcmFnZS5qc29uIgorcHV0cyAiICBCVUlMRF9VUkw9aHR0cHM6Ly9jaS5leGFtcGxlLmNvbS9idWlsZC8xMjMiCitwdXRzICIiCisKKyMgUnVuIHRoZSBDTEkgd2l0aCB0aGUgcHJvdmlkZWQgYXJndW1lbnRzCitDb3ZlcmFnZVJlcG9ydGVyOjpDTEkuc3RhcnQoQVJHVikKZGlmZiAtLWdpdCBhL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvY2xpX3NwZWMucmIgYi9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL2NsaV9zcGVjLnJiCmluZGV4IDU1NmMzNzEuLjZmMDZkNzcgMTAwNjQ0Ci0tLSBhL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvY2xpX3NwZWMucmIKKysrIGIvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9jbGlfc3BlYy5yYgpAQCAtMTQsNyArMTQsOSBAQAogICAgICAgICBodG1sX3Jvb3Q6ICAgICAiY3VzdG9tX2h0bWwiLAogICAgICAgICBnaXRodWJfdG9rZW46ICAic2VjcmV0IiwKICAgICAgICAgYnVpbGRfdXJsOiAgICAgbmlsLAotICAgICAgICBiYXNlX3JlZjogICAgICAib3JpZ2luL21haW4iCisgICAgICAgIGNvbW1pdF9zaGE6ICAgIG5pbCwKKyAgICAgICAgcHJfbnVtYmVyOiAgICAgbmlsLAorICAgICAgICByZXBvOiAgICAgICAgICBuaWwKICAgICAgIH0KICAgICBlbmQKIApkaWZmIC0tZ2l0IGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9jb21tZW50X3Bvc3Rlcl9zcGVjLnJiIGIvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9jb21tZW50X3Bvc3Rlcl9zcGVjLnJiCmRlbGV0ZWQgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAzYTRmNWI0Li4wMDAwMDAwCi0tLSBhL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvY29tbWVudF9wb3N0ZXJfc3BlYy5yYgorKysgL2Rldi9udWxsCkBAIC0xLDUwICswLDAgQEAKLSMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCi0KLXJlcXVpcmUgInNwZWNfaGVscGVyIgotcmVxdWlyZSAiY292ZXJhZ2VfcmVwb3J0ZXIvY29tbWVudF9wb3N0ZXIiCi0KLVJTcGVjLmRlc2NyaWJlIENvdmVyYWdlUmVwb3J0ZXI6OkNvbW1lbnRQb3N0ZXIgZG8KLSAgc3ViamVjdCg6cG9zdGVyKSB7IGRlc2NyaWJlZF9jbGFzcy5uZXcocHVsbF9yZXF1ZXN0OiwgYW5hbHlzaXM6LCBjb21taXRfc2hhOikgfQotCi0gIGxldCg6cHVsbF9yZXF1ZXN0KSB7IGluc3RhbmNlX2RvdWJsZShDb3ZlcmFnZVJlcG9ydGVyOjpQdWxsUmVxdWVzdCkgfQotICBsZXQoOmNvbW1pdF9zaGEpIHsgImFiYzEyMyIgfQotICBsZXQoOmRpZmZfY292ZXJhZ2UpIHsgODcuNSB9Ci0gIGxldCg6dW5jb3ZlcmVkKSBkbwotICAgIHsKLSAgICAgICJhcHAvbW9kZWxzL3VzZXIucmIiID0+IFsxMCwgMTEsIDEyLCAyMCwgMjIsIDIxLCAzMF0sCi0gICAgICAibGliL2Zvby5yYiIgICAgICAgICA9PiBbNV0KLSAgICB9Ci0gIGVuZAotICBsZXQoOnRvdGFsX2NoYW5nZWQpIHsgMTAgfQotICBsZXQoOnRvdGFsX2NvdmVyZWQpIHsgOTAgfQotICBsZXQoOnVuY292ZXJlZF9ieV9maWxlKSBkbwotICAgIHsKLSAgICAgICJhcHAvbW9kZWxzL3VzZXIucmIiID0+IFsxMCwgMTEsIDEyLCAyMCwgMjIsIDIxLCAzMF0sCi0gICAgICAibGliL2Zvby5yYiIgICAgICAgICA9PiBbNV0KLSAgICB9Ci0gIGVuZAotICBsZXQoOmFuYWx5c2lzKSB7IENvdmVyYWdlUmVwb3J0ZXI6OkFuYWx5c2lzUmVzdWx0Lm5ldyhkaWZmX2NvdmVyYWdlOiwgdG90YWxfY2hhbmdlZDosIHRvdGFsX2NvdmVyZWQ6LCB1bmNvdmVyZWRfYnlfZmlsZTopIH0KLQotICBiZWZvcmUgZG8KLSAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmVfbWVzc2FnZXMoCi0gICAgICBpbmxpbmVfY29tbWVudHM6ICAgICAgW10sCi0gICAgICBnbG9iYWxfY29tbWVudHM6ICAgICAgW10sCi0gICAgICBhZGRfY29tbWVudF9vbl9saW5lczogdHJ1ZSwKLSAgICAgIGFkZF9jb21tZW50OiAgICAgICAgICB0cnVlCi0gICAgKQotICBlbmQKLQotICBkZXNjcmliZSAiI3Bvc3RfYWxsIiBkbwotICAgIGl0ICJkZWxldGVzIG9sZCBpbmxpbmUgY29tbWVudHMsIHBvc3RzIGdyb3VwZWQgaW5saW5lIGNvbW1lbnRzIGFuZCBhIGdsb2JhbCBzdW1tYXJ5IiBkbwotICAgICAgcG9zdGVyLmNhbGwKLSAgICBlbmQKLSAgZW5kCi0KLSAgZGVzY3JpYmUgImlubGluZSBncm91cGluZyBlZGdlIGNhc2VzIiBkbwotICAgIGxldCg6dW5jb3ZlcmVkKSB7IHsgImxpYi9lZGdlLnJiIiA9PiBbMywgMywgNF0gfSB9Ci0KLSAgICBpdCAiZ3JvdXBzIGR1cGxpY2F0ZXMgaW50byBzZXBhcmF0ZSBjaHVua3MgYWNjb3JkaW5nIHRvIGNvbnRpZ3VvdXMgcnVsZSIgZG8KLSAgICAgIHBvc3Rlci5jYWxsCi0gICAgZW5kCi0gIGVuZAotZW5kCmRpZmYgLS1naXQgYS9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL2NvdmVyYWdlX2FuYWx5c2VyX3NwZWMucmIgYi9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL2NvdmVyYWdlX2FuYWx5c2VyX3NwZWMucmIKZGVsZXRlZCBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IGY1M2M0YTMuLjAwMDAwMDAKLS0tIGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9jb3ZlcmFnZV9hbmFseXNlcl9zcGVjLnJiCisrKyAvZGV2L251bGwKQEAgLTEsMTIwICswLDAgQEAKLSMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCi0KLXJlcXVpcmUgInNwZWNfaGVscGVyIgotcmVxdWlyZSAiY292ZXJhZ2VfcmVwb3J0ZXIvY292ZXJhZ2VfYW5hbHlzZXIiCi0KLVJTcGVjLmRlc2NyaWJlIENvdmVyYWdlUmVwb3J0ZXI6OkNvdmVyYWdlQW5hbHlzZXIgZG8KLSAgZGVzY3JpYmUgIiNjYWxsIiBkbwotICAgIGNvbnRleHQgIndoZW4gZGlmZiBpcyBlbXB0eSIgZG8KLSAgICAgIGl0ICJyZXR1cm5zIDEwMCUgY292ZXJhZ2Ugd2l0aCB6ZXJvIHRvdGFscyIgZG8KLSAgICAgICAgYW5hbHlzZXIgPSBkZXNjcmliZWRfY2xhc3MubmV3KGNvdmVyYWdlOiB7fSwgZGlmZjoge30pCi0gICAgICAgIHJlc3VsdCA9IGFuYWx5c2VyLmNhbGwKLQotICAgICAgICBleHBlY3QocmVzdWx0LnRvdGFsX2NoYW5nZWQpLnRvIGVxKDApCi0gICAgICAgIGV4cGVjdChyZXN1bHQudG90YWxfY292ZXJlZCkudG8gZXEoMCkKLSAgICAgICAgZXhwZWN0KHJlc3VsdC5kaWZmX2NvdmVyYWdlKS50byBlcSgxMDAuMCkKLSAgICAgICAgZXhwZWN0KHJlc3VsdC51bmNvdmVyZWRfYnlfZmlsZSkudG8gYmVfZW1wdHkKLSAgICAgIGVuZAotICAgIGVuZAotCi0gICAgY29udGV4dCAid2hlbiBhIGZpbGUgaGFzIG5pbCBsaW5lcyBpbiBkaWZmIiBkbwotICAgICAgaXQgImlnbm9yZXMgdGhhdCBmaWxlIiBkbwotICAgICAgICBjb3ZlcmFnZSA9IHsgImxpYi9hLnJiIiA9PiBbMV0gfQotICAgICAgICBkaWZmID0geyAibGliL2EucmIiID0+IG5pbCB9Ci0KLSAgICAgICAgcmVzdWx0ID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhjb3ZlcmFnZTogY292ZXJhZ2UsIGRpZmY6IGRpZmYpLmNhbGwKLQotICAgICAgICBleHBlY3QocmVzdWx0LnRvdGFsX2NoYW5nZWQpLnRvIGVxKDApCi0gICAgICAgIGV4cGVjdChyZXN1bHQudG90YWxfY292ZXJlZCkudG8gZXEoMCkKLSAgICAgICAgZXhwZWN0KHJlc3VsdC5kaWZmX2NvdmVyYWdlKS50byBlcSgxMDAuMCkKLSAgICAgICAgZXhwZWN0KHJlc3VsdC51bmNvdmVyZWRfYnlfZmlsZSkudG8gYmVfZW1wdHkKLSAgICAgIGVuZAotICAgIGVuZAotCi0gICAgY29udGV4dCAid2l0aCBwYXJ0aWFsIGNvdmVyYWdlIGluIGEgc2luZ2xlIGZpbGUiIGRvCi0gICAgICBpdCAiY29tcHV0ZXMgbWV0cmljcyBhbmQgbGlzdHMgdW5jb3ZlcmVkIGxpbmVzIiBkbwotICAgICAgICBjb3ZlcmFnZSA9IHsgImxpYi9mb28ucmIiID0+IFsxMCwgMTIsIDEzXSB9Ci0gICAgICAgIGRpZmYgPSB7ICJsaWIvZm9vLnJiIiA9PiBbMTAsIDExLCAxMl0gfQotCi0gICAgICAgIHJlc3VsdCA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoY292ZXJhZ2U6IGNvdmVyYWdlLCBkaWZmOiBkaWZmKS5jYWxsCi0KLSAgICAgICAgZXhwZWN0KHJlc3VsdC50b3RhbF9jaGFuZ2VkKS50byBlcSgzKQotICAgICAgICBleHBlY3QocmVzdWx0LnRvdGFsX2NvdmVyZWQpLnRvIGVxKDIpCi0gICAgICAgIGV4cGVjdChyZXN1bHQuZGlmZl9jb3ZlcmFnZSkudG8gZXEoNjYuNjcpCi0gICAgICAgIGV4cGVjdChyZXN1bHQudW5jb3ZlcmVkX2J5X2ZpbGUua2V5cykudG8gY29udGFpbl9leGFjdGx5KCJsaWIvZm9vLnJiIikKLSAgICAgICAgZXhwZWN0KHJlc3VsdC51bmNvdmVyZWRfYnlfZmlsZVsibGliL2Zvby5yYiJdKS50byBjb250YWluX2V4YWN0bHkoMTEpCi0gICAgICBlbmQKLSAgICBlbmQKLQotICAgIGNvbnRleHQgIndoZW4gY292ZXJhZ2UgY29udGFpbnMgbGluZXMgbm90IGluIGRpZmYiIGRvCi0gICAgICBpdCAiaWdub3JlcyBleHRyYSBjb3ZlcmVkIGxpbmVzIiBkbwotICAgICAgICBjb3ZlcmFnZSA9IHsgImxpYi9iYXIucmIiID0+IFsxLCAyLCAzLCA0XSB9Ci0gICAgICAgIGRpZmYgPSB7ICJsaWIvYmFyLnJiIiA9PiBbMiwgM10gfQotCi0gICAgICAgIHJlc3VsdCA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoY292ZXJhZ2U6IGNvdmVyYWdlLCBkaWZmOiBkaWZmKS5jYWxsCi0KLSAgICAgICAgZXhwZWN0KHJlc3VsdC50b3RhbF9jaGFuZ2VkKS50byBlcSgyKQotICAgICAgICBleHBlY3QocmVzdWx0LnRvdGFsX2NvdmVyZWQpLnRvIGVxKDIpCi0gICAgICAgIGV4cGVjdChyZXN1bHQuZGlmZl9jb3ZlcmFnZSkudG8gZXEoMTAwLjApCi0gICAgICAgIGV4cGVjdChyZXN1bHQudW5jb3ZlcmVkX2J5X2ZpbGUpLnRvIGJlX2VtcHR5Ci0gICAgICBlbmQKLSAgICBlbmQKLQotICAgIGNvbnRleHQgIndoZW4gdGhlIGZpbGUgaW4gZGlmZiBoYXMgbm8gY292ZXJhZ2UgZW50cnkiIGRvCi0gICAgICBpdCAidHJlYXRzIGFsbCBkaWZmIGxpbmVzIGFzIHVuY292ZXJlZCIgZG8KLSAgICAgICAgY292ZXJhZ2UgPSB7fQotICAgICAgICBkaWZmID0geyAibGliL21pc3NpbmcucmIiID0+IFs1LCA2LCA3XSB9Ci0KLSAgICAgICAgcmVzdWx0ID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhjb3ZlcmFnZTogY292ZXJhZ2UsIGRpZmY6IGRpZmYpLmNhbGwKLQotICAgICAgICBleHBlY3QocmVzdWx0LnRvdGFsX2NoYW5nZWQpLnRvIGVxKDMpCi0gICAgICAgIGV4cGVjdChyZXN1bHQudG90YWxfY292ZXJlZCkudG8gZXEoMCkKLSAgICAgICAgZXhwZWN0KHJlc3VsdC5kaWZmX2NvdmVyYWdlKS50byBlcSgwLjApCi0gICAgICAgIGV4cGVjdChyZXN1bHQudW5jb3ZlcmVkX2J5X2ZpbGVbImxpYi9taXNzaW5nLnJiIl0pLnRvIGNvbnRhaW5fZXhhY3RseSg1LCA2LCA3KQotICAgICAgZW5kCi0gICAgZW5kCi0KLSAgICBjb250ZXh0ICJ3aXRoIG11bHRpcGxlIGZpbGVzIGFuZCBtaXhlZCBjb3ZlcmFnZSIgZG8KLSAgICAgIGl0ICJhZ2dyZWdhdGVzIGNvcnJlY3RseSBhbmQgb25seSBsaXN0cyBmaWxlcyB3aXRoIG1pc3NlcyIgZG8KLSAgICAgICAgY292ZXJhZ2UgPSB7Ci0gICAgICAgICAgImFwcC9tb2RlbHMvdXNlci5yYiIgICAgICAgICAgICAgICAgICA9PiBbMTAsIDExLCAxMiwgMTVdLAotICAgICAgICAgICJhcHAvY29udHJvbGxlcnMvdXNlcnNfY29udHJvbGxlci5yYiIgPT4gWzIsIDNdLAotICAgICAgICAgICJsaWIvdXRpbC5yYiIgICAgICAgICAgICAgICAgICAgICAgICAgPT4gWzEwMF0KLSAgICAgICAgfQotICAgICAgICBkaWZmID0gewotICAgICAgICAgICJhcHAvbW9kZWxzL3VzZXIucmIiICAgICAgICAgICAgICAgICAgPT4gWzEwLCAxMSwgMTMsIDE1XSwKLSAgICAgICAgICAiYXBwL2NvbnRyb2xsZXJzL3VzZXJzX2NvbnRyb2xsZXIucmIiID0+IFsxLCAyLCAzLCA0XSwKLSAgICAgICAgICAibGliL3V0aWwucmIiICAgICAgICAgICAgICAgICAgICAgICAgID0+IFtdLAotICAgICAgICAgICJsaWIvaWdub3JlZC5yYiIgICAgICAgICAgICAgICAgICAgICAgPT4gbmlsCi0gICAgICAgIH0KLQotICAgICAgICAjIHRvdGFsczogdXNlci5yYiA0IGxpbmVzLCBjb250cm9sbGVyIDQgbGluZXMgPT4gOCB0b3RhbAotICAgICAgICAjIGNvdmVyZWQ6IHVzZXIucmIgaW50ZXJzZWN0IGRpZmYgPT4gWzEwLDExLDE1XSA9IDMKLSAgICAgICAgIyBjb250cm9sbGVyIGludGVyc2VjdCA9PiBbMiwzXSA9IDIgID0+IHRvdGFsIGNvdmVyZWQgNQotICAgICAgICAjIHBlcmNlbnQgPSA1LzggKiAxMDAgPSA2Mi41Ci0gICAgICAgIHJlc3VsdCA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoY292ZXJhZ2U6IGNvdmVyYWdlLCBkaWZmOiBkaWZmKS5jYWxsCi0KLSAgICAgICAgZXhwZWN0KHJlc3VsdC50b3RhbF9jaGFuZ2VkKS50byBlcSg4KQotICAgICAgICBleHBlY3QocmVzdWx0LnRvdGFsX2NvdmVyZWQpLnRvIGVxKDUpCi0gICAgICAgIGV4cGVjdChyZXN1bHQuZGlmZl9jb3ZlcmFnZSkudG8gZXEoNjIuNSkKLSAgICAgICAgZXhwZWN0KHJlc3VsdC51bmNvdmVyZWRfYnlfZmlsZS5rZXlzKS50byBjb250YWluX2V4YWN0bHkoCi0gICAgICAgICAgImFwcC9tb2RlbHMvdXNlci5yYiIsCi0gICAgICAgICAgImFwcC9jb250cm9sbGVycy91c2Vyc19jb250cm9sbGVyLnJiIgotICAgICAgICApCi0gICAgICAgIGV4cGVjdChyZXN1bHQudW5jb3ZlcmVkX2J5X2ZpbGVbImFwcC9tb2RlbHMvdXNlci5yYiJdKS50byBjb250YWluX2V4YWN0bHkoMTMpCi0gICAgICAgIGV4cGVjdChyZXN1bHQudW5jb3ZlcmVkX2J5X2ZpbGVbImFwcC9jb250cm9sbGVycy91c2Vyc19jb250cm9sbGVyLnJiIl0pLnRvIGNvbnRhaW5fZXhhY3RseSgxLCA0KQotICAgICAgZW5kCi0gICAgZW5kCi0KLSAgICBjb250ZXh0ICJ3aGVuIHJvdW5kaW5nIGNvdmVyYWdlIHBlcmNlbnRhZ2UiIGRvCi0gICAgICBpdCAicm91bmRzIHRvIHR3byBkZWNpbWFsIHBsYWNlcyIgZG8KLSAgICAgICAgY292ZXJhZ2UgPSB7ICJsaWIvcm91bmQucmIiID0+IFsxXSB9Ci0gICAgICAgIGRpZmYgPSB7ICJsaWIvcm91bmQucmIiID0+IFsxLCAyLCAzXSB9ICMgMSAvIDMgPSAzMy4zMzMzIC0+IDMzLjMzCi0KLSAgICAgICAgcmVzdWx0ID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhjb3ZlcmFnZTogY292ZXJhZ2UsIGRpZmY6IGRpZmYpLmNhbGwKLQotICAgICAgICBleHBlY3QocmVzdWx0LmRpZmZfY292ZXJhZ2UpLnRvIGVxKDMzLjMzKQotICAgICAgZW5kCi0gICAgZW5kCi0gIGVuZAotZW5kCmRpZmYgLS1naXQgYS9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL2NvdmVyYWdlX3BhcnNlcl9zcGVjLnJiIGIvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9jb3ZlcmFnZV9wYXJzZXJfc3BlYy5yYgpkZWxldGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggOWY0ZWZkYS4uMDAwMDAwMAotLS0gYS9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL2NvdmVyYWdlX3BhcnNlcl9zcGVjLnJiCisrKyAvZGV2L251bGwKQEAgLTEsMTYzICswLDAgQEAKLSMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCi0KLXJlcXVpcmUgInNwZWNfaGVscGVyIgotcmVxdWlyZSAiY292ZXJhZ2VfcmVwb3J0ZXIvY292ZXJhZ2VfcGFyc2VyIgotcmVxdWlyZSAidGVtcGZpbGUiCi0KLVJTcGVjLmRlc2NyaWJlIENvdmVyYWdlUmVwb3J0ZXI6OkNvdmVyYWdlUGFyc2VyIGRvCi0gIGRlZiB3cml0ZV9yZXN1bHRzZXQoanNvbl9vYmopCi0gICAgZmlsZSA9IFRlbXBmaWxlLm5ldygiY292ZXJhZ2VfcmVzdWx0c2V0IikKLSAgICBmaWxlLndyaXRlKEpTT04uZHVtcChqc29uX29iaikpCi0gICAgZmlsZS5mbHVzaAotICAgIGZpbGUKLSAgZW5kCi0KLSAgY29udGV4dCAid2hlbiB0aGUgcmVzdWx0c2V0IGZpbGUgZG9lcyBub3QgZXhpc3QiIGRvCi0gICAgaXQgInJldHVybnMgYW4gZW1wdHkgaGFzaCIgZG8KLSAgICAgIHBhcnNlciA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoIm5vbmV4aXN0ZW50L2ZpbGUvcGF0aC5qc29uIikKLSAgICAgIGV4cGVjdChwYXJzZXIuY2FsbCkudG8gZXEoe30pCi0gICAgZW5kCi0gIGVuZAotCi0gIGNvbnRleHQgIndoZW4gdGhlIEpTT04gaXMgaW52YWxpZCIgZG8KLSAgICBpdCAicmV0dXJucyBhbiBlbXB0eSBoYXNoIiBkbwotICAgICAgZmlsZSA9IFRlbXBmaWxlLm5ldygiY292ZXJhZ2VfcmVzdWx0c2V0IikKLSAgICAgIGZpbGUud3JpdGUoInsgaW52YWxpZCBqc29uIikKLSAgICAgIGZpbGUuZmx1c2gKLQotICAgICAgcGFyc2VyID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhmaWxlLnBhdGgpCi0gICAgICBleHBlY3QocGFyc2VyLmNhbGwpLnRvIGVxKHt9KQotICAgIGVuZAotICBlbmQKLQotICBjb250ZXh0ICJ3aGVuIHRoZSB0b3AtbGV2ZWwgSlNPTiBpcyBub3QgYSBIYXNoIiBkbwotICAgIGl0ICJyZXR1cm5zIGFuIGVtcHR5IGhhc2giIGRvCi0gICAgICBmaWxlID0gd3JpdGVfcmVzdWx0c2V0KCV3W2FycmF5IG5vdCBoYXNoXSkKLSAgICAgIHBhcnNlciA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoZmlsZS5wYXRoKQotICAgICAgZXhwZWN0KHBhcnNlci5jYWxsKS50byBlcSh7fSkKLSAgICBlbmQKLSAgZW5kCi0KLSAgY29udGV4dCAid2l0aCBtaXhlZCBsZWdhY3kgYW5kIG5ld2VyIHNjaGVtYSBlbnRyaWVzIiBkbwotICAgIGxldCg6anNvbikgZG8KLSAgICAgIHsKLSAgICAgICAgIyBMZWdhY3kgc3R5bGUgZW50cnksIHVzaW5nICJjb3ZlcmFnZSIgaGFzaCBkaXJlY3RseQotICAgICAgICAiUlNwZWMiICAgPT4gewotICAgICAgICAgICJjb3ZlcmFnZSIgPT4gewotICAgICAgICAgICAgIyBBcnJheSBzdHlsZSAoaW5kZXhlcyAtPiBsaW5lIG51bWJlcnMpCi0gICAgICAgICAgICAibGliL2Zvby5yYiIgID0+IFtuaWwsIDEsIDAsIDJdLCAjIGxpbmVzIDIgJiA0IGNvdmVyZWQKLSAgICAgICAgICAgICMgSGFzaCBzdHlsZSAoZXhwbGljaXQgc3RyaW5nIGtleXMgbWFwcGluZyB0byBjb3VudHMpCi0gICAgICAgICAgICAibGliL2Jhci5yYiIgID0+IHsgIjEiID0+IDEsICIyIiA9PiAwLCAiNSIgPT4gMyB9LCAjIGxpbmVzIDEgJiA1IGNvdmVyZWQKLSAgICAgICAgICAgICMgSGFzaCB3aXRoICJsaW5lcyIgYXJyYXkgKFNpbXBsZUNvdiBzb21ldGltZXMgbmVzdHMpCi0gICAgICAgICAgICAibGliL3F1eC5yYiIgID0+IHsgImxpbmVzIiA9PiBbbmlsLCAwLCA1XSB9LCAjIGxpbmUgMyBjb3ZlcmVkCi0gICAgICAgICAgICAjIFB1cmUgaGFzaCBzdHlsZSAobm8gImxpbmVzIiBrZXkpCi0gICAgICAgICAgICAibGliL3F1dXgucmIiID0+IHsgIjEiID0+IDAsICIyIiA9PiAyLCAiNCIgPT4gIjMiIH0gIyBsaW5lcyAyICYgNCBjb3ZlcmVkCi0gICAgICAgICAgfQotICAgICAgICB9LAotICAgICAgICAjIE5ld2VyIHN0eWxlIGVudHJ5LCB1c2luZyAiZmlsZXMiIGFycmF5Ci0gICAgICAgICJPdGhlciIgICA9PiB7Ci0gICAgICAgICAgImZpbGVzIiA9PiBbCi0gICAgICAgICAgICB7ICJmaWxlbmFtZSIgPT4gImxpYi9iYXoucmIiLCAiY292ZXJhZ2UiID0+IFtuaWwsIDAsIDEsIDFdIH0sICMgbGluZXMgMyAmIDQgY292ZXJlZAotICAgICAgICAgICAgeyAiZmlsZW5hbWUiID0+ICJsaWIvc2tpcC5yYiIsICJjb3ZlcmFnZSIgPT4gIm5vdC1hbi1hcnJheSIgfSwgIyBpZ25vcmVkCi0gICAgICAgICAgICB7ICJmaWxlbmFtZSIgPT4gImxpYi9mb28ucmIiLCAiY292ZXJhZ2UiID0+IFtuaWwsIDAsIDFdIH0gICAgICAjIGFkZHMgbGluZSAzIHRvIGxpYi9mb28ucmIKLSAgICAgICAgICBdCi0gICAgICAgIH0sCi0gICAgICAgICMgQW4gZW50cnkgdGhhdCBpcyBub3QgYSBoYXNoIChzaG91bGQgYmUgc2tpcHBlZCBncmFjZWZ1bGx5KQotICAgICAgICAiR2FyYmFnZSIgPT4gIm5vdCBhIGhhc2giCi0gICAgICB9Ci0gICAgZW5kCi0KLSAgICBpdCAicGFyc2VzIGFuZCBhZ2dyZWdhdGVzIGNvdmVyZWQgbGluZXMgYWNyb3NzIHNjaGVtYXMgd2l0aG91dCBkdXBsaWNhdGVzIiBkbwotICAgICAgZmlsZSA9IHdyaXRlX3Jlc3VsdHNldChqc29uKQotICAgICAgcGFyc2VyID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhmaWxlLnBhdGgpCi0KLSAgICAgIHJlc3VsdCA9IHBhcnNlci5jYWxsCi0KLSAgICAgIGV4cGVjdChyZXN1bHQua2V5cykudG8gbWF0Y2hfYXJyYXkoCi0gICAgICAgICV3WwotICAgICAgICAgIGxpYi9mb28ucmIKLSAgICAgICAgICBsaWIvYmFyLnJiCi0gICAgICAgICAgbGliL3F1eC5yYgotICAgICAgICAgIGxpYi9xdXV4LnJiCi0gICAgICAgICAgbGliL2Jhei5yYgotICAgICAgICBdCi0gICAgICApCi0KLSAgICAgICMgbGliL2Zvby5yYjogZmlyc3QgZW50cnkgPT4gbGluZXMgMiAmIDQ7IHNlY29uZCBlbnRyeSBhZGRzIGxpbmUgMwotICAgICAgZXhwZWN0KHJlc3VsdFsibGliL2Zvby5yYiJdKS50byBjb250YWluX2V4YWN0bHkoMiwgMywgNCkKLSAgICAgIGV4cGVjdChyZXN1bHRbImxpYi9iYXIucmIiXSkudG8gY29udGFpbl9leGFjdGx5KDEsIDUpCi0gICAgICBleHBlY3QocmVzdWx0WyJsaWIvcXV4LnJiIl0pLnRvIGNvbnRhaW5fZXhhY3RseSgzKQotICAgICAgZXhwZWN0KHJlc3VsdFsibGliL3F1dXgucmIiXSkudG8gY29udGFpbl9leGFjdGx5KDIsIDQpCi0gICAgICBleHBlY3QocmVzdWx0WyJsaWIvYmF6LnJiIl0pLnRvIGNvbnRhaW5fZXhhY3RseSgzLCA0KQotICAgIGVuZAotICBlbmQKLQotICBjb250ZXh0ICJ3aGVuIG11bHRpcGxlIGVudHJpZXMgcHJvdmlkZSBvdmVybGFwcGluZyBjb3ZlcmFnZSBmb3IgdGhlIHNhbWUgZmlsZSIgZG8KLSAgICBsZXQoOmpzb24pIGRvCi0gICAgICB7Ci0gICAgICAgICJBIiA9PiB7Ci0gICAgICAgICAgImNvdmVyYWdlIiA9PiB7Ci0gICAgICAgICAgICAibGliL2R1cC5yYiIgPT4gW25pbCwgMSwgMCwgMl0gIyBsaW5lcyAyICYgNAotICAgICAgICAgIH0KLSAgICAgICAgfSwKLSAgICAgICAgIkIiID0+IHsKLSAgICAgICAgICAiZmlsZXMiID0+IFsKLSAgICAgICAgICAgIHsgImZpbGVuYW1lIiA9PiAibGliL2R1cC5yYiIsICJjb3ZlcmFnZSIgPT4gW25pbCwgMCwgMV0gfSAjIGxpbmUgMwotICAgICAgICAgIF0KLSAgICAgICAgfSwKLSAgICAgICAgIkMiID0+IHsKLSAgICAgICAgICAiY292ZXJhZ2UiID0+IHsKLSAgICAgICAgICAgICJsaWIvZHVwLnJiIiA9PiB7ICI2IiA9PiAxLCAiMiIgPT4gNSB9ICMgbGluZXMgNiAmIDIgKDIgYWxyZWFkeSBwcmVzZW50KQotICAgICAgICAgIH0KLSAgICAgICAgfQotICAgICAgfQotICAgIGVuZAotCi0gICAgaXQgInVuaW9ucyBsaW5lIG51bWJlcnMgd2l0aG91dCBkdXBsaWNhdGVzIiBkbwotICAgICAgZmlsZSA9IHdyaXRlX3Jlc3VsdHNldChqc29uKQotICAgICAgcGFyc2VyID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhmaWxlLnBhdGgpCi0gICAgICByZXN1bHQgPSBwYXJzZXIuY2FsbAotCi0gICAgICBleHBlY3QocmVzdWx0WyJsaWIvZHVwLnJiIl0pLnRvIGNvbnRhaW5fZXhhY3RseSgyLCAzLCA0LCA2KQotICAgIGVuZAotICBlbmQKLQotICBjb250ZXh0ICJ3aGVuIGFuIGVudHJ5IGhhcyBhbiBlbXB0eSBvciBpbnZhbGlkIGNvdmVyYWdlIHNlY3Rpb24iIGRvCi0gICAgbGV0KDpqc29uKSBkbwotICAgICAgewotICAgICAgICAiRW1wdHlDb3ZlcmFnZSIgPT4geyAiY292ZXJhZ2UiID0+IHt9IH0sCi0gICAgICAgICJOaWxDb3ZlcmFnZSIgICA9PiB7ICJjb3ZlcmFnZSIgPT4gbmlsIH0sCi0gICAgICAgICJCYWRGaWxlcyIgICAgICA9PiB7ICJmaWxlcyIgPT4gW3sgImZpbGVuYW1lIiA9PiAieC5yYiIgfV0gfSwgIyBtaXNzaW5nIGFycmF5Ci0gICAgICAgICJOb25BcnJheUZpbGVzIiA9PiB7ICJmaWxlcyIgPT4gIm5vdC1hbi1hcnJheSIgfQotICAgICAgfQotICAgIGVuZAotCi0gICAgaXQgInJldHVybnMgYW4gZW1wdHkgaGFzaCIgZG8KLSAgICAgIGZpbGUgPSB3cml0ZV9yZXN1bHRzZXQoanNvbikKLSAgICAgIHBhcnNlciA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoZmlsZS5wYXRoKQotICAgICAgZXhwZWN0KHBhcnNlci5jYWxsKS50byBlcSh7fSkKLSAgICBlbmQKLSAgZW5kCi0KLSAgY29udGV4dCAid2l0aCB6ZXJvIC8gbmlsIC8gbm9uLXBvc2l0aXZlIGNvdW50cyBpbiBhcnJheXMgYW5kIGhhc2hlcyIgZG8KLSAgICBsZXQoOmpzb24pIGRvCi0gICAgICB7Ci0gICAgICAgICJFeGFtcGxlIiA9PiB7Ci0gICAgICAgICAgImNvdmVyYWdlIiA9PiB7Ci0gICAgICAgICAgICAibGliL2FycmF5X3N0eWxlLnJiIiA9PiBbMCwgbmlsLCAxLCAiMiIsIC0xXSwgIyBsaW5lcyAzICYgNCBjb3ZlcmVkICgxLCAiMiIudG9faSA9PiAyKQotICAgICAgICAgICAgImxpYi9oYXNoX3N0eWxlLnJiIiAgPT4geyAiMSIgPT4gMCwgIjIiID0+ICIwIiwgIjMiID0+IG5pbCwgIjQiID0+IC01LCAiNSIgPT4gMSB9ICMgbGluZSA1Ci0gICAgICAgICAgfQotICAgICAgICB9Ci0gICAgICB9Ci0gICAgZW5kCi0KLSAgICBpdCAib25seSBpbmNsdWRlcyBsaW5lcyB3aXRoIHBvc2l0aXZlIGNvdW50cyIgZG8KLSAgICAgIGZpbGUgPSB3cml0ZV9yZXN1bHRzZXQoanNvbikKLSAgICAgIHBhcnNlciA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoZmlsZS5wYXRoKQotICAgICAgcmVzdWx0ID0gcGFyc2VyLmNhbGwKLQotICAgICAgZXhwZWN0KHJlc3VsdFsibGliL2FycmF5X3N0eWxlLnJiIl0pLnRvIGNvbnRhaW5fZXhhY3RseSgzLCA0KQotICAgICAgZXhwZWN0KHJlc3VsdFsibGliL2hhc2hfc3R5bGUucmIiXSkudG8gY29udGFpbl9leGFjdGx5KDUpCi0gICAgZW5kCi0gIGVuZAotZW5kCmRpZmYgLS1naXQgYS9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL2RpZmZfcGFyc2VyX3NwZWMucmIgYi9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL2RpZmZfcGFyc2VyX3NwZWMucmIKZGVsZXRlZCBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDA4NmNhNzcuLjAwMDAwMDAKLS0tIGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9kaWZmX3BhcnNlcl9zcGVjLnJiCisrKyAvZGV2L251bGwKQEAgLTEsODUgKzAsMCBAQAotIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKLQotcmVxdWlyZSAic3BlY19oZWxwZXIiCi1yZXF1aXJlICJjb3ZlcmFnZV9yZXBvcnRlci9kaWZmX3BhcnNlciIKLQotUlNwZWMuZGVzY3JpYmUgQ292ZXJhZ2VSZXBvcnRlcjo6RGlmZlBhcnNlciBkbwotICBzdWJqZWN0KDpwYXJzZXIpIHsgZGVzY3JpYmVkX2NsYXNzLm5ldygib3JpZ2luL21haW4iKSB9Ci0KLSAgZGVzY3JpYmUgIiNmZXRjaF9kaWZmIiBkbwotICAgIGNvbnRleHQgIndoZW4gZ2l0IGRpZmYgY29tbWFuZCBmYWlscyAocmV0dXJucyBuaWwpIiBkbwotICAgICAgaXQgInJldHVybnMgYW4gZW1wdHkgaGFzaCIgZG8KLSAgICAgICAgYWxsb3cocGFyc2VyKS50byByZWNlaXZlKDpydW5fZ2l0X2RpZmYpLmFuZF9yZXR1cm4obmlsKQotICAgICAgICBleHBlY3QocGFyc2VyLmNhbGwpLnRvIGVxKHt9KQotICAgICAgZW5kCi0gICAgZW5kCi0KLSAgICBjb250ZXh0ICJ3aGVuIGdpdCBkaWZmIGNvbW1hbmQgcmFpc2VzIGFuIGV4Y2VwdGlvbiIgZG8KLSAgICAgIGl0ICJyZXR1cm5zIGFuIGVtcHR5IGhhc2giIGRvCi0gICAgICAgIGFsbG93KHBhcnNlcikudG8gcmVjZWl2ZSg6cnVuX2dpdF9kaWZmKS5hbmRfcmFpc2UoImJvb20iKQotICAgICAgICBleHBlY3QocGFyc2VyLmNhbGwpLnRvIGVxKHt9KQotICAgICAgZW5kCi0gICAgZW5kCi0KLSAgICBjb250ZXh0ICJ3aGVuIGdpdCBkaWZmIGNvbW1hbmQgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmciIGRvCi0gICAgICBpdCAicmV0dXJucyBhbiBlbXB0eSBoYXNoIiBkbwotICAgICAgICBhbGxvdyhwYXJzZXIpLnRvIHJlY2VpdmUoOnJ1bl9naXRfZGlmZikuYW5kX3JldHVybigiIikKLSAgICAgICAgZXhwZWN0KHBhcnNlci5jYWxsKS50byBlcSh7fSkKLSAgICAgIGVuZAotICAgIGVuZAotCi0gICAgY29udGV4dCAid2l0aCBhIGRpZmYgY29udGFpbmluZyBtdWx0aXBsZSBmaWxlcywgaHVua3MsIGFkZGl0aW9ucyBhbmQgZGVsZXRpb25zIiBkbwotICAgICAgbGV0KDpkaWZmX3RleHQpIGRvCi0gICAgICAgIDw8fkRJRkYKLSAgICAgICAgICBkaWZmIC0tZ2l0IGEvbGliL3NhbXBsZS5yYiBiL2xpYi9zYW1wbGUucmIKLSAgICAgICAgICBpbmRleCAwMDAwMDAxLi4wMDAwMDAyIDEwMDY0NAotICAgICAgICAgIC0tLSBhL2xpYi9zYW1wbGUucmIKLSAgICAgICAgICArKysgYi9saWIvc2FtcGxlLnJiCi0gICAgICAgICAgQEAgLTUgKzUgQEAKLSAgICAgICAgICArZmlyc3QgYWRkaXRpb24KLSAgICAgICAgICBAQCAtMTAsMiArMTEsNCBAQCBzb21lIGNvbnRleHQgbWF5YmUKLSAgICAgICAgICAtbGluZSByZW1vdmVkIDEKLSAgICAgICAgICAtbGluZSByZW1vdmVkIDIKLSAgICAgICAgICArYWRkMQotICAgICAgICAgICthZGQyCi0gICAgICAgICAgK2FkZDMKLSAgICAgICAgICArYWRkNAotICAgICAgICAgIGRpZmYgLS1naXQgYS9hcHAvbW9kZWxzL3VzZXIucmIgYi9hcHAvbW9kZWxzL3VzZXIucmIKLSAgICAgICAgICBpbmRleCAwMDAwMDAzLi4wMDAwMDA0IDEwMDY0NAotICAgICAgICAgIC0tLSBhL2FwcC9tb2RlbHMvdXNlci5yYgotICAgICAgICAgICsrKyBiL2FwcC9tb2RlbHMvdXNlci5yYgotICAgICAgICAgIEBAIC0xLDAgKzEsMiBAQAotICAgICAgICAgICtsaW5lIG9uZQotICAgICAgICAgICtsaW5lIHR3bwotICAgICAgICAgIGRpZmYgLS1naXQgYS9vYnNvbGV0ZS50eHQgYi9vYnNvbGV0ZS50eHQKLSAgICAgICAgICBpbmRleCAwMDAwMDA1Li4wMDAwMDA2IDEwMDY0NAotICAgICAgICAgIC0tLSBhL29ic29sZXRlLnR4dAotICAgICAgICAgICsrKyAvZGV2L251bGwKLSAgICAgICAgICBAQCAtMSwyICswLDAgQEAKLSAgICAgICAgICAtbGluZSBhCi0gICAgICAgICAgLWxpbmUgYgotICAgICAgICBESUZGCi0gICAgICBlbmQKLQotICAgICAgaXQgInBhcnNlcyBhbmQgcmV0dXJucyBhIGhhc2ggb2YgYWRkZWQgbGluZSBudW1iZXJzIHBlciBmaWxlLCBpZ25vcmluZyBkZWxldGVkIGZpbGVzIiBkbwotICAgICAgICBhbGxvdyhwYXJzZXIpLnRvIHJlY2VpdmUoOnJ1bl9naXRfZGlmZikuYW5kX3JldHVybihkaWZmX3RleHQpCi0KLSAgICAgICAgcmVzdWx0ID0gcGFyc2VyLmNhbGwKLQotICAgICAgICBleHBlY3QocmVzdWx0KS50byBlcSgKLSAgICAgICAgICAibGliL3NhbXBsZS5yYiIgICAgICA9PiBbNSwgMTEsIDEyLCAxMywgMTRdLAotICAgICAgICAgICJhcHAvbW9kZWxzL3VzZXIucmIiID0+IFsxLCAyXQotICAgICAgICApCi0KLSAgICAgICAgZXhwZWN0KHJlc3VsdCkubm90X3RvIGhhdmVfa2V5KCJvYnNvbGV0ZS50eHQiKQotICAgICAgZW5kCi0KLSAgICAgIGl0ICJkb2VzIG5vdCBpbmNsdWRlIHJlbW92ZWQgbGluZXMiIGRvCi0gICAgICAgIGFsbG93KHBhcnNlcikudG8gcmVjZWl2ZSg6cnVuX2dpdF9kaWZmKS5hbmRfcmV0dXJuKGRpZmZfdGV4dCkKLSAgICAgICAgcmVzdWx0ID0gcGFyc2VyLmNhbGwKLSAgICAgICAgIyBFbnN1cmUgbm8gbmVnYXRpdmUgc2lkZSBsaW5lIG51bWJlcnMgKGUuZy4sIDEwIGZyb20gLTEwLDIgZXRjLikKLSAgICAgICAgZXhwZWN0KHJlc3VsdC52YWx1ZXMuZmxhdHRlbikubm90X3RvIGluY2x1ZGUoMTApCi0gICAgICBlbmQKLSAgICBlbmQKLSAgZW5kCi1lbmQKZGlmZiAtLWdpdCBhL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvZ2xvYmFsX2NvbW1lbnRfZmFjdG9yeV9zcGVjLnJiIGIvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9nbG9iYWxfY29tbWVudF9mYWN0b3J5X3NwZWMucmIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uNGQ2N2M2OQotLS0gL2Rldi9udWxsCisrKyBiL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvZ2xvYmFsX2NvbW1lbnRfZmFjdG9yeV9zcGVjLnJiCkBAIC0wLDAgKzEsNDcgQEAKKyMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCisKK3JlcXVpcmUgInNwZWNfaGVscGVyIgorCitSU3BlYy5kZXNjcmliZSBDb3ZlcmFnZVJlcG9ydGVyOjpHbG9iYWxDb21tZW50RmFjdG9yeSBkbworICBsZXQoOmNvbW1pdF9zaGEpIHsgImFiYzEyMyIgfQorICBsZXQoOmZhY3RvcnkpIHsgZGVzY3JpYmVkX2NsYXNzLm5ldyhjb21taXRfc2hhOiBjb21taXRfc2hhKSB9CisKKyAgZGVzY3JpYmUgIiNjYWxsIiBkbworICAgIGl0ICJyZXR1cm5zIGEgR2xvYmFsQ29tbWVudCBvYmplY3QiIGRvCisgICAgICBnbG9iYWxfY29tbWVudCA9IGZhY3RvcnkuY2FsbAorCisgICAgICBleHBlY3QoZ2xvYmFsX2NvbW1lbnQpLnRvIGJlX2EoQ292ZXJhZ2VSZXBvcnRlcjo6R2xvYmFsQ29tbWVudCkKKyAgICAgIGV4cGVjdChnbG9iYWxfY29tbWVudC5jb21taXRfc2hhKS50byBlcShjb21taXRfc2hhKQorICAgIGVuZAorCisgICAgaXQgInNldHMgdGhlIGNvdmVyYWdlIHBlcmNlbnRhZ2UiIGRvCisgICAgICBnbG9iYWxfY29tbWVudCA9IGZhY3RvcnkuY2FsbAorCisgICAgICBleHBlY3QoZ2xvYmFsX2NvbW1lbnQuY292ZXJhZ2VfcGVyY2VudGFnZSkudG8gZXEoIk4vQSIpCisgICAgZW5kCisKKyAgICBpdCAiaW5jbHVkZXMgcHJvcGVyIGJvZHkgY29udGVudCIgZG8KKyAgICAgIGdsb2JhbF9jb21tZW50ID0gZmFjdG9yeS5jYWxsCisKKyAgICAgIGV4cGVjdChnbG9iYWxfY29tbWVudC5ib2R5KS50byBpbmNsdWRlKCI8IS0tIGNvdmVyYWdlLWNvbW1lbnQtbWFya2VyIC0tPiIpCisgICAgICBleHBlY3QoZ2xvYmFsX2NvbW1lbnQuYm9keSkudG8gaW5jbHVkZSgi8J+nqiAqKlRlc3QgQ292ZXJhZ2UgU3VtbWFyeSoqIikKKyAgICAgIGV4cGVjdChnbG9iYWxfY29tbWVudC5ib2R5KS50byBpbmNsdWRlKCLinIUgKipOL0ElKiogb2YgY2hhbmdlZCBsaW5lcyBhcmUgY292ZXJlZC4iKQorICAgICAgZXhwZWN0KGdsb2JhbF9jb21tZW50LmJvZHkpLnRvIGluY2x1ZGUoIl9Db21taXQ6ICN7Y29tbWl0X3NoYX1fIikKKyAgICBlbmQKKyAgZW5kCisKKyAgZGVzY3JpYmUgImluaXRpYWxpemF0aW9uIiBkbworICAgIGl0ICJzZXRzIGNvbW1pdF9zaGEiIGRvCisgICAgICBleHBlY3QoZmFjdG9yeS5pbnN0YW5jZV92YXJpYWJsZV9nZXQoOkBjb21taXRfc2hhKSkudG8gZXEoY29tbWl0X3NoYSkKKyAgICBlbmQKKyAgZW5kCisKKyAgZGVzY3JpYmUgInByaXZhdGUgbWV0aG9kcyIgZG8KKyAgICBkZXNjcmliZSAiI2NhbGN1bGF0ZV9jb3ZlcmFnZV9wZXJjZW50YWdlIiBkbworICAgICAgaXQgInJldHVybnMgTi9BIGFzIHBsYWNlaG9sZGVyIiBkbworICAgICAgICByZXN1bHQgPSBmYWN0b3J5LnNlbmQoOmNhbGN1bGF0ZV9jb3ZlcmFnZV9wZXJjZW50YWdlKQorICAgICAgICBleHBlY3QocmVzdWx0KS50byBlcSgiTi9BIikKKyAgICAgIGVuZAorICAgIGVuZAorICBlbmQKK2VuZApkaWZmIC0tZ2l0IGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9nbG9iYWxfY29tbWVudF9wb3N0ZXJfc3BlYy5yYiBiL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvZ2xvYmFsX2NvbW1lbnRfcG9zdGVyX3NwZWMucmIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uZjgzNjNhZgotLS0gL2Rldi9udWxsCisrKyBiL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvZ2xvYmFsX2NvbW1lbnRfcG9zdGVyX3NwZWMucmIKQEAgLTAsMCArMSwxMjMgQEAKKyMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCisKK3JlcXVpcmUgInNwZWNfaGVscGVyIgorCitSU3BlYy5kZXNjcmliZSBDb3ZlcmFnZVJlcG9ydGVyOjpHbG9iYWxDb21tZW50UG9zdGVyIGRvCisgIGxldCg6cHVsbF9yZXF1ZXN0KSB7IGluc3RhbmNlX2RvdWJsZShDb3ZlcmFnZVJlcG9ydGVyOjpQdWxsUmVxdWVzdCkgfQorICBsZXQoOnBvc3RlcikgeyBkZXNjcmliZWRfY2xhc3MubmV3KHB1bGxfcmVxdWVzdDogcHVsbF9yZXF1ZXN0LCBnbG9iYWxfY29tbWVudDogZ2xvYmFsX2NvbW1lbnQpIH0KKworICBsZXQoOmdsb2JhbF9jb21tZW50KSBkbworICAgIENvdmVyYWdlUmVwb3J0ZXI6Okdsb2JhbENvbW1lbnQubmV3KAorICAgICAgY292ZXJhZ2VfcGVyY2VudGFnZTogIjg1IiwKKyAgICAgIGNvbW1pdF9zaGE6ICAgICAgICAgICJhYmMxMjMiCisgICAgKQorICBlbmQKKworICBkZXNjcmliZSAiI2NhbGwiIGRvCisgICAgY29udGV4dCAid2hlbiBubyBnbG9iYWwgY29tbWVudCBleGlzdHMiIGRvCisgICAgICBiZWZvcmUgZG8KKyAgICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDpnbG9iYWxfY29tbWVudHMpLmFuZF9yZXR1cm4oW10pCisgICAgICAgIGFsbG93KHB1bGxfcmVxdWVzdCkudG8gcmVjZWl2ZSg6YWRkX2dsb2JhbF9jb21tZW50KQorICAgICAgZW5kCisKKyAgICAgIGl0ICJhZGRzIGEgbmV3IGdsb2JhbCBjb21tZW50IiBkbworICAgICAgICBleHBlY3QocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDphZGRfZ2xvYmFsX2NvbW1lbnQpLndpdGgoCisgICAgICAgICAgYm9keTogZ2xvYmFsX2NvbW1lbnQuYm9keQorICAgICAgICApCisKKyAgICAgICAgcG9zdGVyLmNhbGwKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgY29udGV4dCAid2hlbiBhIGdsb2JhbCBjb21tZW50IGFscmVhZHkgZXhpc3RzIiBkbworICAgICAgbGV0KDpleGlzdGluZ19jb21tZW50KSB7IGluc3RhbmNlX2RvdWJsZShDb21tZW50LCBpZDogMTIzLCBib2R5OiAiPCEtLSBjb3ZlcmFnZS1jb21tZW50LW1hcmtlciAtLT5cbm9sZCBib2R5IikgfQorCisgICAgICBiZWZvcmUgZG8KKyAgICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDpnbG9iYWxfY29tbWVudHMpLmFuZF9yZXR1cm4oW2V4aXN0aW5nX2NvbW1lbnRdKQorICAgICAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOnVwZGF0ZV9nbG9iYWxfY29tbWVudCkKKyAgICAgIGVuZAorCisgICAgICBpdCAidXBkYXRlcyB0aGUgZXhpc3RpbmcgZ2xvYmFsIGNvbW1lbnQiIGRvCisgICAgICAgIGV4cGVjdChwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOnVwZGF0ZV9nbG9iYWxfY29tbWVudCkud2l0aCgKKyAgICAgICAgICBpZDogICAxMjMsCisgICAgICAgICAgYm9keTogZ2xvYmFsX2NvbW1lbnQuYm9keQorICAgICAgICApCisKKyAgICAgICAgcG9zdGVyLmNhbGwKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgY29udGV4dCAid2hlbiBnbG9iYWwgY29tbWVudCBib2R5IGRvZXNuJ3QgaW5jbHVkZSBtYXJrZXIiIGRvCisgICAgICBsZXQoOmNvbW1lbnRfd2l0aG91dF9tYXJrZXIpIGRvCisgICAgICAgIENvdmVyYWdlUmVwb3J0ZXI6Okdsb2JhbENvbW1lbnQubmV3KAorICAgICAgICAgIGNvdmVyYWdlX3BlcmNlbnRhZ2U6ICI4NSIsCisgICAgICAgICAgY29tbWl0X3NoYTogICAgICAgICAgImFiYzEyMyIKKyAgICAgICAgKQorICAgICAgZW5kCisKKyAgICAgIGxldCg6cG9zdGVyX3dpdGhvdXRfbWFya2VyKSB7IGRlc2NyaWJlZF9jbGFzcy5uZXcocHVsbF9yZXF1ZXN0OiBwdWxsX3JlcXVlc3QsIGdsb2JhbF9jb21tZW50OiBjb21tZW50X3dpdGhvdXRfbWFya2VyKSB9CisKKyAgICAgIGJlZm9yZSBkbworICAgICAgICAjIE1vY2sgdGhlIGJvZHkgdG8gbm90IGluY2x1ZGUgdGhlIG1hcmtlcgorICAgICAgICBhbGxvdyhjb21tZW50X3dpdGhvdXRfbWFya2VyKS50byByZWNlaXZlKDpib2R5KS5hbmRfcmV0dXJuKCJObyBtYXJrZXIgaGVyZSIpCisgICAgICAgIGFsbG93KHB1bGxfcmVxdWVzdCkudG8gcmVjZWl2ZSg6Z2xvYmFsX2NvbW1lbnRzKS5hbmRfcmV0dXJuKFtdKQorICAgICAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOmFkZF9nbG9iYWxfY29tbWVudCkKKyAgICAgIGVuZAorCisgICAgICBpdCAiYWRkcyB0aGUgbWFya2VyIHRvIHRoZSBib2R5IiBkbworICAgICAgICBleHBlY3RlZF9ib2R5ID0gIjwhLS0gY292ZXJhZ2UtY29tbWVudC1tYXJrZXIgLS0+XG5ObyBtYXJrZXIgaGVyZSIKKworICAgICAgICBleHBlY3QocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDphZGRfZ2xvYmFsX2NvbW1lbnQpLndpdGgoCisgICAgICAgICAgYm9keTogZXhwZWN0ZWRfYm9keQorICAgICAgICApCisKKyAgICAgICAgcG9zdGVyX3dpdGhvdXRfbWFya2VyLmNhbGwKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgY29udGV4dCAid2hlbiBnbG9iYWwgY29tbWVudCBib2R5IGFscmVhZHkgaW5jbHVkZXMgbWFya2VyIiBkbworICAgICAgYmVmb3JlIGRvCisgICAgICAgIGFsbG93KHB1bGxfcmVxdWVzdCkudG8gcmVjZWl2ZSg6Z2xvYmFsX2NvbW1lbnRzKS5hbmRfcmV0dXJuKFtdKQorICAgICAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOmFkZF9nbG9iYWxfY29tbWVudCkKKyAgICAgIGVuZAorCisgICAgICBpdCAidXNlcyB0aGUgYm9keSBhcy1pcyB3aXRob3V0IGFkZGluZyBkdXBsaWNhdGUgbWFya2VyIiBkbworICAgICAgICBleHBlY3QocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDphZGRfZ2xvYmFsX2NvbW1lbnQpLndpdGgoCisgICAgICAgICAgYm9keTogZ2xvYmFsX2NvbW1lbnQuYm9keQorICAgICAgICApCisKKyAgICAgICAgcG9zdGVyLmNhbGwKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgY29udGV4dCAid2hlbiBtdWx0aXBsZSBnbG9iYWwgY29tbWVudHMgZXhpc3QgYnV0IG5vbmUgaGF2ZSB0aGUgbWFya2VyIiBkbworICAgICAgbGV0KDpmaXJzdF9jb21tZW50KSB7IGluc3RhbmNlX2RvdWJsZShDb21tZW50LCBpZDogMSwgYm9keTogImNvbW1lbnQgMSIpIH0KKyAgICAgIGxldCg6c2Vjb25kX2NvbW1lbnQpIHsgaW5zdGFuY2VfZG91YmxlKENvbW1lbnQsIGlkOiAyLCBib2R5OiAiY29tbWVudCAyIikgfQorCisgICAgICBiZWZvcmUgZG8KKyAgICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDpnbG9iYWxfY29tbWVudHMpLmFuZF9yZXR1cm4oW2ZpcnN0X2NvbW1lbnQsIHNlY29uZF9jb21tZW50XSkKKyAgICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDphZGRfZ2xvYmFsX2NvbW1lbnQpCisgICAgICBlbmQKKworICAgICAgaXQgImFkZHMgYSBuZXcgZ2xvYmFsIGNvbW1lbnQiIGRvCisgICAgICAgIGV4cGVjdChwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOmFkZF9nbG9iYWxfY29tbWVudCkud2l0aCgKKyAgICAgICAgICBib2R5OiBnbG9iYWxfY29tbWVudC5ib2R5CisgICAgICAgICkKKworICAgICAgICBwb3N0ZXIuY2FsbAorICAgICAgZW5kCisgICAgZW5kCisgIGVuZAorCisgIGRlc2NyaWJlICJpbml0aWFsaXphdGlvbiIgZG8KKyAgICBpdCAic2V0cyBwdWxsX3JlcXVlc3QiIGRvCisgICAgICBleHBlY3QocG9zdGVyLmluc3RhbmNlX3ZhcmlhYmxlX2dldCg6QHB1bGxfcmVxdWVzdCkpLnRvIGVxKHB1bGxfcmVxdWVzdCkKKyAgICBlbmQKKyAgZW5kCisKKyAgZGVzY3JpYmUgIkdMT0JBTF9NQVJLRVIgY29uc3RhbnQiIGRvCisgICAgaXQgImhhcyB0aGUgY29ycmVjdCBtYXJrZXIgdmFsdWUiIGRvCisgICAgICBleHBlY3QoZGVzY3JpYmVkX2NsYXNzOjpHTE9CQUxfTUFSS0VSKS50byBlcSgiPCEtLSBjb3ZlcmFnZS1jb21tZW50LW1hcmtlciAtLT4iKQorICAgIGVuZAorICBlbmQKK2VuZApkaWZmIC0tZ2l0IGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9nbG9iYWxfY29tbWVudF9zcGVjLnJiIGIvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9nbG9iYWxfY29tbWVudF9zcGVjLnJiCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjAzZDVlY2QKLS0tIC9kZXYvbnVsbAorKysgYi9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL2dsb2JhbF9jb21tZW50X3NwZWMucmIKQEAgLTAsMCArMSw3MiBAQAorIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKKworcmVxdWlyZSAic3BlY19oZWxwZXIiCisKK1JTcGVjLmRlc2NyaWJlIENvdmVyYWdlUmVwb3J0ZXI6Okdsb2JhbENvbW1lbnQgZG8KKyAgbGV0KDpjb3ZlcmFnZV9wZXJjZW50YWdlKSB7ICI4NSIgfQorICBsZXQoOmNvbW1pdF9zaGEpIHsgImFiYzEyMyIgfQorCisgIGxldCg6Z2xvYmFsX2NvbW1lbnQpIGRvCisgICAgZGVzY3JpYmVkX2NsYXNzLm5ldygKKyAgICAgIGNvdmVyYWdlX3BlcmNlbnRhZ2U6IGNvdmVyYWdlX3BlcmNlbnRhZ2UsCisgICAgICBjb21taXRfc2hhOiAgICAgICAgICBjb21taXRfc2hhCisgICAgKQorICBlbmQKKworICBkZXNjcmliZSAiaW5pdGlhbGl6YXRpb24iIGRvCisgICAgaXQgInNldHMgY292ZXJhZ2VfcGVyY2VudGFnZSBhbmQgY29tbWl0X3NoYSIgZG8KKyAgICAgIGV4cGVjdChnbG9iYWxfY29tbWVudC5jb3ZlcmFnZV9wZXJjZW50YWdlKS50byBlcShjb3ZlcmFnZV9wZXJjZW50YWdlKQorICAgICAgZXhwZWN0KGdsb2JhbF9jb21tZW50LmNvbW1pdF9zaGEpLnRvIGVxKGNvbW1pdF9zaGEpCisgICAgZW5kCisKKyAgICBpdCAiYnVpbGRzIHRoZSBib2R5IGNvbnRlbnQiIGRvCisgICAgICBleHBlY3QoZ2xvYmFsX2NvbW1lbnQuYm9keSkudG8gaW5jbHVkZSgiPCEtLSBjb3ZlcmFnZS1jb21tZW50LW1hcmtlciAtLT4iKQorICAgICAgZXhwZWN0KGdsb2JhbF9jb21tZW50LmJvZHkpLnRvIGluY2x1ZGUoIvCfp6ogKipUZXN0IENvdmVyYWdlIFN1bW1hcnkqKiIpCisgICAgICBleHBlY3QoZ2xvYmFsX2NvbW1lbnQuYm9keSkudG8gaW5jbHVkZSgi4pyFICoqI3tjb3ZlcmFnZV9wZXJjZW50YWdlfSUqKiBvZiBjaGFuZ2VkIGxpbmVzIGFyZSBjb3ZlcmVkLiIpCisgICAgICBleHBlY3QoZ2xvYmFsX2NvbW1lbnQuYm9keSkudG8gaW5jbHVkZSgiX0NvbW1pdDogI3tjb21taXRfc2hhfV8iKQorICAgIGVuZAorICBlbmQKKworICBkZXNjcmliZSAiI3RvX2giIGRvCisgICAgaXQgInJldHVybnMgYSBoYXNoIHdpdGggYWxsIGF0dHJpYnV0ZXMiIGRvCisgICAgICBleHBlY3RlZF9oYXNoID0geworICAgICAgICBjb3ZlcmFnZV9wZXJjZW50YWdlOiBjb3ZlcmFnZV9wZXJjZW50YWdlLAorICAgICAgICBjb21taXRfc2hhOiAgICAgICAgICBjb21taXRfc2hhLAorICAgICAgICBib2R5OiAgICAgICAgICAgICAgICBnbG9iYWxfY29tbWVudC5ib2R5CisgICAgICB9CisKKyAgICAgIGV4cGVjdChnbG9iYWxfY29tbWVudC50b19oKS50byBlcShleHBlY3RlZF9oYXNoKQorICAgIGVuZAorICBlbmQKKworICBkZXNjcmliZSAiYm9keSBmb3JtYXR0aW5nIiBkbworICAgIGl0ICJpbmNsdWRlcyB0aGUgZ2xvYmFsIG1hcmtlciBhdCB0aGUgYmVnaW5uaW5nIiBkbworICAgICAgZXhwZWN0KGdsb2JhbF9jb21tZW50LmJvZHkpLnRvIHN0YXJ0X3dpdGgoIjwhLS0gY292ZXJhZ2UtY29tbWVudC1tYXJrZXIgLS0+IikKKyAgICBlbmQKKworICAgIGl0ICJpbmNsdWRlcyBwcm9wZXIgbWFya2Rvd24gZm9ybWF0dGluZyIgZG8KKyAgICAgIGV4cGVjdChnbG9iYWxfY29tbWVudC5ib2R5KS50byBpbmNsdWRlKCIqKlRlc3QgQ292ZXJhZ2UgU3VtbWFyeSoqIikKKyAgICAgIGV4cGVjdChnbG9iYWxfY29tbWVudC5ib2R5KS50byBpbmNsdWRlKCIqKiN7Y292ZXJhZ2VfcGVyY2VudGFnZX0lKioiKQorICAgIGVuZAorCisgICAgaXQgImluY2x1ZGVzIGNvbW1pdCBpbmZvcm1hdGlvbiIgZG8KKyAgICAgIGV4cGVjdChnbG9iYWxfY29tbWVudC5ib2R5KS50byBpbmNsdWRlKCJfQ29tbWl0OiAje2NvbW1pdF9zaGF9XyIpCisgICAgZW5kCisgIGVuZAorCisgIGNvbnRleHQgIndpdGggZGlmZmVyZW50IGNvdmVyYWdlIHBlcmNlbnRhZ2VzIiBkbworICAgIGxldCg6Y292ZXJhZ2VfcGVyY2VudGFnZSkgeyAiMTAwIiB9CisKKyAgICBpdCAiZm9ybWF0cyB0aGUgcGVyY2VudGFnZSBjb3JyZWN0bHkiIGRvCisgICAgICBleHBlY3QoZ2xvYmFsX2NvbW1lbnQuYm9keSkudG8gaW5jbHVkZSgi4pyFICoqMTAwJSoqIG9mIGNoYW5nZWQgbGluZXMgYXJlIGNvdmVyZWQuIikKKyAgICBlbmQKKyAgZW5kCisKKyAgY29udGV4dCAid2l0aCBkaWZmZXJlbnQgY29tbWl0IHNoYXMiIGRvCisgICAgbGV0KDpjb21taXRfc2hhKSB7ICJkZWY0NTYiIH0KKworICAgIGl0ICJpbmNsdWRlcyB0aGUgY29ycmVjdCBjb21taXQgc2hhIiBkbworICAgICAgZXhwZWN0KGdsb2JhbF9jb21tZW50LmJvZHkpLnRvIGluY2x1ZGUoIl9Db21taXQ6IGRlZjQ1Nl8iKQorICAgIGVuZAorICBlbmQKK2VuZApkaWZmIC0tZ2l0IGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9pbmxpbmVfY29tbWVudF9wb3N0ZXJfc3BlYy5yYiBiL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvaW5saW5lX2NvbW1lbnRfcG9zdGVyX3NwZWMucmIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMWNiYjlmMwotLS0gL2Rldi9udWxsCisrKyBiL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvaW5saW5lX2NvbW1lbnRfcG9zdGVyX3NwZWMucmIKQEAgLTAsMCArMSwxNjkgQEAKKyMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCisKK3JlcXVpcmUgInNwZWNfaGVscGVyIgorCitSU3BlYy5kZXNjcmliZSBDb3ZlcmFnZVJlcG9ydGVyOjpJbmxpbmVDb21tZW50UG9zdGVyIGRvCisgIGxldCg6cHVsbF9yZXF1ZXN0KSB7IGluc3RhbmNlX2RvdWJsZShDb3ZlcmFnZVJlcG9ydGVyOjpQdWxsUmVxdWVzdCkgfQorICBsZXQoOmNvbW1pdF9zaGEpIHsgImFiYzEyMyIgfQorICBsZXQoOnBvc3RlcikgeyBkZXNjcmliZWRfY2xhc3MubmV3KHB1bGxfcmVxdWVzdDogcHVsbF9yZXF1ZXN0LCBjb21taXRfc2hhOiBjb21taXRfc2hhLCBpbmxpbmVfY29tbWVudHM6IGlubGluZV9jb21tZW50cykgfQorCisgIGxldCg6aW5saW5lX2NvbW1lbnRzKSBkbworICAgIFsKKyAgICAgIENvdmVyYWdlUmVwb3J0ZXI6OklubGluZUNvbW1lbnQubmV3KAorICAgICAgICBmaWxlOiAgICAgICAiYXBwL21vZGVscy91c2VyLnJiIiwKKyAgICAgICAgc3RhcnRfbGluZTogNSwKKyAgICAgICAgZW5kX2xpbmU6ICAgNSwKKyAgICAgICAgbWVzc2FnZTogICAgIuKdjCBMaW5lIDUgaXMgbm90IGNvdmVyZWQgYnkgdGVzdHMuIiwKKyAgICAgICAgYm9keTogICAgICAgIjwhLS0gY292ZXJhZ2UtaW5saW5lLW1hcmtlciAtLT5cbuKdjCBMaW5lIDUgaXMgbm90IGNvdmVyZWQgYnkgdGVzdHMuXG5cbiIgXAorICAgICAgICAgICAgICAgICAgICAiX0ZpbGU6IGFwcC9tb2RlbHMvdXNlci5yYiwgbGluZSA1X1xuX0NvbW1pdDogYWJjMTIzXyIKKyAgICAgICksCisgICAgICBDb3ZlcmFnZVJlcG9ydGVyOjpJbmxpbmVDb21tZW50Lm5ldygKKyAgICAgICAgZmlsZTogICAgICAgImFwcC9jb250cm9sbGVycy91c2Vyc19jb250cm9sbGVyLnJiIiwKKyAgICAgICAgc3RhcnRfbGluZTogMTAsCisgICAgICAgIGVuZF9saW5lOiAgIDE1LAorICAgICAgICBtZXNzYWdlOiAgICAi4p2MIExpbmVzIDEw4oCTMTUgYXJlIG5vdCBjb3ZlcmVkIGJ5IHRlc3RzLiIsCisgICAgICAgIGJvZHk6ICAgICAgICI8IS0tIGNvdmVyYWdlLWlubGluZS1tYXJrZXIgLS0+XG7inYwgTGluZXMgMTDigJMxNSBhcmUgbm90IGNvdmVyZWQgYnkgdGVzdHMuXG5cbiIgXAorICAgICAgICAgICAgICAgICAgICAiX0ZpbGU6IGFwcC9jb250cm9sbGVycy91c2Vyc19jb250cm9sbGVyLnJiLCBsaW5lIDEwX1xuX0NvbW1pdDogYWJjMTIzXyIKKyAgICAgICkKKyAgICBdCisgIGVuZAorCisgIGRlc2NyaWJlICIjY2FsbCIgZG8KKyAgICBjb250ZXh0ICJ3aGVuIGNvbW1lbnRzIGRvbid0IGV4aXN0IHlldCIgZG8KKyAgICAgIGJlZm9yZSBkbworICAgICAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOmZpbmRfZXhpc3RpbmdfaW5saW5lX2NvbW1lbnQpLmFuZF9yZXR1cm4obmlsKQorICAgICAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOmFkZF9jb21tZW50X29uX2xpbmVzKQorICAgICAgZW5kCisKKyAgICAgIGl0ICJwb3N0cyBhbGwgaW5saW5lIGNvbW1lbnRzIiBkbworICAgICAgICBleHBlY3QocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDphZGRfY29tbWVudF9vbl9saW5lcykud2l0aCgKKyAgICAgICAgICBjb21taXRfaWQ6ICBjb21taXRfc2hhLAorICAgICAgICAgIGZpbGVfcGF0aDogICJhcHAvbW9kZWxzL3VzZXIucmIiLAorICAgICAgICAgIHN0YXJ0X2xpbmU6IDUsCisgICAgICAgICAgZW5kX2xpbmU6ICAgNSwKKyAgICAgICAgICBib2R5OiAgICAgICBpbmxpbmVfY29tbWVudHNbMF0uYm9keQorICAgICAgICApCisKKyAgICAgICAgZXhwZWN0KHB1bGxfcmVxdWVzdCkudG8gcmVjZWl2ZSg6YWRkX2NvbW1lbnRfb25fbGluZXMpLndpdGgoCisgICAgICAgICAgY29tbWl0X2lkOiAgY29tbWl0X3NoYSwKKyAgICAgICAgICBmaWxlX3BhdGg6ICAiYXBwL2NvbnRyb2xsZXJzL3VzZXJzX2NvbnRyb2xsZXIucmIiLAorICAgICAgICAgIHN0YXJ0X2xpbmU6IDEwLAorICAgICAgICAgIGVuZF9saW5lOiAgIDE1LAorICAgICAgICAgIGJvZHk6ICAgICAgIGlubGluZV9jb21tZW50c1sxXS5ib2R5CisgICAgICAgICkKKworICAgICAgICBwb3N0ZXIuY2FsbAorICAgICAgZW5kCisKKyAgICAgIGl0ICJyZXR1cm5zIGFuIGVtcHR5IHNldCBvZiB1cGRhdGVkIGNvbW1lbnQgSURzIiBkbworICAgICAgICByZXN1bHQgPSBwb3N0ZXIuY2FsbAorICAgICAgICBleHBlY3QocmVzdWx0KS50byBlcShTZXQubmV3KQorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBjb250ZXh0ICJ3aGVuIHNvbWUgY29tbWVudHMgYWxyZWFkeSBleGlzdCIgZG8KKyAgICAgIGxldCg6ZXhpc3RpbmdfY29tbWVudCkgeyBpbnN0YW5jZV9kb3VibGUoQ29tbWVudCwgaWQ6IDEyMykgfQorCisgICAgICBiZWZvcmUgZG8KKyAgICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDpmaW5kX2V4aXN0aW5nX2lubGluZV9jb21tZW50KQorICAgICAgICAgIC53aXRoKCJhcHAvbW9kZWxzL3VzZXIucmIiLCA1LCA1KQorICAgICAgICAgIC5hbmRfcmV0dXJuKGV4aXN0aW5nX2NvbW1lbnQpCisgICAgICAgIGFsbG93KHB1bGxfcmVxdWVzdCkudG8gcmVjZWl2ZSg6ZmluZF9leGlzdGluZ19pbmxpbmVfY29tbWVudCkKKyAgICAgICAgICAud2l0aCgiYXBwL2NvbnRyb2xsZXJzL3VzZXJzX2NvbnRyb2xsZXIucmIiLCAxMCwgMTUpCisgICAgICAgICAgLmFuZF9yZXR1cm4obmlsKQorICAgICAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOnVwZGF0ZV9pbmxpbmVfY29tbWVudCkKKyAgICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDphZGRfY29tbWVudF9vbl9saW5lcykKKyAgICAgIGVuZAorCisgICAgICBpdCAidXBkYXRlcyBleGlzdGluZyBjb21tZW50cyBhbmQgY3JlYXRlcyBuZXcgb25lcyIgZG8KKyAgICAgICAgZXhwZWN0KHB1bGxfcmVxdWVzdCkudG8gcmVjZWl2ZSg6dXBkYXRlX2lubGluZV9jb21tZW50KS53aXRoKAorICAgICAgICAgIGlkOiAgIDEyMywKKyAgICAgICAgICBib2R5OiBpbmxpbmVfY29tbWVudHNbMF0uYm9keQorICAgICAgICApCisKKyAgICAgICAgZXhwZWN0KHB1bGxfcmVxdWVzdCkudG8gcmVjZWl2ZSg6YWRkX2NvbW1lbnRfb25fbGluZXMpLndpdGgoCisgICAgICAgICAgY29tbWl0X2lkOiAgY29tbWl0X3NoYSwKKyAgICAgICAgICBmaWxlX3BhdGg6ICAiYXBwL2NvbnRyb2xsZXJzL3VzZXJzX2NvbnRyb2xsZXIucmIiLAorICAgICAgICAgIHN0YXJ0X2xpbmU6IDEwLAorICAgICAgICAgIGVuZF9saW5lOiAgIDE1LAorICAgICAgICAgIGJvZHk6ICAgICAgIGlubGluZV9jb21tZW50c1sxXS5ib2R5CisgICAgICAgICkKKworICAgICAgICBwb3N0ZXIuY2FsbAorICAgICAgZW5kCisKKyAgICAgIGl0ICJyZXR1cm5zIHRoZSBzZXQgb2YgdXBkYXRlZCBjb21tZW50IElEcyIgZG8KKyAgICAgICAgcmVzdWx0ID0gcG9zdGVyLmNhbGwKKyAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8gZXEoU2V0Lm5ldyhbMTIzXSkpCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGNvbnRleHQgIndoZW4gYWxsIGNvbW1lbnRzIGFscmVhZHkgZXhpc3QiIGRvCisgICAgICBsZXQoOmZpcnN0X2V4aXN0aW5nX2NvbW1lbnQpIHsgaW5zdGFuY2VfZG91YmxlKENvbW1lbnQsIGlkOiAxMjMpIH0KKyAgICAgIGxldCg6c2Vjb25kX2V4aXN0aW5nX2NvbW1lbnQpIHsgaW5zdGFuY2VfZG91YmxlKENvbW1lbnQsIGlkOiA0NTYpIH0KKworICAgICAgYmVmb3JlIGRvCisgICAgICAgIGFsbG93KHB1bGxfcmVxdWVzdCkudG8gcmVjZWl2ZSg6ZmluZF9leGlzdGluZ19pbmxpbmVfY29tbWVudCkKKyAgICAgICAgICAud2l0aCgiYXBwL21vZGVscy91c2VyLnJiIiwgNSwgNSkKKyAgICAgICAgICAuYW5kX3JldHVybihmaXJzdF9leGlzdGluZ19jb21tZW50KQorICAgICAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOmZpbmRfZXhpc3RpbmdfaW5saW5lX2NvbW1lbnQpCisgICAgICAgICAgLndpdGgoImFwcC9jb250cm9sbGVycy91c2Vyc19jb250cm9sbGVyLnJiIiwgMTAsIDE1KQorICAgICAgICAgIC5hbmRfcmV0dXJuKHNlY29uZF9leGlzdGluZ19jb21tZW50KQorICAgICAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOnVwZGF0ZV9pbmxpbmVfY29tbWVudCkKKyAgICAgIGVuZAorCisgICAgICBpdCAidXBkYXRlcyBhbGwgZXhpc3RpbmcgY29tbWVudHMiIGRvCisgICAgICAgIGV4cGVjdChwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOnVwZGF0ZV9pbmxpbmVfY29tbWVudCkud2l0aCgKKyAgICAgICAgICBpZDogICAxMjMsCisgICAgICAgICAgYm9keTogaW5saW5lX2NvbW1lbnRzWzBdLmJvZHkKKyAgICAgICAgKQorCisgICAgICAgIGV4cGVjdChwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOnVwZGF0ZV9pbmxpbmVfY29tbWVudCkud2l0aCgKKyAgICAgICAgICBpZDogICA0NTYsCisgICAgICAgICAgYm9keTogaW5saW5lX2NvbW1lbnRzWzFdLmJvZHkKKyAgICAgICAgKQorCisgICAgICAgIHBvc3Rlci5jYWxsCisgICAgICBlbmQKKworICAgICAgaXQgInJldHVybnMgYWxsIHVwZGF0ZWQgY29tbWVudCBJRHMiIGRvCisgICAgICAgIHJlc3VsdCA9IHBvc3Rlci5jYWxsCisgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvIGVxKFNldC5uZXcoWzEyMywgNDU2XSkpCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGNvbnRleHQgIndpdGggZW1wdHkgY29tbWVudCBsaXN0IiBkbworICAgICAgbGV0KDppbmxpbmVfY29tbWVudHMpIHsgW10gfQorCisgICAgICBpdCAicmV0dXJucyBhbiBlbXB0eSBzZXQiIGRvCisgICAgICAgIHJlc3VsdCA9IHBvc3Rlci5jYWxsCisgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvIGVxKFNldC5uZXcpCisgICAgICBlbmQKKworICAgICAgaXQgImRvZXMgbm90IGNhbGwgYW55IHB1bGwgcmVxdWVzdCBtZXRob2RzIiBkbworICAgICAgICBleHBlY3QocHVsbF9yZXF1ZXN0KS5ub3RfdG8gcmVjZWl2ZSg6ZmluZF9leGlzdGluZ19pbmxpbmVfY29tbWVudCkKKyAgICAgICAgZXhwZWN0KHB1bGxfcmVxdWVzdCkubm90X3RvIHJlY2VpdmUoOmFkZF9jb21tZW50X29uX2xpbmVzKQorICAgICAgICBleHBlY3QocHVsbF9yZXF1ZXN0KS5ub3RfdG8gcmVjZWl2ZSg6dXBkYXRlX2lubGluZV9jb21tZW50KQorCisgICAgICAgIHBvc3Rlci5jYWxsCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGl0ICJsb2dzIGRlYnVnIGluZm9ybWF0aW9uIGZvciBlYWNoIGNvbW1lbnQiIGRvCisgICAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOmZpbmRfZXhpc3RpbmdfaW5saW5lX2NvbW1lbnQpLmFuZF9yZXR1cm4obmlsKQorICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDphZGRfY29tbWVudF9vbl9saW5lcykKKworICAgICAgZXhwZWN0KENvdmVyYWdlUmVwb3J0ZXIubG9nZ2VyKS50byByZWNlaXZlKDpkZWJ1Zykud2l0aCgiUG9zdGluZyBpbmxpbmUgY29tbWVudCBmb3IgYXBwL21vZGVscy91c2VyLnJiOiA14oCTNSIpCisgICAgICBleHBlY3QoQ292ZXJhZ2VSZXBvcnRlci5sb2dnZXIpLnRvIHJlY2VpdmUoOmRlYnVnKS53aXRoKCJQb3N0aW5nIGlubGluZSBjb21tZW50IGZvciBhcHAvY29udHJvbGxlcnMvdXNlcnNfY29udHJvbGxlci5yYjogMTDigJMxNSIpCisKKyAgICAgIHBvc3Rlci5jYWxsCisgICAgZW5kCisgIGVuZAorCisgIGRlc2NyaWJlICJpbml0aWFsaXphdGlvbiIgZG8KKyAgICBpdCAic2V0cyBwdWxsX3JlcXVlc3QgYW5kIGNvbW1pdF9zaGEiIGRvCisgICAgICBleHBlY3QocG9zdGVyLmluc3RhbmNlX3ZhcmlhYmxlX2dldCg6QHB1bGxfcmVxdWVzdCkpLnRvIGVxKHB1bGxfcmVxdWVzdCkKKyAgICAgIGV4cGVjdChwb3N0ZXIuaW5zdGFuY2VfdmFyaWFibGVfZ2V0KDpAY29tbWl0X3NoYSkpLnRvIGVxKGNvbW1pdF9zaGEpCisgICAgZW5kCisgIGVuZAorZW5kCmRpZmYgLS1naXQgYS9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL2lubGluZV9jb21tZW50X3NwZWMucmIgYi9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL2lubGluZV9jb21tZW50X3NwZWMucmIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uM2Q1MzBkYQotLS0gL2Rldi9udWxsCisrKyBiL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvaW5saW5lX2NvbW1lbnRfc3BlYy5yYgpAQCAtMCwwICsxLDc3IEBACisjIGZyb3plbl9zdHJpbmdfbGl0ZXJhbDogdHJ1ZQorCityZXF1aXJlICJzcGVjX2hlbHBlciIKKworUlNwZWMuZGVzY3JpYmUgQ292ZXJhZ2VSZXBvcnRlcjo6SW5saW5lQ29tbWVudCBkbworICBsZXQoOmZpbGUpIHsgImFwcC9tb2RlbHMvdXNlci5yYiIgfQorICBsZXQoOnN0YXJ0X2xpbmUpIHsgNSB9CisgIGxldCg6ZW5kX2xpbmUpIHsgMTAgfQorICBsZXQoOm1lc3NhZ2UpIHsgIuKdjCBMaW5lcyA14oCTMTAgYXJlIG5vdCBjb3ZlcmVkIGJ5IHRlc3RzLiIgfQorICBsZXQoOmJvZHkpIHsgIjwhLS0gY292ZXJhZ2UtaW5saW5lLW1hcmtlciAtLT5cbiN7bWVzc2FnZX1cblxuX0ZpbGU6ICN7ZmlsZX0sIGxpbmUgI3tzdGFydF9saW5lfV9cbl9Db21taXQ6IGFiYzEyM18iIH0KKworICBsZXQoOmNvbW1lbnQpIGRvCisgICAgZGVzY3JpYmVkX2NsYXNzLm5ldygKKyAgICAgIGZpbGU6ICAgICAgIGZpbGUsCisgICAgICBzdGFydF9saW5lOiBzdGFydF9saW5lLAorICAgICAgZW5kX2xpbmU6ICAgZW5kX2xpbmUsCisgICAgICBtZXNzYWdlOiAgICBtZXNzYWdlLAorICAgICAgYm9keTogICAgICAgYm9keQorICAgICkKKyAgZW5kCisKKyAgZGVzY3JpYmUgImluaXRpYWxpemF0aW9uIiBkbworICAgIGl0ICJzZXRzIGFsbCBhdHRyaWJ1dGVzIGNvcnJlY3RseSIgZG8KKyAgICAgIGV4cGVjdChjb21tZW50LmZpbGUpLnRvIGVxKGZpbGUpCisgICAgICBleHBlY3QoY29tbWVudC5zdGFydF9saW5lKS50byBlcShzdGFydF9saW5lKQorICAgICAgZXhwZWN0KGNvbW1lbnQuZW5kX2xpbmUpLnRvIGVxKGVuZF9saW5lKQorICAgICAgZXhwZWN0KGNvbW1lbnQubWVzc2FnZSkudG8gZXEobWVzc2FnZSkKKyAgICAgIGV4cGVjdChjb21tZW50LmJvZHkpLnRvIGVxKGJvZHkpCisgICAgZW5kCisgIGVuZAorCisgIGRlc2NyaWJlICIjc2luZ2xlX2xpbmU/IiBkbworICAgIGNvbnRleHQgIndoZW4gc3RhcnRfbGluZSBlcXVhbHMgZW5kX2xpbmUiIGRvCisgICAgICBsZXQoOmVuZF9saW5lKSB7IDUgfQorCisgICAgICBpdCAicmV0dXJucyB0cnVlIiBkbworICAgICAgICBleHBlY3QoY29tbWVudC5zaW5nbGVfbGluZT8pLnRvIGJlIHRydWUKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgY29udGV4dCAid2hlbiBzdGFydF9saW5lIGRpZmZlcnMgZnJvbSBlbmRfbGluZSIgZG8KKyAgICAgIGl0ICJyZXR1cm5zIGZhbHNlIiBkbworICAgICAgICBleHBlY3QoY29tbWVudC5zaW5nbGVfbGluZT8pLnRvIGJlIGZhbHNlCisgICAgICBlbmQKKyAgICBlbmQKKyAgZW5kCisKKyAgZGVzY3JpYmUgIiNyYW5nZT8iIGRvCisgICAgY29udGV4dCAid2hlbiBzdGFydF9saW5lIGVxdWFscyBlbmRfbGluZSIgZG8KKyAgICAgIGxldCg6ZW5kX2xpbmUpIHsgNSB9CisKKyAgICAgIGl0ICJyZXR1cm5zIGZhbHNlIiBkbworICAgICAgICBleHBlY3QoY29tbWVudC5yYW5nZT8pLnRvIGJlIGZhbHNlCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGNvbnRleHQgIndoZW4gc3RhcnRfbGluZSBkaWZmZXJzIGZyb20gZW5kX2xpbmUiIGRvCisgICAgICBpdCAicmV0dXJucyB0cnVlIiBkbworICAgICAgICBleHBlY3QoY29tbWVudC5yYW5nZT8pLnRvIGJlIHRydWUKKyAgICAgIGVuZAorICAgIGVuZAorICBlbmQKKworICBkZXNjcmliZSAiI3RvX2giIGRvCisgICAgaXQgInJldHVybnMgYSBoYXNoIHdpdGggYWxsIGF0dHJpYnV0ZXMiIGRvCisgICAgICBleHBlY3RlZF9oYXNoID0geworICAgICAgICBmaWxlOiAgICAgICBmaWxlLAorICAgICAgICBzdGFydF9saW5lOiBzdGFydF9saW5lLAorICAgICAgICBlbmRfbGluZTogICBlbmRfbGluZSwKKyAgICAgICAgbWVzc2FnZTogICAgbWVzc2FnZSwKKyAgICAgICAgYm9keTogICAgICAgYm9keQorICAgICAgfQorCisgICAgICBleHBlY3QoY29tbWVudC50b19oKS50byBlcShleHBlY3RlZF9oYXNoKQorICAgIGVuZAorICBlbmQKK2VuZApkaWZmIC0tZ2l0IGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9pbnRlZ3JhdGlvbl9zcGVjLnJiIGIvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9pbnRlZ3JhdGlvbl9zcGVjLnJiCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmJjZjJjNDgKLS0tIC9kZXYvbnVsbAorKysgYi9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL2ludGVncmF0aW9uX3NwZWMucmIKQEAgLTAsMCArMSw1OSBAQAorIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKKworcmVxdWlyZSAic3BlY19oZWxwZXIiCisKKyMgcnVib2NvcDpkaXNhYmxlIFJTcGVjL0Rlc2NyaWJlQ2xhc3MKK1JTcGVjLmRlc2NyaWJlICJDb3ZlcmFnZVJlcG9ydGVyIEludGVncmF0aW9uIiBkbworICAjIHJ1Ym9jb3A6ZW5hYmxlIFJTcGVjL0Rlc2NyaWJlQ2xhc3MKKyAgbGV0KDpvcHRpb25zKSBkbworICAgIHsKKyAgICAgIGdpdGh1Yl90b2tlbjogICAgICAgICAiZmFrZV90b2tlbl9mb3JfdGVzdGluZyIsCisgICAgICByZXBvOiAgICAgICAgICAgICAgICAgInRlc3QvcmVwbyIsCisgICAgICBwcl9udW1iZXI6ICAgICAgICAgICAgIjEyMyIsCisgICAgICBjb21taXRfc2hhOiAgICAgICAgICAgImFiYzEyM2RlZjQ1NiIsCisgICAgICBjb3ZlcmFnZV9yZXBvcnRfcGF0aDogImNvdmVyYWdlL2NvdmVyYWdlLmpzb24iLAorICAgICAgYnVpbGRfdXJsOiAgICAgICAgICAgICJodHRwczovL2NpLmV4YW1wbGUuY29tL2J1aWxkLzEyMyIKKyAgICB9CisgIGVuZAorCisgIGNvbnRleHQgIndoZW4gcHJvY2Vzc2luZyBhIHJlYWwgUFIiIGRvCisgICAgaXQgInN1Y2Nlc3NmdWxseSBwcm9jZXNzZXMgdGhlIFBSIHdpdGhvdXQgZXJyb3JzIiBkbworICAgICAgIyBTa2lwIGludGVncmF0aW9uIHRlc3RzIHRoYXQgcmVxdWlyZSByZWFsIEFQSSBjYWxscworICAgICAgc2tpcCAiSW50ZWdyYXRpb24gdGVzdHMgcmVxdWlyZSByZWFsIEdpdEh1YiB0b2tlbiBhbmQgVkNSIHNldHVwIgorICAgIGVuZAorICBlbmQKKworICBjb250ZXh0ICJ3aXRoIHJhdyBmaXh0dXJlIGRhdGEiIGRvCisgICAgbGV0KDpmaXh0dXJlX2RhdGEpIGRvCisgICAgICBKU09OLnBhcnNlKEZpbGUucmVhZCgic3BlYy9maXh0dXJlcy9yYXdfcmVxdWVzdHMvcHJfMTIzX2V4YW1wbGUuanNvbiIpKQorICAgIHJlc2N1ZSBFcnJubzo6RU5PRU5UCisgICAgICBuaWwKKyAgICBlbmQKKworICAgIGl0ICJ2YWxpZGF0ZXMgQVBJIHJlcXVlc3QgcGF0dGVybnMiIGRvCisgICAgICBza2lwICJObyBmaXh0dXJlIGRhdGEgYXZhaWxhYmxlIiB1bmxlc3MgZml4dHVyZV9kYXRhCisKKyAgICAgIHJlcXVlc3RzID0gZml4dHVyZV9kYXRhWyJyZXF1ZXN0cyJdCisKKyAgICAgICMgVmVyaWZ5IHdlIG1ha2UgcmVxdWVzdHMgdG8gdGhlIGV4cGVjdGVkIGVuZHBvaW50cworICAgICAgZXhwZWN0KHJlcXVlc3RzKS50byBpbmNsdWRlKAorICAgICAgICBoYXNoX2luY2x1ZGluZygibWV0aG9kIiA9PiAiR0VUIiwgInVyaSIgPT4gJXJ7L3JlcG9zLy4qL3B1bGxzLzEyM30pCisgICAgICApCisKKyAgICAgIGV4cGVjdChyZXF1ZXN0cykudG8gaW5jbHVkZSgKKyAgICAgICAgaGFzaF9pbmNsdWRpbmcoIm1ldGhvZCIgPT4gIkdFVCIsICJ1cmkiID0+ICVyey9yZXBvcy8uKi9wdWxscy8xMjMvY29tbWVudHN9KQorICAgICAgKQorICAgIGVuZAorCisgICAgaXQgInZhbGlkYXRlcyByZXNwb25zZSBwYXR0ZXJucyIgZG8KKyAgICAgIHNraXAgIk5vIGZpeHR1cmUgZGF0YSBhdmFpbGFibGUiIHVubGVzcyBmaXh0dXJlX2RhdGEKKworICAgICAgcmVzcG9uc2VzID0gZml4dHVyZV9kYXRhWyJyZXNwb25zZXMiXQorCisgICAgICAjIFZlcmlmeSB3ZSBnZXQgc3VjY2Vzc2Z1bCByZXNwb25zZXMKKyAgICAgIGV4cGVjdChyZXNwb25zZXMpLnRvIGFsbCgKKyAgICAgICAgaW5jbHVkZSgic3RhdHVzIiA9PiBiZV9iZXR3ZWVuKDIwMCwgMjk5KSkKKyAgICAgICkKKyAgICBlbmQKKyAgZW5kCitlbmQKZGlmZiAtLWdpdCBhL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvbW9kaWZpZWRfcmFuZ2VzX2V4dHJhY3Rvcl9zcGVjLnJiIGIvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9tb2RpZmllZF9yYW5nZXNfZXh0cmFjdG9yX3NwZWMucmIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uYjc4YWU1YwotLS0gL2Rldi9udWxsCisrKyBiL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvbW9kaWZpZWRfcmFuZ2VzX2V4dHJhY3Rvcl9zcGVjLnJiCkBAIC0wLDAgKzEsMTk3IEBACisjIGZyb3plbl9zdHJpbmdfbGl0ZXJhbDogdHJ1ZQorCityZXF1aXJlICJzcGVjX2hlbHBlciIKKworUlNwZWMuZGVzY3JpYmUgQ292ZXJhZ2VSZXBvcnRlcjo6TW9kaWZpZWRSYW5nZXNFeHRyYWN0b3IgZG8KKyAgZGVzY3JpYmUgIiNjYWxsIiBkbworICAgIGNvbnRleHQgIndoZW4gZGlmZiB0ZXh0IGlzIG5pbCIgZG8KKyAgICAgIHN1YmplY3QoOmV4dHJhY3RvcikgeyBkZXNjcmliZWRfY2xhc3MubmV3KG5pbCkgfQorCisgICAgICBpdCAicmV0dXJucyBhbiBlbXB0eSBoYXNoIiBkbworICAgICAgICBleHBlY3QoZXh0cmFjdG9yLmNhbGwpLnRvIGVxKHt9KQorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBjb250ZXh0ICJ3aGVuIGRpZmYgdGV4dCBpcyBlbXB0eSIgZG8KKyAgICAgIHN1YmplY3QoOmV4dHJhY3RvcikgeyBkZXNjcmliZWRfY2xhc3MubmV3KCIiKSB9CisKKyAgICAgIGl0ICJyZXR1cm5zIGFuIGVtcHR5IGhhc2giIGRvCisgICAgICAgIGV4cGVjdChleHRyYWN0b3IuY2FsbCkudG8gZXEoe30pCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGNvbnRleHQgIndoZW4gcGFyc2luZyByYWlzZXMgYW4gZXhjZXB0aW9uIiBkbworICAgICAgc3ViamVjdCg6ZXh0cmFjdG9yKSB7IGRlc2NyaWJlZF9jbGFzcy5uZXcoImludmFsaWQgZGlmZiIpIH0KKworICAgICAgaXQgInJldHVybnMgYW4gZW1wdHkgaGFzaCIgZG8KKyAgICAgICAgYWxsb3coZXh0cmFjdG9yKS50byByZWNlaXZlKDpwYXJzZV9kaWZmKS5hbmRfcmFpc2UoImJvb20iKQorICAgICAgICBleHBlY3QoZXh0cmFjdG9yLmNhbGwpLnRvIGVxKHt9KQorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBjb250ZXh0ICJ3aXRoIGEgZGlmZiBjb250YWluaW5nIG11bHRpcGxlIGZpbGVzLCBodW5rcywgYWRkaXRpb25zIGFuZCBkZWxldGlvbnMiIGRvCisgICAgICBzdWJqZWN0KDpleHRyYWN0b3IpIHsgZGVzY3JpYmVkX2NsYXNzLm5ldyhkaWZmX3RleHQpIH0KKworICAgICAgbGV0KDpkaWZmX3RleHQpIGRvCisgICAgICAgIDw8fkRJRkYKKyAgICAgICAgICBkaWZmIC0tZ2l0IGEvbGliL3NhbXBsZS5yYiBiL2xpYi9zYW1wbGUucmIKKyAgICAgICAgICBpbmRleCAwMDAwMDAxLi4wMDAwMDAyIDEwMDY0NAorICAgICAgICAgIC0tLSBhL2xpYi9zYW1wbGUucmIKKyAgICAgICAgICArKysgYi9saWIvc2FtcGxlLnJiCisgICAgICAgICAgQEAgLTUgKzUgQEAKKyAgICAgICAgICArZmlyc3QgYWRkaXRpb24KKyAgICAgICAgICBAQCAtMTAsMiArMTEsNCBAQCBzb21lIGNvbnRleHQgbWF5YmUKKyAgICAgICAgICAtbGluZSByZW1vdmVkIDEKKyAgICAgICAgICAtbGluZSByZW1vdmVkIDIKKyAgICAgICAgICArYWRkMQorICAgICAgICAgICthZGQyCisgICAgICAgICAgK2FkZDMKKyAgICAgICAgICArYWRkNAorICAgICAgICAgIGRpZmYgLS1naXQgYS9hcHAvbW9kZWxzL3VzZXIucmIgYi9hcHAvbW9kZWxzL3VzZXIucmIKKyAgICAgICAgICBpbmRleCAwMDAwMDAzLi4wMDAwMDA0IDEwMDY0NAorICAgICAgICAgIC0tLSBhL2FwcC9tb2RlbHMvdXNlci5yYgorICAgICAgICAgICsrKyBiL2FwcC9tb2RlbHMvdXNlci5yYgorICAgICAgICAgIEBAIC0xLDAgKzEsMiBAQAorICAgICAgICAgICtsaW5lIG9uZQorICAgICAgICAgICtsaW5lIHR3bworICAgICAgICAgIGRpZmYgLS1naXQgYS9vYnNvbGV0ZS50eHQgYi9vYnNvbGV0ZS50eHQKKyAgICAgICAgICBpbmRleCAwMDAwMDA1Li4wMDAwMDA2IDEwMDY0NAorICAgICAgICAgIC0tLSBhL29ic29sZXRlLnR4dAorICAgICAgICAgICsrKyAvZGV2L251bGwKKyAgICAgICAgICBAQCAtMSwyICswLDAgQEAKKyAgICAgICAgICAtbGluZSBhCisgICAgICAgICAgLWxpbmUgYgorICAgICAgICBESUZGCisgICAgICBlbmQKKworICAgICAgaXQgInBhcnNlcyBhbmQgcmV0dXJucyBhIGhhc2ggb2YgbGluZSByYW5nZXMgcGVyIGZpbGUsIGlnbm9yaW5nIGRlbGV0ZWQgZmlsZXMiIGRvCisgICAgICAgIHJlc3VsdCA9IGV4dHJhY3Rvci5jYWxsCisKKyAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8gZXEoCisgICAgICAgICAgImxpYi9zYW1wbGUucmIiICAgICAgPT4gW1s1LCA1XSwgWzExLCAxNF1dLAorICAgICAgICAgICJhcHAvbW9kZWxzL3VzZXIucmIiID0+IFtbMSwgMl1dCisgICAgICAgICkKKworICAgICAgICBleHBlY3QocmVzdWx0KS5ub3RfdG8gaGF2ZV9rZXkoIm9ic29sZXRlLnR4dCIpCisgICAgICBlbmQKKworICAgICAgaXQgImRvZXMgbm90IGluY2x1ZGUgcmVtb3ZlZCBsaW5lcyIgZG8KKyAgICAgICAgcmVzdWx0ID0gZXh0cmFjdG9yLmNhbGwKKyAgICAgICAgIyBFbnN1cmUgbm8gbmVnYXRpdmUgc2lkZSBsaW5lIG51bWJlcnMgKGUuZy4sIDEwIGZyb20gLTEwLDIgZXRjLikKKyAgICAgICAgZXhwZWN0KHJlc3VsdC52YWx1ZXMuZmxhdHRlbikubm90X3RvIGluY2x1ZGUoMTApCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGNvbnRleHQgIndpdGggY29uc2VjdXRpdmUgbGluZSBhZGRpdGlvbnMiIGRvCisgICAgICBzdWJqZWN0KDpleHRyYWN0b3IpIHsgZGVzY3JpYmVkX2NsYXNzLm5ldyhkaWZmX3RleHQpIH0KKworICAgICAgbGV0KDpkaWZmX3RleHQpIGRvCisgICAgICAgIDw8fkRJRkYKKyAgICAgICAgICBkaWZmIC0tZ2l0IGEvdGVzdC5yYiBiL3Rlc3QucmIKKyAgICAgICAgICBpbmRleCAwMDAwMDAxLi4wMDAwMDAyIDEwMDY0NAorICAgICAgICAgIC0tLSBhL3Rlc3QucmIKKyAgICAgICAgICArKysgYi90ZXN0LnJiCisgICAgICAgICAgQEAgLTEsMCArMSw1IEBACisgICAgICAgICAgK2xpbmUgMQorICAgICAgICAgICtsaW5lIDIKKyAgICAgICAgICArbGluZSAzCisgICAgICAgICAgK2xpbmUgNAorICAgICAgICAgICtsaW5lIDUKKyAgICAgICAgRElGRgorICAgICAgZW5kCisKKyAgICAgIGl0ICJjb25zb2xpZGF0ZXMgY29uc2VjdXRpdmUgbGluZXMgaW50byBhIHNpbmdsZSByYW5nZSIgZG8KKyAgICAgICAgcmVzdWx0ID0gZXh0cmFjdG9yLmNhbGwKKworICAgICAgICBleHBlY3QocmVzdWx0KS50byBlcSgKKyAgICAgICAgICAidGVzdC5yYiIgPT4gW1sxLCA1XV0KKyAgICAgICAgKQorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBjb250ZXh0ICJ3aXRoIG5vbi1jb25zZWN1dGl2ZSBsaW5lIGFkZGl0aW9ucyIgZG8KKyAgICAgIHN1YmplY3QoOmV4dHJhY3RvcikgeyBkZXNjcmliZWRfY2xhc3MubmV3KGRpZmZfdGV4dCkgfQorCisgICAgICBsZXQoOmRpZmZfdGV4dCkgZG8KKyAgICAgICAgPDx+RElGRgorICAgICAgICAgIGRpZmYgLS1naXQgYS90ZXN0LnJiIGIvdGVzdC5yYgorICAgICAgICAgIGluZGV4IDAwMDAwMDEuLjAwMDAwMDIgMTAwNjQ0CisgICAgICAgICAgLS0tIGEvdGVzdC5yYgorICAgICAgICAgICsrKyBiL3Rlc3QucmIKKyAgICAgICAgICBAQCAtMSwwICsxLDEgQEAKKyAgICAgICAgICArbGluZSAxCisgICAgICAgICAgQEAgLTUsMCArNiwxIEBACisgICAgICAgICAgK2xpbmUgNgorICAgICAgICAgIEBAIC0xMCwwICsxMSwxIEBACisgICAgICAgICAgK2xpbmUgMTEKKyAgICAgICAgRElGRgorICAgICAgZW5kCisKKyAgICAgIGl0ICJjcmVhdGVzIHNlcGFyYXRlIHJhbmdlcyBmb3Igbm9uLWNvbnNlY3V0aXZlIGxpbmVzIiBkbworICAgICAgICByZXN1bHQgPSBleHRyYWN0b3IuY2FsbAorCisgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvIGVxKAorICAgICAgICAgICJ0ZXN0LnJiIiA9PiBbWzEsIDFdLCBbNiwgNl0sIFsxMSwgMTFdXQorICAgICAgICApCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGNvbnRleHQgIndpdGggbWl4ZWQgY29uc2VjdXRpdmUgYW5kIG5vbi1jb25zZWN1dGl2ZSBsaW5lcyIgZG8KKyAgICAgIHN1YmplY3QoOmV4dHJhY3RvcikgeyBkZXNjcmliZWRfY2xhc3MubmV3KGRpZmZfdGV4dCkgfQorCisgICAgICBsZXQoOmRpZmZfdGV4dCkgZG8KKyAgICAgICAgPDx+RElGRgorICAgICAgICAgIGRpZmYgLS1naXQgYS90ZXN0LnJiIGIvdGVzdC5yYgorICAgICAgICAgIGluZGV4IDAwMDAwMDEuLjAwMDAwMDIgMTAwNjQ0CisgICAgICAgICAgLS0tIGEvdGVzdC5yYgorICAgICAgICAgICsrKyBiL3Rlc3QucmIKKyAgICAgICAgICBAQCAtMSwwICsxLDMgQEAKKyAgICAgICAgICArbGluZSAxCisgICAgICAgICAgK2xpbmUgMgorICAgICAgICAgICtsaW5lIDMKKyAgICAgICAgICBAQCAtMTAsMCArMTEsMSBAQAorICAgICAgICAgICtsaW5lIDExCisgICAgICAgICAgQEAgLTE1LDAgKzE2LDIgQEAKKyAgICAgICAgICArbGluZSAxNgorICAgICAgICAgICtsaW5lIDE3CisgICAgICAgICAgQEAgLTI1LDAgKzI3LDEgQEAKKyAgICAgICAgICArbGluZSAyNworICAgICAgICBESUZGCisgICAgICBlbmQKKworICAgICAgaXQgImNyZWF0ZXMgYXBwcm9wcmlhdGUgcmFuZ2VzIGZvciBtaXhlZCBwYXR0ZXJucyIgZG8KKyAgICAgICAgcmVzdWx0ID0gZXh0cmFjdG9yLmNhbGwKKworICAgICAgICBleHBlY3QocmVzdWx0KS50byBlcSgKKyAgICAgICAgICAidGVzdC5yYiIgPT4gW1sxLCAzXSwgWzExLCAxMV0sIFsxNiwgMTddLCBbMjcsIDI3XV0KKyAgICAgICAgKQorICAgICAgZW5kCisgICAgZW5kCisgIGVuZAorCisgIGRlc2NyaWJlICIjY29uc29saWRhdGVfdG9fcmFuZ2VzIiBkbworICAgIHN1YmplY3QoOmV4dHJhY3RvcikgeyBkZXNjcmliZWRfY2xhc3MubmV3KCIiKSB9CisKKyAgICBpdCAicmV0dXJucyBlbXB0eSBhcnJheSBmb3IgZW1wdHkgaW5wdXQiIGRvCisgICAgICBleHBlY3QoZXh0cmFjdG9yLnNlbmQoOmNvbnNvbGlkYXRlX3RvX3JhbmdlcywgW10pKS50byBlcShbXSkKKyAgICBlbmQKKworICAgIGl0ICJyZXR1cm5zIHNpbmdsZSByYW5nZSBmb3Igc2luZ2xlIGxpbmUiIGRvCisgICAgICBleHBlY3QoZXh0cmFjdG9yLnNlbmQoOmNvbnNvbGlkYXRlX3RvX3JhbmdlcywgWzVdKSkudG8gZXEoW1s1LCA1XV0pCisgICAgZW5kCisKKyAgICBpdCAiY29uc29saWRhdGVzIGNvbnNlY3V0aXZlIGxpbmVzIiBkbworICAgICAgZXhwZWN0KGV4dHJhY3Rvci5zZW5kKDpjb25zb2xpZGF0ZV90b19yYW5nZXMsIFsxLCAyLCAzLCA0LCA1XSkpLnRvIGVxKFtbMSwgNV1dKQorICAgIGVuZAorCisgICAgaXQgImNyZWF0ZXMgc2VwYXJhdGUgcmFuZ2VzIGZvciBub24tY29uc2VjdXRpdmUgbGluZXMiIGRvCisgICAgICBleHBlY3QoZXh0cmFjdG9yLnNlbmQoOmNvbnNvbGlkYXRlX3RvX3JhbmdlcywgWzEsIDMsIDUsIDcsIDldKSkudG8gZXEoW1sxLCAxXSwgWzMsIDNdLCBbNSwgNV0sIFs3LCA3XSwgWzksIDldXSkKKyAgICBlbmQKKworICAgIGl0ICJoYW5kbGVzIG1peGVkIGNvbnNlY3V0aXZlIGFuZCBub24tY29uc2VjdXRpdmUgbGluZXMiIGRvCisgICAgICBleHBlY3QoZXh0cmFjdG9yLnNlbmQoOmNvbnNvbGlkYXRlX3RvX3JhbmdlcywgWzEsIDIsIDMsIDUsIDYsIDgsIDEwLCAxMSwgMTIsIDE1XSkpLnRvIGVxKAorICAgICAgICBbWzEsIDNdLCBbNSwgNl0sIFs4LCA4XSwgWzEwLCAxMl0sIFsxNSwgMTVdXQorICAgICAgKQorICAgIGVuZAorICBlbmQKK2VuZApkaWZmIC0tZ2l0IGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9tb2RpZmllZF91bmNvdmVyZWRfaW50ZXJzZWN0aW9uX3NwZWMucmIgYi9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL21vZGlmaWVkX3VuY292ZXJlZF9pbnRlcnNlY3Rpb25fc3BlYy5yYgpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5lNTExNTFkCi0tLSAvZGV2L251bGwKKysrIGIvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9tb2RpZmllZF91bmNvdmVyZWRfaW50ZXJzZWN0aW9uX3NwZWMucmIKQEAgLTAsMCArMSw4OCBAQAorIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKKworcmVxdWlyZSAic3BlY19oZWxwZXIiCisKK1JTcGVjLmRlc2NyaWJlIENvdmVyYWdlUmVwb3J0ZXI6Ok1vZGlmaWVkVW5jb3ZlcmVkSW50ZXJzZWN0aW9uIGRvCisgIGRlc2NyaWJlICIjY2FsbCIgZG8KKyAgICBjb250ZXh0ICJ3aGVuIHRoZSByYW5nZXMgYXJlIGVtcHR5IiBkbworICAgICAgaXQgInJldHVybnMgZW1wdHkgdW5jb3ZlcmVkIG1hcCIgZG8KKyAgICAgICAgYW5hbHlzZXIgPSBkZXNjcmliZWRfY2xhc3MubmV3KHVuY292ZXJlZF9yYW5nZXM6IHt9LCBtb2RpZmllZF9yYW5nZXM6IHt9KQorICAgICAgICByZXN1bHQgPSBhbmFseXNlci5jYWxsCisKKyAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8gYmVfZW1wdHkKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgY29udGV4dCAid2l0aCBwYXJ0aWFsIGNvdmVyYWdlIGluIGEgc2luZ2xlIGZpbGUiIGRvCisgICAgICBpdCAiZmluZHMgb3ZlcmxhcHBpbmcgdW5jb3ZlcmVkIHJhbmdlcyIgZG8KKyAgICAgICAgdW5jb3ZlcmVkX3JhbmdlcyA9IHsgImxpYi9mb28ucmIiID0+IFtbMTAsIDEwXSwgWzEyLCAxM11dIH0KKyAgICAgICAgbW9kaWZpZWRfcmFuZ2VzID0geyAibGliL2Zvby5yYiIgPT4gW1sxMCwgMTJdXSB9CisKKyAgICAgICAgcmVzdWx0ID0gZGVzY3JpYmVkX2NsYXNzLm5ldyh1bmNvdmVyZWRfcmFuZ2VzOiwgbW9kaWZpZWRfcmFuZ2VzOikuY2FsbAorCisgICAgICAgIGV4cGVjdChyZXN1bHQua2V5cykudG8gY29udGFpbl9leGFjdGx5KCJsaWIvZm9vLnJiIikKKyAgICAgICAgZXhwZWN0KHJlc3VsdFsibGliL2Zvby5yYiJdKS50byBlcShbWzEwLCAxMF0sIFsxMiwgMTJdXSkKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgY29udGV4dCAid2hlbiBjb3ZlcmFnZSBjb250YWlucyByYW5nZXMgbm90IGluIGRpZmYiIGRvCisgICAgICBpdCAiZmluZHMgaW50ZXJzZWN0aW9uIG9mIHJhbmdlcyIgZG8KKyAgICAgICAgdW5jb3ZlcmVkX3JhbmdlcyA9IHsgImxpYi9iYXIucmIiID0+IFtbMSwgNF1dIH0KKyAgICAgICAgbW9kaWZpZWRfcmFuZ2VzID0geyAibGliL2Jhci5yYiIgPT4gW1syLCAzXV0gfQorCisgICAgICAgIHJlc3VsdCA9IGRlc2NyaWJlZF9jbGFzcy5uZXcodW5jb3ZlcmVkX3JhbmdlczosIG1vZGlmaWVkX3JhbmdlczopLmNhbGwKKworICAgICAgICBleHBlY3QocmVzdWx0WyJsaWIvYmFyLnJiIl0pLnRvIGVxKFtbMiwgM11dKQorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBjb250ZXh0ICJ3aGVuIHRoZSBmaWxlIGluIGRpZmYgaGFzIG5vIGNvdmVyYWdlIGVudHJ5IiBkbworICAgICAgaXQgInNraXBzIHRoZSBmaWxlIGVudGlyZWx5IiBkbworICAgICAgICB1bmNvdmVyZWRfcmFuZ2VzID0ge30KKyAgICAgICAgbW9kaWZpZWRfcmFuZ2VzID0geyAibGliL21pc3NpbmcucmIiID0+IFtbNSwgN11dIH0KKworICAgICAgICByZXN1bHQgPSBkZXNjcmliZWRfY2xhc3MubmV3KHVuY292ZXJlZF9yYW5nZXM6LCBtb2RpZmllZF9yYW5nZXM6KS5jYWxsCisKKyAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8gYmVfZW1wdHkKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgY29udGV4dCAid2l0aCBtdWx0aXBsZSBmaWxlcyBhbmQgbWl4ZWQgY292ZXJhZ2UiIGRvCisgICAgICBpdCAiZmluZHMgb3ZlcmxhcHBpbmcgdW5jb3ZlcmVkIHJhbmdlcyBmb3IgZWFjaCBmaWxlIiBkbworICAgICAgICB1bmNvdmVyZWRfcmFuZ2VzID0geworICAgICAgICAgICJhcHAvbW9kZWxzL3VzZXIucmIiICAgICAgICAgICAgICAgICAgPT4gW1sxMCwgMTJdLCBbMTUsIDE1XV0sCisgICAgICAgICAgImFwcC9jb250cm9sbGVycy91c2Vyc19jb250cm9sbGVyLnJiIiA9PiBbWzIsIDNdXSwKKyAgICAgICAgICAibGliL3V0aWwucmIiICAgICAgICAgICAgICAgICAgICAgICAgID0+IFtbMTAwLCAxMDBdXQorICAgICAgICB9CisgICAgICAgIG1vZGlmaWVkX3JhbmdlcyA9IHsKKyAgICAgICAgICAiYXBwL21vZGVscy91c2VyLnJiIiAgICAgICAgICAgICAgICAgID0+IFtbMTAsIDExXSwgWzEzLCAxNV1dLAorICAgICAgICAgICJhcHAvY29udHJvbGxlcnMvdXNlcnNfY29udHJvbGxlci5yYiIgPT4gW1sxLCA0XV0sCisgICAgICAgICAgImxpYi91dGlsLnJiIiAgICAgICAgICAgICAgICAgICAgICAgICA9PiBbXSwKKyAgICAgICAgICAibGliL2lnbm9yZWQucmIiICAgICAgICAgICAgICAgICAgICAgID0+IG5pbAorICAgICAgICB9CisKKyAgICAgICAgcmVzdWx0ID0gZGVzY3JpYmVkX2NsYXNzLm5ldyh1bmNvdmVyZWRfcmFuZ2VzOiwgbW9kaWZpZWRfcmFuZ2VzOikuY2FsbAorCisgICAgICAgIGV4cGVjdChyZXN1bHQua2V5cykudG8gY29udGFpbl9leGFjdGx5KAorICAgICAgICAgICJhcHAvbW9kZWxzL3VzZXIucmIiLAorICAgICAgICAgICJhcHAvY29udHJvbGxlcnMvdXNlcnNfY29udHJvbGxlci5yYiIsCisgICAgICAgICAgImxpYi91dGlsLnJiIgorICAgICAgICApCisgICAgICAgIGV4cGVjdChyZXN1bHRbImFwcC9tb2RlbHMvdXNlci5yYiJdKS50byBlcShbWzEwLCAxMV0sIFsxNSwgMTVdXSkKKyAgICAgICAgZXhwZWN0KHJlc3VsdFsiYXBwL2NvbnRyb2xsZXJzL3VzZXJzX2NvbnRyb2xsZXIucmIiXSkudG8gZXEoW1syLCAzXV0pCisgICAgICAgIGV4cGVjdChyZXN1bHRbImxpYi91dGlsLnJiIl0pLnRvIGVxKFtdKQorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBjb250ZXh0ICJ3aXRoIHJhbmdlIGludGVyc2VjdGlvbnMiIGRvCisgICAgICBpdCAiZmluZHMgY29ycmVjdCBvdmVybGFwcGluZyByYW5nZXMiIGRvCisgICAgICAgIHVuY292ZXJlZF9yYW5nZXMgPSB7ICJsaWIvcm91bmQucmIiID0+IFtbMSwgMV1dIH0KKyAgICAgICAgbW9kaWZpZWRfcmFuZ2VzID0geyAibGliL3JvdW5kLnJiIiA9PiBbWzEsIDNdXSB9CisKKyAgICAgICAgcmVzdWx0ID0gZGVzY3JpYmVkX2NsYXNzLm5ldyh1bmNvdmVyZWRfcmFuZ2VzOiwgbW9kaWZpZWRfcmFuZ2VzOikuY2FsbAorCisgICAgICAgIGV4cGVjdChyZXN1bHRbImxpYi9yb3VuZC5yYiJdKS50byBlcShbWzEsIDFdXSkKKyAgICAgIGVuZAorICAgIGVuZAorICBlbmQKK2VuZApkaWZmIC0tZ2l0IGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9vcHRpb25zX3NwZWMucmIgYi9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL29wdGlvbnNfc3BlYy5yYgppbmRleCAzZDBmMGUyLi45Y2MwYzBmIDEwMDY0NAotLS0gYS9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL29wdGlvbnNfc3BlYy5yYgorKysgYi9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL29wdGlvbnNfc3BlYy5yYgpAQCAtNCw2NiArNCw0NSBAQAogCiBSU3BlYy5kZXNjcmliZSBDb3ZlcmFnZVJlcG9ydGVyOjpPcHRpb25zIGRvCiAgIGRlc2NyaWJlICIucGFyc2UiIGRvCi0gICAgY29udGV4dCAid2hlbiBkZWZhdWx0cyBpbmNsdWRlIHRva2VuIGFuZCBidWlsZF91cmwgYW5kIG5vIENMSSBvcHRpb25zIiBkbwotICAgICAgeGl0ICJyZXR1cm5zIHRoZSBkZWZhdWx0cyIgZG8KLSAgICAgICAgcmVzdWx0ID0gZGVzY3JpYmVkX2NsYXNzLnBhcnNlKFtdKQotCi0gICAgICAgIGV4cGVjdChyZXN1bHRbOmNvdmVyYWdlX3BhdGhdKS50byBlcSgiY292ZXJhZ2UvLnJlc3VsdHNldC5qc29uIikKLSAgICAgICAgZXhwZWN0KHJlc3VsdFs6aHRtbF9yb290XSkudG8gZXEoImNvdmVyYWdlIikKLSAgICAgICAgZXhwZWN0KHJlc3VsdFs6YmFzZV9yZWZdKS50byBlcSgib3JpZ2luL21haW4iKQotICAgICAgICBleHBlY3QocmVzdWx0WzpidWlsZF91cmxdKS50byBlcSgiaHR0cHM6Ly9jaS5leGFtcGxlL2J1aWxkLzEyMyIpCi0gICAgICAgIGV4cGVjdChyZXN1bHRbOmdpdGh1Yl90b2tlbl0pLnRvIGVxKCJzZWNyZXQtdG9rZW4iKQotICAgICAgZW5kCi0gICAgZW5kCi0KICAgICBjb250ZXh0ICJ3aGVuIG92ZXJyaWRpbmcgYWxsIG9wdGlvbnMgdmlhIENMSSBhcmdzIiBkbwotICAgICAgeGl0ICJhcHBsaWVzIHRoZSBvdmVycmlkZXMiIGRvCisgICAgICBpdCAiYXBwbGllcyB0aGUgb3ZlcnJpZGVzIiBkbwogICAgICAgICBhcmdzID0gWwotICAgICAgICAgICItLWNvdmVyYWdlLXBhdGgiLAorICAgICAgICAgICItLWNvdmVyYWdlLXJlcG9ydC1wYXRoIiwKICAgICAgICAgICAiY292L21lcmdlZC5qc29uIiwKLSAgICAgICAgICAiLS1odG1sLXJvb3QiLAotICAgICAgICAgICJjb3YvaHRtbCIsCi0gICAgICAgICAgIi0tYmFzZS1yZWYiLAotICAgICAgICAgICJ1cHN0cmVhbS9kZXZlbG9wIiwKICAgICAgICAgICAiLS1idWlsZC11cmwiLAogICAgICAgICAgICJodHRwczovL2NpLm90aGVyL2J1aWxkLzk5OSIsCiAgICAgICAgICAgIi0tZ2l0aHViLXRva2VuIiwKLSAgICAgICAgICAiY2xpLXRva2VuIgorICAgICAgICAgICJjbGktdG9rZW4iLAorICAgICAgICAgICItLWNvbW1pdC1zaGEiLAorICAgICAgICAgICJhYmMxMjMiLAorICAgICAgICAgICItLXByLW51bWJlciIsCisgICAgICAgICAgIjQyIiwKKyAgICAgICAgICAiLS1yZXBvIiwKKyAgICAgICAgICAib3duZXIvcmVwbyIKICAgICAgICAgXQogCiAgICAgICAgIHJlc3VsdCA9IGRlc2NyaWJlZF9jbGFzcy5wYXJzZShhcmdzKQogCiAgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvIGluY2x1ZGUoCi0gICAgICAgICAgY292ZXJhZ2VfcGF0aDogImNvdi9tZXJnZWQuanNvbiIsCi0gICAgICAgICAgaHRtbF9yb290OiAgICAgImNvdi9odG1sIiwKLSAgICAgICAgICBiYXNlX3JlZjogICAgICAidXBzdHJlYW0vZGV2ZWxvcCIsCi0gICAgICAgICAgYnVpbGRfdXJsOiAgICAgImh0dHBzOi8vY2kub3RoZXIvYnVpbGQvOTk5IiwKLSAgICAgICAgICBnaXRodWJfdG9rZW46ICAiY2xpLXRva2VuIgorICAgICAgICAgIGNvdmVyYWdlX3JlcG9ydF9wYXRoOiAiY292L21lcmdlZC5qc29uIiwKKyAgICAgICAgICBidWlsZF91cmw6ICAgICAgICAgICAgImh0dHBzOi8vY2kub3RoZXIvYnVpbGQvOTk5IiwKKyAgICAgICAgICBnaXRodWJfdG9rZW46ICAgICAgICAgImNsaS10b2tlbiIsCisgICAgICAgICAgY29tbWl0X3NoYTogICAgICAgICAgICJhYmMxMjMiLAorICAgICAgICAgIHByX251bWJlcjogICAgICAgICAgICAiNDIiLAorICAgICAgICAgIHJlcG86ICAgICAgICAgICAgICAgICAib3duZXIvcmVwbyIKICAgICAgICAgKQogICAgICAgZW5kCiAgICAgZW5kCiAKLSAgICBjb250ZXh0ICJ3aGVuIGdpdGh1YiB0b2tlbiBpcyBtaXNzaW5nIChub3QgcHJvdmlkZWQgaW4gZGVmYXVsdHMgb3IgQ0xJKSIgZG8KLSAgICAgIHhpdCAiYWJvcnRzIHdpdGggYW4gZXhwbGFuYXRvcnkgbWVzc2FnZSIgZG8KLSAgICAgICAgZXhwZWN0IGRvCi0gICAgICAgICAgZGVzY3JpYmVkX2NsYXNzLnBhcnNlKFtdKQotICAgICAgICBlbmQudG8gcmFpc2VfZXJyb3IoU3lzdGVtRXhpdCkgeyB8ZXwKLSAgICAgICAgICBleHBlY3QoZS5zdGF0dXMpLm5vdF90byBlcSgwKQotICAgICAgICAgIGV4cGVjdChlLm1lc3NhZ2UpLnRvIGluY2x1ZGUoImNvdmVyYWdlX2NvbW1lbnRlcjogbWlzc2luZyByZXF1aXJlZCBvcHRpb24ocyk6IC0tZ2l0aHViLXRva2VuIG9yICRHSVRIVUJfVE9LRU4iKQotICAgICAgICB9Ci0gICAgICBlbmQKLSAgICBlbmQKLQogICAgIGNvbnRleHQgIndoZW4gZ2l0aHViIHRva2VuIHByb3ZpZGVkIHZpYSBDTEkgYnV0IG5vdCBpbiBkZWZhdWx0cyIgZG8KLSAgICAgIHhpdCAic3VjY2VlZHMgYW5kIHNldHMgdGhlIHRva2VuIiBkbworICAgICAgaXQgInN1Y2NlZWRzIGFuZCBzZXRzIHRoZSB0b2tlbiIgZG8KICAgICAgICAgcmVzdWx0ID0gZGVzY3JpYmVkX2NsYXNzLnBhcnNlKFsiLS1naXRodWItdG9rZW4iLCAic3VwcGxpZWQiXSkKICAgICAgICAgZXhwZWN0KHJlc3VsdFs6Z2l0aHViX3Rva2VuXSkudG8gZXEoInN1cHBsaWVkIikKLSAgICAgICAgZXhwZWN0KHJlc3VsdFs6YnVpbGRfdXJsXSkudG8gYmVfbmlsCiAgICAgICBlbmQKICAgICBlbmQKIAogICAgIGNvbnRleHQgIndoZW4gaGVscCBmbGFnIC1oIGlzIHByb3ZpZGVkIHdpdGggbm8gdG9rZW4iIGRvCi0gICAgICB4aXQgInByaW50cyB1c2FnZSBhbmQgZXhpdHMgMCBiZWZvcmUgdmFsaWRhdGlvbiIgZG8KKyAgICAgIGl0ICJwcmludHMgdXNhZ2UgYW5kIGV4aXRzIDAgYmVmb3JlIHZhbGlkYXRpb24iIGRvCiAgICAgICAgIGV4cGVjdChkZXNjcmliZWRfY2xhc3MpLm5vdF90byByZWNlaXZlKDp2YWxpZGF0ZSEpCiAgICAgICAgIGV4cGVjdCBkbwogICAgICAgICAgIGRlc2NyaWJlZF9jbGFzcy5wYXJzZShbIi1oIl0pCkBAIC03NCwxMCArNTMsMTAgQEAKICAgICBlbmQKIAogICAgIGNvbnRleHQgIndoZW4gaGVscCBmbGFnIC0taGVscCBpcyBwcm92aWRlZCB3aXRoIG90aGVyIGFyZ3VtZW50cyIgZG8KLSAgICAgIHhpdCAicHJpbnRzIHVzYWdlIGFuZCBleGl0cyAwIGVhcmx5IiBkbworICAgICAgaXQgInByaW50cyB1c2FnZSBhbmQgZXhpdHMgMCBlYXJseSIgZG8KICAgICAgICAgZXhwZWN0KGRlc2NyaWJlZF9jbGFzcykubm90X3RvIHJlY2VpdmUoOnZhbGlkYXRlISkKICAgICAgICAgZXhwZWN0IGRvCi0gICAgICAgICAgZGVzY3JpYmVkX2NsYXNzLnBhcnNlKFsiLS1oZWxwIiwgIi0tY292ZXJhZ2UtcGF0aCIsICJpZ25vcmVkIl0pCisgICAgICAgICAgZGVzY3JpYmVkX2NsYXNzLnBhcnNlKFsiLS1oZWxwIiwgIi0tY292ZXJhZ2UtcmVwb3J0LXBhdGgiLCAiaWdub3JlZCJdKQogICAgICAgICBlbmQudG8gcmFpc2VfZXJyb3IoU3lzdGVtRXhpdCkgeyB8ZXwKICAgICAgICAgICBleHBlY3QoZS5zdGF0dXMpLnRvIGVxKDApCiAgICAgICAgIH0KQEAgLTg1LDI5ICs2NCwyOSBAQAogICAgIGVuZAogCiAgICAgY29udGV4dCAiaW1tdXRhYmlsaXR5IC8gaW5kZXBlbmRlbmNlIG9mIHJldHVybmVkIGhhc2giIGRvCi0gICAgICB4aXQgInJldHVybnMgYSBuZXcgaGFzaCAobXV0YXRpbmcgcmVzdWx0IGRvZXMgbm90IGNoYW5nZSBkZWZhdWx0cykiIGRvCi0gICAgICAgIHJlc3VsdCA9IGRlc2NyaWJlZF9jbGFzcy5wYXJzZShbXSkKKyAgICAgIGl0ICJyZXR1cm5zIGEgbmV3IGhhc2ggKG11dGF0aW5nIHJlc3VsdCBkb2VzIG5vdCBjaGFuZ2UgZGVmYXVsdHMpIiBkbworICAgICAgICByZXN1bHQgPSBkZXNjcmliZWRfY2xhc3MucGFyc2UoWyItLWdpdGh1Yi10b2tlbiIsICJ0ZXN0Il0pCiAgICAgICAgIHJlc3VsdFs6Y292ZXJhZ2VfcGF0aF0gPSAiY2hhbmdlZCIKIAotICAgICAgICBhZ2FpbiA9IGRlc2NyaWJlZF9jbGFzcy5wYXJzZShbXSkKLSAgICAgICAgZXhwZWN0KGFnYWluWzpjb3ZlcmFnZV9wYXRoXSkudG8gZXEoImNvdmVyYWdlLy5yZXN1bHRzZXQuanNvbiIpCisgICAgICAgIGFnYWluID0gZGVzY3JpYmVkX2NsYXNzLnBhcnNlKFsiLS1naXRodWItdG9rZW4iLCAidGVzdCJdKQorICAgICAgICBleHBlY3QoYWdhaW5bOmNvdmVyYWdlX3BhdGhdKS50byBiZV9uaWwKICAgICAgIGVuZAogICAgIGVuZAogCiAgICAgY29udGV4dCAid2hlbiBkZWZhdWx0cyBwcm92aWRlIHRva2VuIHdpdGggc3Vycm91bmRpbmcgd2hpdGVzcGFjZSIgZG8KLSAgICAgIHhpdCAiYWNjZXB0cyBhZnRlciBzdHJpcHBpbmcgd2l0aG91dCBlcnJvciIgZG8KLSAgICAgICAgZXhwZWN0IHsgZGVzY3JpYmVkX2NsYXNzLnBhcnNlKFtdKSB9Lm5vdF90byByYWlzZV9lcnJvcgorICAgICAgaXQgImFjY2VwdHMgYWZ0ZXIgc3RyaXBwaW5nIHdpdGhvdXQgZXJyb3IiIGRvCisgICAgICAgIGV4cGVjdCB7IGRlc2NyaWJlZF9jbGFzcy5wYXJzZShbIi0tZ2l0aHViLXRva2VuIiwgIiAgdGVzdCAgIl0pIH0ubm90X3RvIHJhaXNlX2Vycm9yCiAgICAgICBlbmQKICAgICBlbmQKICAgZW5kCiAKICAgZGVzY3JpYmUgIi52YWxpZGF0ZSEiIGRvCi0gICAgeGl0ICJkb2VzIG5vdGhpbmcgd2hlbiBnaXRodWJfdG9rZW4gcHJlc2VudCIgZG8KKyAgICBpdCAiZG9lcyBub3RoaW5nIHdoZW4gZ2l0aHViX3Rva2VuIHByZXNlbnQiIGRvCiAgICAgICBvcHRzID0geyBnaXRodWJfdG9rZW46ICJ0b2tlbiIgfQogICAgICAgZXhwZWN0IHsgZGVzY3JpYmVkX2NsYXNzLnZhbGlkYXRlIShvcHRzKSB9Lm5vdF90byByYWlzZV9lcnJvcgogICAgIGVuZAogCi0gICAgeGl0ICJhYm9ydHMgd2hlbiBnaXRodWJfdG9rZW4gYmxhbmsgc3RyaW5nIiBkbworICAgIGl0ICJhYm9ydHMgd2hlbiBnaXRodWJfdG9rZW4gYmxhbmsgc3RyaW5nIiBkbwogICAgICAgb3B0cyA9IHsgZ2l0aHViX3Rva2VuOiAiIiB9CiAgICAgICBleHBlY3QgZG8KICAgICAgICAgZGVzY3JpYmVkX2NsYXNzLnZhbGlkYXRlIShvcHRzKQpAQCAtMTE2LDcgKzk1LDcgQEAKICAgICAgIH0KICAgICBlbmQKIAotICAgIHhpdCAiYWJvcnRzIHdoZW4gZ2l0aHViX3Rva2VuIG5pbCIgZG8KKyAgICBpdCAiYWJvcnRzIHdoZW4gZ2l0aHViX3Rva2VuIG5pbCIgZG8KICAgICAgIG9wdHMgPSB7IGdpdGh1Yl90b2tlbjogbmlsIH0KICAgICAgIGV4cGVjdCB7IGRlc2NyaWJlZF9jbGFzcy52YWxpZGF0ZSEob3B0cykgfS50byByYWlzZV9lcnJvcihTeXN0ZW1FeGl0KQogICAgIGVuZApkaWZmIC0tZ2l0IGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9wdWxsX3JlcXVlc3Rfc3BlYy5yYiBiL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvcHVsbF9yZXF1ZXN0X3NwZWMucmIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMjVmOTQ2MwotLS0gL2Rldi9udWxsCisrKyBiL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvcHVsbF9yZXF1ZXN0X3NwZWMucmIKQEAgLTAsMCArMSw3NTMgQEAKKyMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlCisKK3JlcXVpcmUgInNwZWNfaGVscGVyIgorcmVxdWlyZSAiY292ZXJhZ2VfcmVwb3J0ZXIvcHVsbF9yZXF1ZXN0IgorCisjIFRlc3QgY2xhc3NlcyBmb3IgdmVyaWZpZWQgZG91YmxlcworY2xhc3MgUHVsbFJlcXVlc3REYXRhCisgIGF0dHJfcmVhZGVyIDpoZWFkCisKKyAgZGVmIGluaXRpYWxpemUoaGVhZCkKKyAgICBAaGVhZCA9IGhlYWQKKyAgZW5kCitlbmQKKworY2xhc3MgSGVhZAorICBhdHRyX3JlYWRlciA6c2hhCisKKyAgZGVmIGluaXRpYWxpemUoc2hhKQorICAgIEBzaGEgPSBzaGEKKyAgZW5kCitlbmQKKworUlNwZWMuZGVzY3JpYmUgQ292ZXJhZ2VSZXBvcnRlcjo6UHVsbFJlcXVlc3QgZG8KKyAgbGV0KDpnaXRodWJfdG9rZW4pIHsgImdocF90ZXN0X3Rva2VuIiB9CisgIGxldCg6cHVsbF9yZXF1ZXN0KSB7IGRlc2NyaWJlZF9jbGFzcy5uZXcoZ2l0aHViX3Rva2VuOiwgcmVwbzosIHByX251bWJlcjopIH0KKyAgbGV0KDpyZXBvKSB7ICJvd25lci9yZXBvIiB9CisgIGxldCg6cHJfbnVtYmVyKSB7ICIxMjMiIH0KKyAgbGV0KDpjbGllbnQpIHsgaW5zdGFuY2VfZG91YmxlKE9jdG9raXQ6OkNsaWVudCkgfQorCisgIGJlZm9yZSBkbworICAgIGFsbG93KE9jdG9raXQ6OkNsaWVudCkudG8gcmVjZWl2ZSg6bmV3KS53aXRoKGFjY2Vzc190b2tlbjogZ2l0aHViX3Rva2VuKS5hbmRfcmV0dXJuKGNsaWVudCkKKyAgICBhbGxvdyhjbGllbnQpLnRvIHJlY2VpdmUoOmF1dG9fcGFnaW5hdGU9KS53aXRoKHRydWUpCisgIGVuZAorCisgIGRlc2NyaWJlICIjaW5pdGlhbGl6ZSIgZG8KKyAgICBjb250ZXh0ICJ3aXRoIHZhbGlkIHBhcmFtZXRlcnMiIGRvCisgICAgICBpdCAiY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSIgZG8KKyAgICAgICAgZXhwZWN0KHB1bGxfcmVxdWVzdCkudG8gYmVfYShkZXNjcmliZWRfY2xhc3MpCisgICAgICBlbmQKKworICAgICAgaXQgInNldHMgdXAgdGhlIE9jdG9raXQgY2xpZW50IHdpdGggY29ycmVjdCBvcHRpb25zIiBkbworICAgICAgICBwdWxsX3JlcXVlc3QgIyBGb3JjZSBldmFsdWF0aW9uIG9mIHRoZSBsZXQKKyAgICAgICAgZXhwZWN0KE9jdG9raXQ6OkNsaWVudCkudG8gaGF2ZV9yZWNlaXZlZCg6bmV3KS53aXRoKGFjY2Vzc190b2tlbjogZ2l0aHViX3Rva2VuKQorICAgICAgICBleHBlY3QoY2xpZW50KS50byBoYXZlX3JlY2VpdmVkKDphdXRvX3BhZ2luYXRlPSkud2l0aCh0cnVlKQorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBjb250ZXh0ICJ3aXRoIHJlcG9zaXRvcnkgbm9ybWFsaXphdGlvbiIgZG8KKyAgICAgIGl0ICJrZWVwcyBvd25lci9yZXBvIGZvcm1hdCBhcyBpcyIgZG8KKyAgICAgICAgZGVzY3JpYmVkX2NsYXNzLm5ldyhnaXRodWJfdG9rZW46LCByZXBvOiAib3duZXIvcmVwbyIsIHByX251bWJlcjopCisgICAgICAgIGV4cGVjdChPY3Rva2l0OjpDbGllbnQpLnRvIGhhdmVfcmVjZWl2ZWQoOm5ldykud2l0aChhY2Nlc3NfdG9rZW46IGdpdGh1Yl90b2tlbikKKyAgICAgIGVuZAorCisgICAgICBpdCAiZXh0cmFjdHMgb3duZXIvcmVwbyBmcm9tIGZ1bGwgR2l0SHViIFVSTCIgZG8KKyAgICAgICAgZGVzY3JpYmVkX2NsYXNzLm5ldyhnaXRodWJfdG9rZW46LCByZXBvOiAiaHR0cHM6Ly9naXRodWIuY29tL293bmVyL3JlcG8iLCBwcl9udW1iZXI6KQorICAgICAgICBleHBlY3QoT2N0b2tpdDo6Q2xpZW50KS50byBoYXZlX3JlY2VpdmVkKDpuZXcpLndpdGgoYWNjZXNzX3Rva2VuOiBnaXRodWJfdG9rZW4pCisgICAgICBlbmQKKworICAgICAgaXQgImV4dHJhY3RzIG93bmVyL3JlcG8gZnJvbSBHaXRIdWIgVVJMIHdpdGggLmdpdCBzdWZmaXgiIGRvCisgICAgICAgIGRlc2NyaWJlZF9jbGFzcy5uZXcoZ2l0aHViX3Rva2VuOiwgcmVwbzogImh0dHBzOi8vZ2l0aHViLmNvbS9vd25lci9yZXBvLmdpdCIsIHByX251bWJlcjopCisgICAgICAgIGV4cGVjdChPY3Rva2l0OjpDbGllbnQpLnRvIGhhdmVfcmVjZWl2ZWQoOm5ldykud2l0aChhY2Nlc3NfdG9rZW46IGdpdGh1Yl90b2tlbikKKyAgICAgIGVuZAorCisgICAgICBpdCAicmFpc2VzIEFyZ3VtZW50RXJyb3IgZm9yIGludmFsaWQgcmVwbyBmb3JtYXQiIGRvCisgICAgICAgIGV4cGVjdCBkbworICAgICAgICAgIGRlc2NyaWJlZF9jbGFzcy5uZXcoZ2l0aHViX3Rva2VuOiwgcmVwbzogImp1c3QtcmVwby1uYW1lIiwgcHJfbnVtYmVyOikKKyAgICAgICAgZW5kLnRvIHJhaXNlX2Vycm9yKEFyZ3VtZW50RXJyb3IsICJSZXBvc2l0b3J5IG11c3QgYmUgaW4gZm9ybWF0ICdvd25lci9yZXBvJyBvciBhIGZ1bGwgR2l0SHViIFVSTCIpCisgICAgICBlbmQKKyAgICBlbmQKKyAgZW5kCisKKyAgZGVzY3JpYmUgIiNpbmxpbmVfY29tbWVudHMiIGRvCisgICAgbGV0KDpjb21tZW50cykgeyBbeyBpZDogMSwgYm9keTogIkNvbW1lbnQgMSIgfSwgeyBpZDogMiwgYm9keTogIkNvbW1lbnQgMiIgfV0gfQorCisgICAgYmVmb3JlIGRvCisgICAgICBhbGxvdyhjbGllbnQpLnRvIHJlY2VpdmUoOnB1bGxfcmVxdWVzdF9jb21tZW50cykud2l0aChyZXBvLCBwcl9udW1iZXIpLmFuZF9yZXR1cm4oY29tbWVudHMpCisgICAgZW5kCisKKyAgICBpdCAicmV0dXJucyBwdWxsIHJlcXVlc3QgY29tbWVudHMiIGRvCisgICAgICBleHBlY3QocHVsbF9yZXF1ZXN0LmlubGluZV9jb21tZW50cykudG8gZXEoY29tbWVudHMpCisgICAgZW5kCisKKyAgICBpdCAiY2FsbHMgdGhlIGNsaWVudCB3aXRoIGNvcnJlY3QgcGFyYW1ldGVycyIgZG8KKyAgICAgIHB1bGxfcmVxdWVzdC5pbmxpbmVfY29tbWVudHMKKyAgICAgIGV4cGVjdChjbGllbnQpLnRvIGhhdmVfcmVjZWl2ZWQoOnB1bGxfcmVxdWVzdF9jb21tZW50cykud2l0aChyZXBvLCBwcl9udW1iZXIpCisgICAgZW5kCisgIGVuZAorCisgIGRlc2NyaWJlICIjZ2xvYmFsX2NvbW1lbnRzIiBkbworICAgIGxldCg6Y29tbWVudHMpIHsgW3sgaWQ6IDEsIGJvZHk6ICJHbG9iYWwgY29tbWVudCAxIiB9XSB9CisKKyAgICBiZWZvcmUgZG8KKyAgICAgIGFsbG93KGNsaWVudCkudG8gcmVjZWl2ZSg6aXNzdWVfY29tbWVudHMpLndpdGgocmVwbywgcHJfbnVtYmVyKS5hbmRfcmV0dXJuKGNvbW1lbnRzKQorICAgIGVuZAorCisgICAgaXQgInJldHVybnMgaXNzdWUgY29tbWVudHMiIGRvCisgICAgICBleHBlY3QocHVsbF9yZXF1ZXN0Lmdsb2JhbF9jb21tZW50cykudG8gZXEoY29tbWVudHMpCisgICAgZW5kCisKKyAgICBpdCAiY2FsbHMgdGhlIGNsaWVudCB3aXRoIGNvcnJlY3QgcGFyYW1ldGVycyIgZG8KKyAgICAgIHB1bGxfcmVxdWVzdC5nbG9iYWxfY29tbWVudHMKKyAgICAgIGV4cGVjdChjbGllbnQpLnRvIGhhdmVfcmVjZWl2ZWQoOmlzc3VlX2NvbW1lbnRzKS53aXRoKHJlcG8sIHByX251bWJlcikKKyAgICBlbmQKKyAgZW5kCisKKyAgZGVzY3JpYmUgIiNsYXRlc3RfY29tbWl0X3NoYSIgZG8KKyAgICBsZXQoOmNvbW1pdF9zaGEpIHsgImFiYzEyM2RlZjQ1NiIgfQorICAgIGxldCg6cHVsbF9yZXF1ZXN0X2RhdGEpIHsgaW5zdGFuY2VfZG91YmxlKFB1bGxSZXF1ZXN0RGF0YSwgaGVhZDogaW5zdGFuY2VfZG91YmxlKEhlYWQsIHNoYTogY29tbWl0X3NoYSkpIH0KKworICAgIGJlZm9yZSBkbworICAgICAgYWxsb3coY2xpZW50KS50byByZWNlaXZlKDpwdWxsX3JlcXVlc3QpLndpdGgocmVwbywgcHJfbnVtYmVyKS5hbmRfcmV0dXJuKHB1bGxfcmVxdWVzdF9kYXRhKQorICAgIGVuZAorCisgICAgaXQgInJldHVybnMgdGhlIGxhdGVzdCBjb21taXQgU0hBIiBkbworICAgICAgZXhwZWN0KHB1bGxfcmVxdWVzdC5sYXRlc3RfY29tbWl0X3NoYSkudG8gZXEoY29tbWl0X3NoYSkKKyAgICBlbmQKKworICAgIGl0ICJjYWxscyB0aGUgY2xpZW50IHdpdGggY29ycmVjdCBwYXJhbWV0ZXJzIiBkbworICAgICAgcHVsbF9yZXF1ZXN0LmxhdGVzdF9jb21taXRfc2hhCisgICAgICBleHBlY3QoY2xpZW50KS50byBoYXZlX3JlY2VpdmVkKDpwdWxsX3JlcXVlc3QpLndpdGgocmVwbywgcHJfbnVtYmVyKQorICAgIGVuZAorCisgICAgaXQgIm1lbW9pemVzIHRoZSByZXN1bHQiIGRvCisgICAgICBwdWxsX3JlcXVlc3QubGF0ZXN0X2NvbW1pdF9zaGEKKyAgICAgIHB1bGxfcmVxdWVzdC5sYXRlc3RfY29tbWl0X3NoYQorICAgICAgZXhwZWN0KGNsaWVudCkudG8gaGF2ZV9yZWNlaXZlZCg6cHVsbF9yZXF1ZXN0KS53aXRoKHJlcG8sIHByX251bWJlcikub25jZQorICAgIGVuZAorICBlbmQKKworICBkZXNjcmliZSAiI2FkZF9nbG9iYWxfY29tbWVudCIgZG8KKyAgICBsZXQoOmJvZHkpIHsgIlRoaXMgaXMgYSBjb21tZW50IiB9CisgICAgbGV0KDpyZXNwb25zZSkgeyB7IGlkOiAxLCBib2R5OiBib2R5IH0gfQorCisgICAgYmVmb3JlIGRvCisgICAgICBhbGxvdyhjbGllbnQpLnRvIHJlY2VpdmUoOmFkZF9jb21tZW50KS53aXRoKHJlcG8sIHByX251bWJlciwgYm9keSkuYW5kX3JldHVybihyZXNwb25zZSkKKyAgICBlbmQKKworICAgIGl0ICJhZGRzIGEgY29tbWVudCB0byB0aGUgcHVsbCByZXF1ZXN0IiBkbworICAgICAgcmVzdWx0ID0gcHVsbF9yZXF1ZXN0LmFkZF9nbG9iYWxfY29tbWVudChib2R5OiBib2R5KQorICAgICAgZXhwZWN0KHJlc3VsdCkudG8gZXEocmVzcG9uc2UpCisgICAgZW5kCisKKyAgICBpdCAiY2FsbHMgdGhlIGNsaWVudCB3aXRoIGNvcnJlY3QgcGFyYW1ldGVycyIgZG8KKyAgICAgIHB1bGxfcmVxdWVzdC5hZGRfZ2xvYmFsX2NvbW1lbnQoYm9keTogYm9keSkKKyAgICAgIGV4cGVjdChjbGllbnQpLnRvIGhhdmVfcmVjZWl2ZWQoOmFkZF9jb21tZW50KS53aXRoKHJlcG8sIHByX251bWJlciwgYm9keSkKKyAgICBlbmQKKyAgZW5kCisKKyAgZGVzY3JpYmUgIiN1cGRhdGVfZ2xvYmFsX2NvbW1lbnQiIGRvCisgICAgbGV0KDpjb21tZW50X2lkKSB7IDQ1NiB9CisgICAgbGV0KDpib2R5KSB7ICJVcGRhdGVkIGNvbW1lbnQiIH0KKyAgICBsZXQoOnJlc3BvbnNlKSB7IHsgaWQ6IGNvbW1lbnRfaWQsIGJvZHk6IGJvZHkgfSB9CisKKyAgICBiZWZvcmUgZG8KKyAgICAgIGFsbG93KGNsaWVudCkudG8gcmVjZWl2ZSg6dXBkYXRlX2NvbW1lbnQpLndpdGgocmVwbywgY29tbWVudF9pZCwgYm9keSkuYW5kX3JldHVybihyZXNwb25zZSkKKyAgICBlbmQKKworICAgIGl0ICJ1cGRhdGVzIGEgY29tbWVudCIgZG8KKyAgICAgIHJlc3VsdCA9IHB1bGxfcmVxdWVzdC51cGRhdGVfZ2xvYmFsX2NvbW1lbnQoaWQ6IGNvbW1lbnRfaWQsIGJvZHk6IGJvZHkpCisgICAgICBleHBlY3QocmVzdWx0KS50byBlcShyZXNwb25zZSkKKyAgICBlbmQKKworICAgIGl0ICJjYWxscyB0aGUgY2xpZW50IHdpdGggY29ycmVjdCBwYXJhbWV0ZXJzIiBkbworICAgICAgcHVsbF9yZXF1ZXN0LnVwZGF0ZV9nbG9iYWxfY29tbWVudChpZDogY29tbWVudF9pZCwgYm9keTogYm9keSkKKyAgICAgIGV4cGVjdChjbGllbnQpLnRvIGhhdmVfcmVjZWl2ZWQoOnVwZGF0ZV9jb21tZW50KS53aXRoKHJlcG8sIGNvbW1lbnRfaWQsIGJvZHkpCisgICAgZW5kCisgIGVuZAorCisgIGRlc2NyaWJlICIjZGVsZXRlX2dsb2JhbF9jb21tZW50IiBkbworICAgIGxldCg6Y29tbWVudF9pZCkgeyA3ODkgfQorCisgICAgYmVmb3JlIGRvCisgICAgICBhbGxvdyhjbGllbnQpLnRvIHJlY2VpdmUoOmRlbGV0ZV9jb21tZW50KS53aXRoKHJlcG8sIGNvbW1lbnRfaWQpCisgICAgZW5kCisKKyAgICBpdCAiZGVsZXRlcyBhIGNvbW1lbnQiIGRvCisgICAgICBwdWxsX3JlcXVlc3QuZGVsZXRlX2dsb2JhbF9jb21tZW50KGNvbW1lbnRfaWQpCisgICAgICBleHBlY3QoY2xpZW50KS50byBoYXZlX3JlY2VpdmVkKDpkZWxldGVfY29tbWVudCkud2l0aChyZXBvLCBjb21tZW50X2lkKQorICAgIGVuZAorICBlbmQKKworICBkZXNjcmliZSAiI3VwZGF0ZV9pbmxpbmVfY29tbWVudCIgZG8KKyAgICBsZXQoOmNvbW1lbnRfaWQpIHsgNDU2IH0KKyAgICBsZXQoOmJvZHkpIHsgIlVwZGF0ZWQgaW5saW5lIGNvbW1lbnQiIH0KKyAgICBsZXQoOnJlc3BvbnNlKSB7IHsgaWQ6IGNvbW1lbnRfaWQsIGJvZHk6IGJvZHkgfSB9CisKKyAgICBiZWZvcmUgZG8KKyAgICAgIGFsbG93KGNsaWVudCkudG8gcmVjZWl2ZSg6dXBkYXRlX3B1bGxfcmVxdWVzdF9jb21tZW50KS53aXRoKHJlcG8sIGNvbW1lbnRfaWQsIGJvZHkpLmFuZF9yZXR1cm4ocmVzcG9uc2UpCisgICAgZW5kCisKKyAgICBpdCAidXBkYXRlcyBhbiBpbmxpbmUgY29tbWVudCIgZG8KKyAgICAgIHJlc3VsdCA9IHB1bGxfcmVxdWVzdC51cGRhdGVfaW5saW5lX2NvbW1lbnQoaWQ6IGNvbW1lbnRfaWQsIGJvZHk6IGJvZHkpCisgICAgICBleHBlY3QocmVzdWx0KS50byBlcShyZXNwb25zZSkKKyAgICBlbmQKKworICAgIGl0ICJjYWxscyB0aGUgY2xpZW50IHdpdGggY29ycmVjdCBwYXJhbWV0ZXJzIiBkbworICAgICAgcHVsbF9yZXF1ZXN0LnVwZGF0ZV9pbmxpbmVfY29tbWVudChpZDogY29tbWVudF9pZCwgYm9keTogYm9keSkKKyAgICAgIGV4cGVjdChjbGllbnQpLnRvIGhhdmVfcmVjZWl2ZWQoOnVwZGF0ZV9wdWxsX3JlcXVlc3RfY29tbWVudCkud2l0aChyZXBvLCBjb21tZW50X2lkLCBib2R5KQorICAgIGVuZAorICBlbmQKKworICBkZXNjcmliZSAiI2RlbGV0ZV9pbmxpbmVfY29tbWVudCIgZG8KKyAgICBsZXQoOmNvbW1lbnRfaWQpIHsgNzg5IH0KKworICAgIGJlZm9yZSBkbworICAgICAgYWxsb3coY2xpZW50KS50byByZWNlaXZlKDpkZWxldGVfcHVsbF9yZXF1ZXN0X2NvbW1lbnQpLndpdGgocmVwbywgY29tbWVudF9pZCkKKyAgICBlbmQKKworICAgIGl0ICJkZWxldGVzIGFuIGlubGluZSBjb21tZW50IiBkbworICAgICAgcHVsbF9yZXF1ZXN0LmRlbGV0ZV9pbmxpbmVfY29tbWVudChjb21tZW50X2lkKQorICAgICAgZXhwZWN0KGNsaWVudCkudG8gaGF2ZV9yZWNlaXZlZCg6ZGVsZXRlX3B1bGxfcmVxdWVzdF9jb21tZW50KS53aXRoKHJlcG8sIGNvbW1lbnRfaWQpCisgICAgZW5kCisgIGVuZAorCisgIGRlc2NyaWJlICIjYWRkX2NvbW1lbnRfb25fbGluZXMiIGRvCisgICAgbGV0KDpjb21taXRfaWQpIHsgImNvbW1pdDEyMyIgfQorICAgIGxldCg6ZmlsZV9wYXRoKSB7ICJsaWIvdGVzdC5yYiIgfQorICAgIGxldCg6c3RhcnRfbGluZSkgeyA4IH0KKyAgICBsZXQoOmVuZF9saW5lKSB7IDEwIH0KKyAgICBsZXQoOmJvZHkpIHsgIkNvdmVyYWdlIGNvbW1lbnQiIH0KKyAgICBsZXQoOnNpZGUpIHsgIlJJR0hUIiB9CisgICAgbGV0KDpkaWZmKSBkbworICAgICAgPDx+RElGRgorICAgICAgICBkaWZmIC0tZ2l0IGEvbGliL3Rlc3QucmIgYi9saWIvdGVzdC5yYgorICAgICAgICBpbmRleCAxMjM0NTY3Li5hYmNkZWZnIDEwMDY0NAorICAgICAgICAtLS0gYS9saWIvdGVzdC5yYgorICAgICAgICArKysgYi9saWIvdGVzdC5yYgorICAgICAgICBAQCAtNyw3ICs3LDcgQEAgY2xhc3MgVGVzdAorICAgICAgICAgZGVmIG1ldGhvZDEKKyAgICAgICAgICAgcHV0cyAiaGVsbG8iCisgICAgICAgICBlbmQKKyAgICAgICAgLWRlZiBvbGRfbWV0aG9kCisgICAgICAgICtkZWYgbmV3X21ldGhvZAorICAgICAgICAgICBwdXRzICJ3b3JsZCIKKyAgICAgICAgIGVuZAorICAgICAgICArZGVmIGFkZGVkX21ldGhvZAorICAgICAgICArICBwdXRzICJuZXcgY29kZSIKKyAgICAgICAgK2VuZAorICAgICAgICBlbmQKKyAgICAgIERJRkYKKyAgICBlbmQKKworICAgIGJlZm9yZSBkbworICAgICAgYWxsb3coY2xpZW50KS50byByZWNlaXZlKDpwdWxsX3JlcXVlc3QpLndpdGgocmVwbywgcHJfbnVtYmVyLCBhY2NlcHQ6ICJhcHBsaWNhdGlvbi92bmQuZ2l0aHViLnYzLmRpZmYiKS5hbmRfcmV0dXJuKGRpZmYpCisgICAgICBhbGxvdyhjbGllbnQpLnRvIHJlY2VpdmUoOnBvc3QpLmFuZF9yZXR1cm4oeyBpZDogMSB9KQorICAgICAgYWxsb3coY2xpZW50KS50byByZWNlaXZlKDpwdWxsX3JlcXVlc3RfY29tbWVudHMpLndpdGgocmVwbywgcHJfbnVtYmVyKS5hbmRfcmV0dXJuKFtdKQorICAgIGVuZAorCisgICAgY29udGV4dCAid2l0aCBzaW5nbGUgbGluZSBjb21tZW50IiBkbworICAgICAgbGV0KDplbmRfbGluZSkgeyA4IH0KKworICAgICAgaXQgImFkZHMgYSBjb21tZW50IG9uIGEgc2luZ2xlIGxpbmUiIGRvCisgICAgICAgIHB1bGxfcmVxdWVzdC5hZGRfY29tbWVudF9vbl9saW5lcygKKyAgICAgICAgICBjb21taXRfaWQ6ICBjb21taXRfaWQsCisgICAgICAgICAgZmlsZV9wYXRoOiAgZmlsZV9wYXRoLAorICAgICAgICAgIHN0YXJ0X2xpbmU6IHN0YXJ0X2xpbmUsCisgICAgICAgICAgZW5kX2xpbmU6ICAgZW5kX2xpbmUsCisgICAgICAgICAgYm9keTogICAgICAgYm9keQorICAgICAgICApCisKKyAgICAgICAgZXhwZWN0KGNsaWVudCkudG8gaGF2ZV9yZWNlaXZlZCg6cG9zdCkud2l0aCgKKyAgICAgICAgICAiL3JlcG9zLyN7cmVwb30vcHVsbHMvI3twcl9udW1iZXJ9L2NvbW1lbnRzIiwKKyAgICAgICAgICBoYXNoX2luY2x1ZGluZygKKyAgICAgICAgICAgIGJvZHk6ICAgICAgYm9keSwKKyAgICAgICAgICAgIGNvbW1pdF9pZDogY29tbWl0X2lkLAorICAgICAgICAgICAgcGF0aDogICAgICBmaWxlX3BhdGgsCisgICAgICAgICAgICBsaW5lOiAgICAgIHN0YXJ0X2xpbmUsCisgICAgICAgICAgICBzaWRlOiAgICAgICJSSUdIVCIKKyAgICAgICAgICApCisgICAgICAgICkKKyAgICAgIGVuZAorCisgICAgICBpdCAiZG9lcyBub3QgaW5jbHVkZSBzdGFydF9saW5lIGluIHBheWxvYWQgd2hlbiBzYW1lIGFzIGxpbmUiIGRvCisgICAgICAgIHB1bGxfcmVxdWVzdC5hZGRfY29tbWVudF9vbl9saW5lcygKKyAgICAgICAgICBjb21taXRfaWQ6ICBjb21taXRfaWQsCisgICAgICAgICAgZmlsZV9wYXRoOiAgZmlsZV9wYXRoLAorICAgICAgICAgIHN0YXJ0X2xpbmU6IHN0YXJ0X2xpbmUsCisgICAgICAgICAgZW5kX2xpbmU6ICAgZW5kX2xpbmUsCisgICAgICAgICAgYm9keTogICAgICAgYm9keQorICAgICAgICApCisKKyAgICAgICAgZXhwZWN0KGNsaWVudCkudG8gaGF2ZV9yZWNlaXZlZCg6cG9zdCkud2l0aCgKKyAgICAgICAgICAiL3JlcG9zLyN7cmVwb30vcHVsbHMvI3twcl9udW1iZXJ9L2NvbW1lbnRzIiwKKyAgICAgICAgICBoYXNoX25vdF9pbmNsdWRpbmcoOnN0YXJ0X2xpbmUsIDpzdGFydF9zaWRlKQorICAgICAgICApCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGNvbnRleHQgIndpdGggbXVsdGktbGluZSBjb21tZW50IiBkbworICAgICAgaXQgImFkZHMgYSBjb21tZW50IG9uIG11bHRpcGxlIGxpbmVzIiBkbworICAgICAgICBwdWxsX3JlcXVlc3QuYWRkX2NvbW1lbnRfb25fbGluZXMoCisgICAgICAgICAgY29tbWl0X2lkOiAgY29tbWl0X2lkLAorICAgICAgICAgIGZpbGVfcGF0aDogIGZpbGVfcGF0aCwKKyAgICAgICAgICBzdGFydF9saW5lOiBzdGFydF9saW5lLAorICAgICAgICAgIGVuZF9saW5lOiAgIGVuZF9saW5lLAorICAgICAgICAgIGJvZHk6ICAgICAgIGJvZHkKKyAgICAgICAgKQorCisgICAgICAgIGV4cGVjdChjbGllbnQpLnRvIGhhdmVfcmVjZWl2ZWQoOnBvc3QpLndpdGgoCisgICAgICAgICAgIi9yZXBvcy8je3JlcG99L3B1bGxzLyN7cHJfbnVtYmVyfS9jb21tZW50cyIsCisgICAgICAgICAgaGFzaF9pbmNsdWRpbmcoCisgICAgICAgICAgICBib2R5OiAgICAgICBib2R5LAorICAgICAgICAgICAgY29tbWl0X2lkOiAgY29tbWl0X2lkLAorICAgICAgICAgICAgcGF0aDogICAgICAgZmlsZV9wYXRoLAorICAgICAgICAgICAgbGluZTogICAgICAgZW5kX2xpbmUsCisgICAgICAgICAgICBzaWRlOiAgICAgICAiUklHSFQiLAorICAgICAgICAgICAgc3RhcnRfbGluZTogc3RhcnRfbGluZQorICAgICAgICAgICkKKyAgICAgICAgKQorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBjb250ZXh0ICJ3aXRoIGN1c3RvbSBzaWRlIiBkbworICAgICAgbGV0KDpzaWRlKSB7ICJMRUZUIiB9CisKKyAgICAgIGl0ICJpZ25vcmVzIHRoZSBzcGVjaWZpZWQgc2lkZSBhbmQgdXNlcyBjYWxjdWxhdGVkIHNpZGUgZnJvbSBkaWZmIiBkbworICAgICAgICBwdWxsX3JlcXVlc3QuYWRkX2NvbW1lbnRfb25fbGluZXMoCisgICAgICAgICAgY29tbWl0X2lkOiAgY29tbWl0X2lkLAorICAgICAgICAgIGZpbGVfcGF0aDogIGZpbGVfcGF0aCwKKyAgICAgICAgICBzdGFydF9saW5lOiBzdGFydF9saW5lLAorICAgICAgICAgIGVuZF9saW5lOiAgIGVuZF9saW5lLAorICAgICAgICAgIGJvZHk6ICAgICAgIGJvZHkKKyAgICAgICAgKQorCisgICAgICAgIGV4cGVjdChjbGllbnQpLnRvIGhhdmVfcmVjZWl2ZWQoOnBvc3QpLndpdGgoCisgICAgICAgICAgIi9yZXBvcy8je3JlcG99L3B1bGxzLyN7cHJfbnVtYmVyfS9jb21tZW50cyIsCisgICAgICAgICAgaGFzaF9pbmNsdWRpbmcoc2lkZTogIlJJR0hUIikgIyBDYWxjdWxhdGVkIGZyb20gZGlmZiwgbm90IHRoZSBwYXNzZWQgc2lkZSBwYXJhbWV0ZXIKKyAgICAgICAgKQorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBjb250ZXh0ICJ3aGVuIGV4aXN0aW5nIGNvbW1lbnQgZXhpc3RzIGZvciBzYW1lIGZpbGUgYW5kIGxpbmUgcmFuZ2UiIGRvCisgICAgICBsZXQoOmV4aXN0aW5nX2NvbW1lbnQpIGRvCisgICAgICAgIGluc3RhbmNlX2RvdWJsZSgKKyAgICAgICAgICBDb21tZW50LAorICAgICAgICAgIGlkOiAgICAgICAgIDQ1NiwKKyAgICAgICAgICBib2R5OiAgICAgICAiPCEtLSBjb3ZlcmFnZS1pbmxpbmUtbWFya2VyIC0tPlxu4p2MIExpbmVzIDjigJMxMCBhcmUgbm90IGNvdmVyZWQgYnkgdGVzdHMuIiwKKyAgICAgICAgICBwYXRoOiAgICAgICBmaWxlX3BhdGgsCisgICAgICAgICAgbGluZTogICAgICAgZW5kX2xpbmUsCisgICAgICAgICAgc3RhcnRfbGluZTogc3RhcnRfbGluZQorICAgICAgICApCisgICAgICBlbmQKKworICAgICAgYmVmb3JlIGRvCisgICAgICAgIGFsbG93KHB1bGxfcmVxdWVzdCkudG8gcmVjZWl2ZSg6aW5saW5lX2NvbW1lbnRzKS5hbmRfcmV0dXJuKFtleGlzdGluZ19jb21tZW50XSkKKyAgICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDp1cGRhdGVfaW5saW5lX2NvbW1lbnQpCisgICAgICBlbmQKKworICAgICAgaXQgInVwZGF0ZXMgdGhlIGV4aXN0aW5nIGNvbW1lbnQgaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBvbmUiIGRvCisgICAgICAgIHB1bGxfcmVxdWVzdC5hZGRfY29tbWVudF9vbl9saW5lcygKKyAgICAgICAgICBjb21taXRfaWQ6ICBjb21taXRfaWQsCisgICAgICAgICAgZmlsZV9wYXRoOiAgZmlsZV9wYXRoLAorICAgICAgICAgIHN0YXJ0X2xpbmU6IHN0YXJ0X2xpbmUsCisgICAgICAgICAgZW5kX2xpbmU6ICAgZW5kX2xpbmUsCisgICAgICAgICAgYm9keTogICAgICAgYm9keQorICAgICAgICApCisKKyAgICAgICAgZXhwZWN0KHB1bGxfcmVxdWVzdCkudG8gaGF2ZV9yZWNlaXZlZCg6dXBkYXRlX2lubGluZV9jb21tZW50KS53aXRoKAorICAgICAgICAgIGlkOiAgIGV4aXN0aW5nX2NvbW1lbnQuaWQsCisgICAgICAgICAgYm9keTogYm9keQorICAgICAgICApCisgICAgICAgIGV4cGVjdChjbGllbnQpLm5vdF90byBoYXZlX3JlY2VpdmVkKDpwb3N0KQorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBjb250ZXh0ICJ3aGVuIG5vIGV4aXN0aW5nIGNvbW1lbnQgZXhpc3RzIiBkbworICAgICAgYmVmb3JlIGRvCisgICAgICAgIGFsbG93KHB1bGxfcmVxdWVzdCkudG8gcmVjZWl2ZSg6aW5saW5lX2NvbW1lbnRzKS5hbmRfcmV0dXJuKFtdKQorICAgICAgZW5kCisKKyAgICAgIGl0ICJjcmVhdGVzIGEgbmV3IGNvbW1lbnQiIGRvCisgICAgICAgIHB1bGxfcmVxdWVzdC5hZGRfY29tbWVudF9vbl9saW5lcygKKyAgICAgICAgICBjb21taXRfaWQ6ICBjb21taXRfaWQsCisgICAgICAgICAgZmlsZV9wYXRoOiAgZmlsZV9wYXRoLAorICAgICAgICAgIHN0YXJ0X2xpbmU6IHN0YXJ0X2xpbmUsCisgICAgICAgICAgZW5kX2xpbmU6ICAgZW5kX2xpbmUsCisgICAgICAgICAgYm9keTogICAgICAgYm9keQorICAgICAgICApCisKKyAgICAgICAgZXhwZWN0KGNsaWVudCkudG8gaGF2ZV9yZWNlaXZlZCg6cG9zdCkud2l0aCgKKyAgICAgICAgICAiL3JlcG9zLyN7cmVwb30vcHVsbHMvI3twcl9udW1iZXJ9L2NvbW1lbnRzIiwKKyAgICAgICAgICBoYXNoX2luY2x1ZGluZyhib2R5OiBib2R5KQorICAgICAgICApCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGNvbnRleHQgIndoZW4gR2l0SHViIEFQSSByZXR1cm5zIGFuIGVycm9yIiBkbworICAgICAgbGV0KDplcnJvcikgZG8KKyAgICAgICAgQ2xhc3MubmV3KFN0YW5kYXJkRXJyb3IpIGRvCisgICAgICAgICAgZGVmIHJlc3BvbnNlX2JvZHkKKyAgICAgICAgICAgICd7Im1lc3NhZ2UiOiAiVmFsaWRhdGlvbiBmYWlsZWQifScKKyAgICAgICAgICBlbmQKKworICAgICAgICAgIGRlZiBzdGF0dXMKKyAgICAgICAgICAgIDQyMgorICAgICAgICAgIGVuZAorCisgICAgICAgICAgZGVmIGlzX2E/KGtsYXNzKQorICAgICAgICAgICAga2xhc3MgPT0gT2N0b2tpdDo6RXJyb3IKKyAgICAgICAgICBlbmQKKyAgICAgICAgZW5kLm5ldygiQVBJIEVycm9yIikKKyAgICAgIGVuZAorCisgICAgICBiZWZvcmUgZG8KKyAgICAgICAgYWxsb3coY2xpZW50KS50byByZWNlaXZlKDpwb3N0KS5hbmRfcmFpc2UoZXJyb3IpCisgICAgICBlbmQKKworICAgICAgaXQgInJhaXNlcyB0aGUgZXJyb3Igd2l0aCBkZWJ1Z2dpbmcgaW5mb3JtYXRpb24iIGRvCisgICAgICAgIGV4cGVjdCBkbworICAgICAgICAgIHB1bGxfcmVxdWVzdC5hZGRfY29tbWVudF9vbl9saW5lcygKKyAgICAgICAgICAgIGNvbW1pdF9pZDogIGNvbW1pdF9pZCwKKyAgICAgICAgICAgIGZpbGVfcGF0aDogIGZpbGVfcGF0aCwKKyAgICAgICAgICAgIHN0YXJ0X2xpbmU6IHN0YXJ0X2xpbmUsCisgICAgICAgICAgICBlbmRfbGluZTogICBlbmRfbGluZSwKKyAgICAgICAgICAgIGJvZHk6ICAgICAgIGJvZHkKKyAgICAgICAgICApCisgICAgICAgIGVuZC50byByYWlzZV9lcnJvcihTdGFuZGFyZEVycm9yLCAiQVBJIEVycm9yIikKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgY29udGV4dCAid2hlbiBhbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycyIgZG8KKyAgICAgIGxldCg6ZXJyb3IpIHsgU3RhbmRhcmRFcnJvci5uZXcoIlVuZXhwZWN0ZWQgZXJyb3IiKSB9CisKKyAgICAgIGJlZm9yZSBkbworICAgICAgICBhbGxvdyhjbGllbnQpLnRvIHJlY2VpdmUoOnBvc3QpLmFuZF9yYWlzZShlcnJvcikKKyAgICAgIGVuZAorCisgICAgICBpdCAicmFpc2VzIHRoZSBlcnJvciB3aXRoIGRlYnVnZ2luZyBpbmZvcm1hdGlvbiIgZG8KKyAgICAgICAgZXhwZWN0IGRvCisgICAgICAgICAgcHVsbF9yZXF1ZXN0LmFkZF9jb21tZW50X29uX2xpbmVzKAorICAgICAgICAgICAgY29tbWl0X2lkOiAgY29tbWl0X2lkLAorICAgICAgICAgICAgZmlsZV9wYXRoOiAgZmlsZV9wYXRoLAorICAgICAgICAgICAgc3RhcnRfbGluZTogc3RhcnRfbGluZSwKKyAgICAgICAgICAgIGVuZF9saW5lOiAgIGVuZF9saW5lLAorICAgICAgICAgICAgYm9keTogICAgICAgYm9keQorICAgICAgICAgICkKKyAgICAgICAgZW5kLnRvIHJhaXNlX2Vycm9yKFN0YW5kYXJkRXJyb3IsICJVbmV4cGVjdGVkIGVycm9yIikKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgY29udGV4dCAid2l0aCBmaWxlIHBhdGggbWF0Y2hpbmciIGRvCisgICAgICBsZXQoOmZpbGVfcGF0aCkgeyAidGVzdC5yYiIgfQorICAgICAgbGV0KDpkaWZmKSBkbworICAgICAgICA8PH5ESUZGCisgICAgICAgICAgZGlmZiAtLWdpdCBhL2xpYi90ZXN0LnJiIGIvbGliL3Rlc3QucmIKKyAgICAgICAgICBpbmRleCAxMjM0NTY3Li5hYmNkZWZnIDEwMDY0NAorICAgICAgICAgIC0tLSBhL2xpYi90ZXN0LnJiCisgICAgICAgICAgKysrIGIvbGliL3Rlc3QucmIKKyAgICAgICAgICBAQCAtNyw3ICs3LDcgQEAgY2xhc3MgVGVzdAorICAgICAgICAgICBkZWYgbWV0aG9kMQorICAgICAgICAgICAgIHB1dHMgImhlbGxvIgorICAgICAgICAgICBlbmQKKyAgICAgICAgICAtZGVmIG9sZF9tZXRob2QKKyAgICAgICAgICArZGVmIG5ld19tZXRob2QKKyAgICAgICAgICAgICBwdXRzICJ3b3JsZCIKKyAgICAgICAgICAgZW5kCisgICAgICAgICAgZW5kCisgICAgICAgIERJRkYKKyAgICAgIGVuZAorCisgICAgICBpdCAiZmluZHMgdGhlIGFjdHVhbCBmaWxlIHBhdGggaW4gdGhlIGRpZmYiIGRvCisgICAgICAgIHB1bGxfcmVxdWVzdC5hZGRfY29tbWVudF9vbl9saW5lcygKKyAgICAgICAgICBjb21taXRfaWQ6ICBjb21taXRfaWQsCisgICAgICAgICAgZmlsZV9wYXRoOiAgZmlsZV9wYXRoLAorICAgICAgICAgIHN0YXJ0X2xpbmU6IHN0YXJ0X2xpbmUsCisgICAgICAgICAgZW5kX2xpbmU6ICAgZW5kX2xpbmUsCisgICAgICAgICAgYm9keTogICAgICAgYm9keQorICAgICAgICApCisKKyAgICAgICAgZXhwZWN0KGNsaWVudCkudG8gaGF2ZV9yZWNlaXZlZCg6cG9zdCkud2l0aCgKKyAgICAgICAgICAiL3JlcG9zLyN7cmVwb30vcHVsbHMvI3twcl9udW1iZXJ9L2NvbW1lbnRzIiwKKyAgICAgICAgICBoYXNoX2luY2x1ZGluZyhwYXRoOiAibGliL3Rlc3QucmIiKQorICAgICAgICApCisgICAgICBlbmQKKyAgICBlbmQKKyAgZW5kCisKKyAgZGVzY3JpYmUgIiNmaW5kX2V4aXN0aW5nX2lubGluZV9jb21tZW50IiBkbworICAgIGxldCg6ZmlsZV9wYXRoKSB7ICJsaWIvdGVzdC5yYiIgfQorICAgIGxldCg6c3RhcnRfbGluZSkgeyA4IH0KKyAgICBsZXQoOmVuZF9saW5lKSB7IDEwIH0KKworICAgIGNvbnRleHQgIndoZW4gbm8gY29tbWVudHMgZXhpc3QiIGRvCisgICAgICBiZWZvcmUgZG8KKyAgICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDppbmxpbmVfY29tbWVudHMpLmFuZF9yZXR1cm4oW10pCisgICAgICBlbmQKKworICAgICAgaXQgInJldHVybnMgbmlsIiBkbworICAgICAgICByZXN1bHQgPSBwdWxsX3JlcXVlc3Quc2VuZCg6ZmluZF9leGlzdGluZ19pbmxpbmVfY29tbWVudCwgZmlsZV9wYXRoLCBzdGFydF9saW5lLCBlbmRfbGluZSkKKyAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8gYmVfbmlsCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGNvbnRleHQgIndoZW4gY292ZXJhZ2UgY29tbWVudCBleGlzdHMgZm9yIHNhbWUgZmlsZSBhbmQgbGluZSByYW5nZSIgZG8KKyAgICAgIGxldCg6ZXhpc3RpbmdfY29tbWVudCkgZG8KKyAgICAgICAgaW5zdGFuY2VfZG91YmxlKAorICAgICAgICAgIENvbW1lbnQsCisgICAgICAgICAgaWQ6ICAgICAgICAgMTIzLAorICAgICAgICAgIGJvZHk6ICAgICAgICI8IS0tIGNvdmVyYWdlLWlubGluZS1tYXJrZXIgLS0+XG7inYwgTGluZXMgOOKAkzEwIGFyZSBub3QgY292ZXJlZCBieSB0ZXN0cy4iLAorICAgICAgICAgIHBhdGg6ICAgICAgIGZpbGVfcGF0aCwKKyAgICAgICAgICBsaW5lOiAgICAgICBlbmRfbGluZSwKKyAgICAgICAgICBzdGFydF9saW5lOiBzdGFydF9saW5lCisgICAgICAgICkKKyAgICAgIGVuZAorCisgICAgICBiZWZvcmUgZG8KKyAgICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDppbmxpbmVfY29tbWVudHMpLmFuZF9yZXR1cm4oW2V4aXN0aW5nX2NvbW1lbnRdKQorICAgICAgZW5kCisKKyAgICAgIGl0ICJyZXR1cm5zIHRoZSBleGlzdGluZyBjb21tZW50IiBkbworICAgICAgICByZXN1bHQgPSBwdWxsX3JlcXVlc3Quc2VuZCg6ZmluZF9leGlzdGluZ19pbmxpbmVfY29tbWVudCwgZmlsZV9wYXRoLCBzdGFydF9saW5lLCBlbmRfbGluZSkKKyAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8gZXEoZXhpc3RpbmdfY29tbWVudCkKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgY29udGV4dCAid2hlbiBjb3ZlcmFnZSBjb21tZW50IGV4aXN0cyBmb3IgZGlmZmVyZW50IGZpbGUiIGRvCisgICAgICBsZXQoOmV4aXN0aW5nX2NvbW1lbnQpIGRvCisgICAgICAgIGluc3RhbmNlX2RvdWJsZSgKKyAgICAgICAgICBDb21tZW50LAorICAgICAgICAgIGlkOiAgICAgICAgIDEyMywKKyAgICAgICAgICBib2R5OiAgICAgICAiPCEtLSBjb3ZlcmFnZS1pbmxpbmUtbWFya2VyIC0tPlxu4p2MIExpbmVzIDjigJMxMCBhcmUgbm90IGNvdmVyZWQgYnkgdGVzdHMuIiwKKyAgICAgICAgICBwYXRoOiAgICAgICAiZGlmZmVyZW50L2ZpbGUucmIiLAorICAgICAgICAgIGxpbmU6ICAgICAgIGVuZF9saW5lLAorICAgICAgICAgIHN0YXJ0X2xpbmU6IHN0YXJ0X2xpbmUKKyAgICAgICAgKQorICAgICAgZW5kCisKKyAgICAgIGJlZm9yZSBkbworICAgICAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOmlubGluZV9jb21tZW50cykuYW5kX3JldHVybihbZXhpc3RpbmdfY29tbWVudF0pCisgICAgICBlbmQKKworICAgICAgaXQgInJldHVybnMgbmlsIiBkbworICAgICAgICByZXN1bHQgPSBwdWxsX3JlcXVlc3Quc2VuZCg6ZmluZF9leGlzdGluZ19pbmxpbmVfY29tbWVudCwgZmlsZV9wYXRoLCBzdGFydF9saW5lLCBlbmRfbGluZSkKKyAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8gYmVfbmlsCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGNvbnRleHQgIndoZW4gY292ZXJhZ2UgY29tbWVudCBleGlzdHMgZm9yIGRpZmZlcmVudCBsaW5lIHJhbmdlIiBkbworICAgICAgbGV0KDpleGlzdGluZ19jb21tZW50KSBkbworICAgICAgICBpbnN0YW5jZV9kb3VibGUoCisgICAgICAgICAgQ29tbWVudCwKKyAgICAgICAgICBpZDogICAgICAgICAxMjMsCisgICAgICAgICAgYm9keTogICAgICAgIjwhLS0gY292ZXJhZ2UtaW5saW5lLW1hcmtlciAtLT5cbuKdjCBMaW5lcyA14oCTNyBhcmUgbm90IGNvdmVyZWQgYnkgdGVzdHMuIiwKKyAgICAgICAgICBwYXRoOiAgICAgICBmaWxlX3BhdGgsCisgICAgICAgICAgbGluZTogICAgICAgNywKKyAgICAgICAgICBzdGFydF9saW5lOiA1CisgICAgICAgICkKKyAgICAgIGVuZAorCisgICAgICBiZWZvcmUgZG8KKyAgICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDppbmxpbmVfY29tbWVudHMpLmFuZF9yZXR1cm4oW2V4aXN0aW5nX2NvbW1lbnRdKQorICAgICAgZW5kCisKKyAgICAgIGl0ICJyZXR1cm5zIG5pbCIgZG8KKyAgICAgICAgcmVzdWx0ID0gcHVsbF9yZXF1ZXN0LnNlbmQoOmZpbmRfZXhpc3RpbmdfaW5saW5lX2NvbW1lbnQsIGZpbGVfcGF0aCwgc3RhcnRfbGluZSwgZW5kX2xpbmUpCisgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvIGJlX25pbAorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBjb250ZXh0ICJ3aGVuIG5vbi1jb3ZlcmFnZSBjb21tZW50IGV4aXN0cyIgZG8KKyAgICAgIGxldCg6ZXhpc3RpbmdfY29tbWVudCkgZG8KKyAgICAgICAgaW5zdGFuY2VfZG91YmxlKAorICAgICAgICAgIENvbW1lbnQsCisgICAgICAgICAgaWQ6ICAgICAgICAgMTIzLAorICAgICAgICAgIGJvZHk6ICAgICAgICJUaGlzIGlzIGEgcmVndWxhciBjb21tZW50IiwKKyAgICAgICAgICBwYXRoOiAgICAgICBmaWxlX3BhdGgsCisgICAgICAgICAgbGluZTogICAgICAgZW5kX2xpbmUsCisgICAgICAgICAgc3RhcnRfbGluZTogc3RhcnRfbGluZQorICAgICAgICApCisgICAgICBlbmQKKworICAgICAgYmVmb3JlIGRvCisgICAgICAgIGFsbG93KHB1bGxfcmVxdWVzdCkudG8gcmVjZWl2ZSg6aW5saW5lX2NvbW1lbnRzKS5hbmRfcmV0dXJuKFtleGlzdGluZ19jb21tZW50XSkKKyAgICAgIGVuZAorCisgICAgICBpdCAicmV0dXJucyBuaWwiIGRvCisgICAgICAgIHJlc3VsdCA9IHB1bGxfcmVxdWVzdC5zZW5kKDpmaW5kX2V4aXN0aW5nX2lubGluZV9jb21tZW50LCBmaWxlX3BhdGgsIHN0YXJ0X2xpbmUsIGVuZF9saW5lKQorICAgICAgICBleHBlY3QocmVzdWx0KS50byBiZV9uaWwKKyAgICAgIGVuZAorICAgIGVuZAorICBlbmQKKworICBkZXNjcmliZSAicHJpdmF0ZSBtZXRob2RzIiBkbworICAgIGRlc2NyaWJlICIjbm9ybWFsaXplX3JlcG8iIGRvCisgICAgICBpdCAicmV0dXJucyBvd25lci9yZXBvIGZvcm1hdCBhcyBpcyIgZG8KKyAgICAgICAgcHIgPSBkZXNjcmliZWRfY2xhc3MubmV3KGdpdGh1Yl90b2tlbjosIHJlcG86ICJvd25lci9yZXBvIiwgcHJfbnVtYmVyOikKKyAgICAgICAgZXhwZWN0KHByLnNlbmQoOm5vcm1hbGl6ZV9yZXBvLCAib3duZXIvcmVwbyIpKS50byBlcSgib3duZXIvcmVwbyIpCisgICAgICBlbmQKKworICAgICAgaXQgImV4dHJhY3RzIG93bmVyL3JlcG8gZnJvbSBmdWxsIEdpdEh1YiBVUkwiIGRvCisgICAgICAgIHByID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhnaXRodWJfdG9rZW46LCByZXBvOiAiaHR0cHM6Ly9naXRodWIuY29tL293bmVyL3JlcG8iLCBwcl9udW1iZXI6KQorICAgICAgICBleHBlY3QocHIuc2VuZCg6bm9ybWFsaXplX3JlcG8sICJodHRwczovL2dpdGh1Yi5jb20vb3duZXIvcmVwbyIpKS50byBlcSgib3duZXIvcmVwbyIpCisgICAgICBlbmQKKworICAgICAgaXQgImV4dHJhY3RzIG93bmVyL3JlcG8gZnJvbSBHaXRIdWIgVVJMIHdpdGggLmdpdCBzdWZmaXgiIGRvCisgICAgICAgIHByID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhnaXRodWJfdG9rZW46LCByZXBvOiAiaHR0cHM6Ly9naXRodWIuY29tL293bmVyL3JlcG8uZ2l0IiwgcHJfbnVtYmVyOikKKyAgICAgICAgZXhwZWN0KHByLnNlbmQoOm5vcm1hbGl6ZV9yZXBvLCAiaHR0cHM6Ly9naXRodWIuY29tL293bmVyL3JlcG8uZ2l0IikpLnRvIGVxKCJvd25lci9yZXBvIikKKyAgICAgIGVuZAorCisgICAgICBpdCAicmFpc2VzIEFyZ3VtZW50RXJyb3IgZm9yIGludmFsaWQgcmVwbyBmb3JtYXQiIGRvCisgICAgICAgIHByID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhnaXRodWJfdG9rZW46LCByZXBvOiAib3duZXIvcmVwbyIsIHByX251bWJlcjopCisgICAgICAgIGV4cGVjdCBkbworICAgICAgICAgIHByLnNlbmQoOm5vcm1hbGl6ZV9yZXBvLCAianVzdC1yZXBvLW5hbWUiKQorICAgICAgICBlbmQudG8gcmFpc2VfZXJyb3IoQXJndW1lbnRFcnJvciwgIlJlcG9zaXRvcnkgbXVzdCBiZSBpbiBmb3JtYXQgJ293bmVyL3JlcG8nIG9yIGEgZnVsbCBHaXRIdWIgVVJMIikKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgZGVzY3JpYmUgIiNkaWZmIiBkbworICAgICAgbGV0KDpkaWZmKSB7ICJkaWZmIGNvbnRlbnQiIH0KKworICAgICAgYmVmb3JlIGRvCisgICAgICAgIGFsbG93KGNsaWVudCkudG8gcmVjZWl2ZSg6cHVsbF9yZXF1ZXN0KS53aXRoKHJlcG8sIHByX251bWJlciwgYWNjZXB0OiAiYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52My5kaWZmIikuYW5kX3JldHVybihkaWZmKQorICAgICAgZW5kCisKKyAgICAgIGl0ICJyZXR1cm5zIHRoZSBwdWxsIHJlcXVlc3QgZGlmZiIgZG8KKyAgICAgICAgcmVzdWx0ID0gcHVsbF9yZXF1ZXN0LnNlbmQoOmRpZmYpCisgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvIGVxKGRpZmYpCisgICAgICBlbmQKKworICAgICAgaXQgIm1lbW9pemVzIHRoZSByZXN1bHQiIGRvCisgICAgICAgIHB1bGxfcmVxdWVzdC5zZW5kKDpkaWZmKQorICAgICAgICBwdWxsX3JlcXVlc3Quc2VuZCg6ZGlmZikKKyAgICAgICAgZXhwZWN0KGNsaWVudCkudG8gaGF2ZV9yZWNlaXZlZCg6cHVsbF9yZXF1ZXN0KS53aXRoKHJlcG8sIHByX251bWJlciwgYWNjZXB0OiAiYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52My5kaWZmIikub25jZQorICAgICAgZW5kCisgICAgZW5kCisKKyAgICBkZXNjcmliZSAiI2ZpbmRfYWN0dWFsX2ZpbGVfcGF0aF9pbl9kaWZmIiBkbworICAgICAgbGV0KDpkaWZmKSBkbworICAgICAgICA8PH5ESUZGCisgICAgICAgICAgZGlmZiAtLWdpdCBhL2xpYi90ZXN0LnJiIGIvbGliL3Rlc3QucmIKKyAgICAgICAgICBpbmRleCAxMjM0NTY3Li5hYmNkZWZnIDEwMDY0NAorICAgICAgICAgIC0tLSBhL2xpYi90ZXN0LnJiCisgICAgICAgICAgKysrIGIvbGliL3Rlc3QucmIKKyAgICAgICAgRElGRgorICAgICAgZW5kCisKKyAgICAgIGl0ICJmaW5kcyBleGFjdCBmaWxlIHBhdGggbWF0Y2giIGRvCisgICAgICAgIHJlc3VsdCA9IHB1bGxfcmVxdWVzdC5zZW5kKDpmaW5kX2FjdHVhbF9maWxlX3BhdGhfaW5fZGlmZiwgZGlmZiwgImxpYi90ZXN0LnJiIikKKyAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8gZXEoImxpYi90ZXN0LnJiIikKKyAgICAgIGVuZAorCisgICAgICBpdCAiZmluZHMgYmFzZW5hbWUgbWF0Y2giIGRvCisgICAgICAgIHJlc3VsdCA9IHB1bGxfcmVxdWVzdC5zZW5kKDpmaW5kX2FjdHVhbF9maWxlX3BhdGhfaW5fZGlmZiwgZGlmZiwgInRlc3QucmIiKQorICAgICAgICBleHBlY3QocmVzdWx0KS50byBlcSgibGliL3Rlc3QucmIiKQorICAgICAgZW5kCisKKyAgICAgIGl0ICJyZXR1cm5zIG9yaWdpbmFsIHBhdGggaWYgbm8gbWF0Y2ggZm91bmQiIGRvCisgICAgICAgIHJlc3VsdCA9IHB1bGxfcmVxdWVzdC5zZW5kKDpmaW5kX2FjdHVhbF9maWxlX3BhdGhfaW5fZGlmZiwgZGlmZiwgIm5vbmV4aXN0ZW50LnJiIikKKyAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8gZXEoIm5vbmV4aXN0ZW50LnJiIikKKyAgICAgIGVuZAorICAgIGVuZAorCisgICAgZGVzY3JpYmUgIiNmaW5kX2RpZmZfbGluZV9udW1iZXJzIiBkbworICAgICAgbGV0KDpkaWZmKSBkbworICAgICAgICA8PH5ESUZGCisgICAgICAgICAgZGlmZiAtLWdpdCBhL2xpYi90ZXN0LnJiIGIvbGliL3Rlc3QucmIKKyAgICAgICAgICBpbmRleCAxMjM0NTY3Li5hYmNkZWZnIDEwMDY0NAorICAgICAgICAgIC0tLSBhL2xpYi90ZXN0LnJiCisgICAgICAgICAgKysrIGIvbGliL3Rlc3QucmIKKyAgICAgICAgICBAQCAtNyw3ICs3LDcgQEAgY2xhc3MgVGVzdAorICAgICAgICAgICBkZWYgbWV0aG9kMQorICAgICAgICAgICAgIHB1dHMgImhlbGxvIgorICAgICAgICAgICBlbmQKKyAgICAgICAgICAtZGVmIG9sZF9tZXRob2QKKyAgICAgICAgICArZGVmIG5ld19tZXRob2QKKyAgICAgICAgICAgICBwdXRzICJ3b3JsZCIKKyAgICAgICAgICAgZW5kCisgICAgICAgICAgK2RlZiBhZGRlZF9tZXRob2QKKyAgICAgICAgICArICBwdXRzICJuZXcgY29kZSIKKyAgICAgICAgICArZW5kCisgICAgICAgICAgZW5kCisgICAgICAgIERJRkYKKyAgICAgIGVuZAorCisgICAgICBpdCAiZmluZHMgbGluZSBudW1iZXJzIGZvciBzaW5nbGUgbGluZSBjb21tZW50IiBkbworICAgICAgICByZXN1bHQgPSBwdWxsX3JlcXVlc3Quc2VuZCg6ZmluZF9kaWZmX2xpbmVfbnVtYmVycywgZGlmZiwgImxpYi90ZXN0LnJiIiwgOCwgOCkKKyAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8gaW5jbHVkZSgKKyAgICAgICAgICBsaW5lOiAgICAgICA4LAorICAgICAgICAgIHNpZGU6ICAgICAgICJSSUdIVCIsCisgICAgICAgICAgc3RhcnRfc2lkZTogIlJJR0hUIgorICAgICAgICApCisgICAgICAgIGV4cGVjdChyZXN1bHQpLm5vdF90byBoYXZlX2tleSg6c3RhcnRfbGluZSkKKyAgICAgIGVuZAorCisgICAgICBpdCAiZmluZHMgbGluZSBudW1iZXJzIGZvciBtdWx0aS1saW5lIGNvbW1lbnQiIGRvCisgICAgICAgIHJlc3VsdCA9IHB1bGxfcmVxdWVzdC5zZW5kKDpmaW5kX2RpZmZfbGluZV9udW1iZXJzLCBkaWZmLCAibGliL3Rlc3QucmIiLCA4LCAxMCkKKyAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8gaW5jbHVkZSgKKyAgICAgICAgICBsaW5lOiAgICAgICAxMCwKKyAgICAgICAgICBzaWRlOiAgICAgICAiUklHSFQiLAorICAgICAgICAgIHN0YXJ0X2xpbmU6IDgsCisgICAgICAgICAgc3RhcnRfc2lkZTogIlJJR0hUIgorICAgICAgICApCisgICAgICBlbmQKKyAgICBlbmQKKworICAgIGRlc2NyaWJlICIjZGVsZXRlX2NvdmVyYWdlX2NvbW1lbnRzX2Zvcl9maWxlIiBkbworICAgICAgbGV0KDpmaWxlX3BhdGgpIHsgImxpYi90ZXN0LnJiIiB9CisgICAgICBsZXQoOmNvdmVyYWdlX2NvbW1lbnQpIGRvCisgICAgICAgIGluc3RhbmNlX2RvdWJsZSgKKyAgICAgICAgICBDb21tZW50LAorICAgICAgICAgIGlkOiAgIDEyMywKKyAgICAgICAgICBib2R5OiAiPCEtLSBjb3ZlcmFnZS1pbmxpbmUtbWFya2VyIC0tPlxu4p2MIExpbmUgOCBpcyBub3QgY292ZXJlZCBieSB0ZXN0cy4iLAorICAgICAgICAgIHBhdGg6IGZpbGVfcGF0aAorICAgICAgICApCisgICAgICBlbmQKKyAgICAgIGxldCg6bm9uX2NvdmVyYWdlX2NvbW1lbnQpIGRvCisgICAgICAgIGluc3RhbmNlX2RvdWJsZSgKKyAgICAgICAgICBDb21tZW50LAorICAgICAgICAgIGlkOiAgIDc4OSwKKyAgICAgICAgICBib2R5OiAiVGhpcyBpcyBhIHJlZ3VsYXIgY29tbWVudCIsCisgICAgICAgICAgcGF0aDogZmlsZV9wYXRoCisgICAgICAgICkKKyAgICAgIGVuZAorICAgICAgbGV0KDpjb3ZlcmFnZV9jb21tZW50X2RpZmZlcmVudF9maWxlKSBkbworICAgICAgICBpbnN0YW5jZV9kb3VibGUoCisgICAgICAgICAgQ29tbWVudCwKKyAgICAgICAgICBpZDogICA0NTYsCisgICAgICAgICAgYm9keTogIjwhLS0gY292ZXJhZ2UtaW5saW5lLW1hcmtlciAtLT5cbuKdjCBMaW5lIDUgaXMgbm90IGNvdmVyZWQgYnkgdGVzdHMuIiwKKyAgICAgICAgICBwYXRoOiAiZGlmZmVyZW50L2ZpbGUucmIiCisgICAgICAgICkKKyAgICAgIGVuZAorCisgICAgICBiZWZvcmUgZG8KKyAgICAgICAgYWxsb3cocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDppbmxpbmVfY29tbWVudHMpLmFuZF9yZXR1cm4oCisgICAgICAgICAgWworICAgICAgICAgICAgY292ZXJhZ2VfY29tbWVudCwKKyAgICAgICAgICAgIG5vbl9jb3ZlcmFnZV9jb21tZW50LAorICAgICAgICAgICAgY292ZXJhZ2VfY29tbWVudF9kaWZmZXJlbnRfZmlsZQorICAgICAgICAgIF0KKyAgICAgICAgKQorICAgICAgICBhbGxvdyhwdWxsX3JlcXVlc3QpLnRvIHJlY2VpdmUoOmRlbGV0ZV9pbmxpbmVfY29tbWVudCkKKyAgICAgIGVuZAorCisgICAgICBpdCAiZGVsZXRlcyBjb3ZlcmFnZSBjb21tZW50cyBmb3IgdGhlIHNwZWNpZmllZCBmaWxlIiBkbworICAgICAgICBleHBlY3QocHVsbF9yZXF1ZXN0KS50byByZWNlaXZlKDpkZWxldGVfaW5saW5lX2NvbW1lbnQpLndpdGgoY292ZXJhZ2VfY29tbWVudC5pZCkKKworICAgICAgICBwdWxsX3JlcXVlc3Quc2VuZCg6ZGVsZXRlX2NvdmVyYWdlX2NvbW1lbnRzX2Zvcl9maWxlLCBmaWxlX3BhdGgpCisgICAgICBlbmQKKworICAgICAgaXQgImRvZXMgbm90IGRlbGV0ZSBub24tY292ZXJhZ2UgY29tbWVudHMiIGRvCisgICAgICAgIGV4cGVjdChwdWxsX3JlcXVlc3QpLm5vdF90byByZWNlaXZlKDpkZWxldGVfaW5saW5lX2NvbW1lbnQpLndpdGgobm9uX2NvdmVyYWdlX2NvbW1lbnQuaWQpCisKKyAgICAgICAgcHVsbF9yZXF1ZXN0LnNlbmQoOmRlbGV0ZV9jb3ZlcmFnZV9jb21tZW50c19mb3JfZmlsZSwgZmlsZV9wYXRoKQorICAgICAgZW5kCisKKyAgICAgIGl0ICJkb2VzIG5vdCBkZWxldGUgY292ZXJhZ2UgY29tbWVudHMgZm9yIGRpZmZlcmVudCBmaWxlcyIgZG8KKyAgICAgICAgZXhwZWN0KHB1bGxfcmVxdWVzdCkubm90X3RvIHJlY2VpdmUoOmRlbGV0ZV9pbmxpbmVfY29tbWVudCkud2l0aChjb3ZlcmFnZV9jb21tZW50X2RpZmZlcmVudF9maWxlLmlkKQorCisgICAgICAgIHB1bGxfcmVxdWVzdC5zZW5kKDpkZWxldGVfY292ZXJhZ2VfY29tbWVudHNfZm9yX2ZpbGUsIGZpbGVfcGF0aCkKKyAgICAgIGVuZAorICAgIGVuZAorICBlbmQKK2VuZApkaWZmIC0tZ2l0IGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9ydW5uZXJfc3BlYy5yYiBiL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvcnVubmVyX3NwZWMucmIKaW5kZXggY2E1YjI5Yy4uMWY0ZWY5ZiAxMDA2NDQKLS0tIGEvc3BlYy9jb3ZlcmFnZV9yZXBvcnRlci9ydW5uZXJfc3BlYy5yYgorKysgYi9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL3J1bm5lcl9zcGVjLnJiCkBAIC02LDkwICs2LDEwNSBAQAogUlNwZWMuZGVzY3JpYmUgQ292ZXJhZ2VSZXBvcnRlcjo6UnVubmVyIGRvCiAgIHN1YmplY3QoOnJ1bm5lcikgeyBkZXNjcmliZWRfY2xhc3MubmV3KG9wdGlvbnMpIH0KIAotICBsZXQoOmNvdmVyYWdlX3BhdGgpIHsgImNvdmVyYWdlLy5yZXN1bHRzZXQuanNvbiIgfQorICBsZXQoOmNvdmVyYWdlX3JlcG9ydF9wYXRoKSB7ICJjb3ZlcmFnZS9jb3ZlcmFnZS5qc29uIiB9CiAgICMgV2UnbGwgc3R1YiBhbGwgY29sbGFib3JhdG9yIGNsYXNzZXMgc28gd2Ugb25seSB0ZXN0IG9yY2hlc3RyYXRpb24KLSAgbGV0KDpwYXJzZXJfaW5zdGFuY2UpIHsgaW5zdGFuY2VfZG91YmxlKENvdmVyYWdlUmVwb3J0ZXI6OkNvdmVyYWdlUGFyc2VyLCBjYWxsOiBjb3ZlcmFnZSkgfQotICBsZXQoOmRpZmZfaW5zdGFuY2UpICAgeyBpbnN0YW5jZV9kb3VibGUoQ292ZXJhZ2VSZXBvcnRlcjo6RGlmZlBhcnNlciwgY2FsbDogZGlmZikgfQotICBsZXQoOnB1bGxfcmVxdWVzdF9pbnN0YW5jZSkgeyBpbnN0YW5jZV9kb3VibGUoQ292ZXJhZ2VSZXBvcnRlcjo6UHVsbFJlcXVlc3QpIH0KLSAgbGV0KDpwb3N0ZXJfaW5zdGFuY2UpIHsgaW5zdGFuY2VfZG91YmxlKENvdmVyYWdlUmVwb3J0ZXI6OkNvbW1lbnRQb3N0ZXIpIH0KLSAgbGV0KDphbmFseXNpc19yZXN1bHQpIGRvCi0gICAgQ292ZXJhZ2VSZXBvcnRlcjo6QW5hbHlzaXNSZXN1bHQubmV3KAotICAgICAgdW5jb3ZlcmVkX2J5X2ZpbGU6IHVuY292ZXJlZF9ieV9maWxlLAotICAgICAgZGlmZl9jb3ZlcmFnZTogICAgIGRpZmZfY292ZXJhZ2UsCi0gICAgICB0b3RhbF9jaGFuZ2VkOiAgICAgdG90YWxfY2hhbmdlZCwKLSAgICAgIHRvdGFsX2NvdmVyZWQ6ICAgICB0b3RhbF9jb3ZlcmVkCi0gICAgKQotICBlbmQKLSAgbGV0KDphbmFseXNlcl9pbnN0YW5jZSkgeyBpbnN0YW5jZV9kb3VibGUoQ292ZXJhZ2VSZXBvcnRlcjo6Q292ZXJhZ2VBbmFseXNlciwgY2FsbDogYW5hbHlzaXNfcmVzdWx0KSB9CisgIGxldCg6Y292ZXJhZ2VfcmVwb3J0X2xvYWRlcl9pbnN0YW5jZSkgeyBpbnN0YW5jZV9kb3VibGUoQ292ZXJhZ2VSZXBvcnRlcjo6Q292ZXJhZ2VSZXBvcnRMb2FkZXIsIGNhbGw6IGNvdmVyYWdlX3JlcG9ydF9kYXRhKSB9CisgIGxldCg6dW5jb3ZlcmVkX3Jhbmdlc19leHRyYWN0b3JfaW5zdGFuY2UpIHsgaW5zdGFuY2VfZG91YmxlKENvdmVyYWdlUmVwb3J0ZXI6OlVuY292ZXJlZFJhbmdlc0V4dHJhY3RvciwgY2FsbDogY292ZXJhZ2UpIH0KKyAgbGV0KDpwdWxsX3JlcXVlc3RfaW5zdGFuY2UpIHsgaW5zdGFuY2VfZG91YmxlKENvdmVyYWdlUmVwb3J0ZXI6OlB1bGxSZXF1ZXN0LCBkaWZmOiBkaWZmX3RleHQpIH0KKyAgbGV0KDppbmxpbmVfY29tbWVudF9mYWN0b3J5X2luc3RhbmNlKSB7IGluc3RhbmNlX2RvdWJsZShDb3ZlcmFnZVJlcG9ydGVyOjpJbmxpbmVDb21tZW50RmFjdG9yeSkgfQorICBsZXQoOmlubGluZV9jb21tZW50X3Bvc3Rlcl9pbnN0YW5jZSkgeyBpbnN0YW5jZV9kb3VibGUoQ292ZXJhZ2VSZXBvcnRlcjo6SW5saW5lQ29tbWVudFBvc3RlcikgfQorICBsZXQoOmdsb2JhbF9jb21tZW50X2ZhY3RvcnlfaW5zdGFuY2UpIHsgaW5zdGFuY2VfZG91YmxlKENvdmVyYWdlUmVwb3J0ZXI6Okdsb2JhbENvbW1lbnRGYWN0b3J5KSB9CisgIGxldCg6Z2xvYmFsX2NvbW1lbnRfcG9zdGVyX2luc3RhbmNlKSB7IGluc3RhbmNlX2RvdWJsZShDb3ZlcmFnZVJlcG9ydGVyOjpHbG9iYWxDb21tZW50UG9zdGVyKSB9CisgIGxldCg6ZGlmZl90ZXh0KSB7ICJkaWZmIC0tZ2l0IGEvbGliL2Zvby5yYiBiL2xpYi9mb28ucmJcbisrKyBiL2xpYi9mb28ucmJcbkBAIC0xLDAgKzEsMyBAQFxuK2xpbmUxXG4rbGluZTJcbitsaW5lMyIgfQorICBsZXQoOmFuYWx5c2lzX3Jlc3VsdCkgeyB7ICJsaWIvZm9vLnJiIiA9PiBbWzMsIDNdXSB9IH0KKyAgbGV0KDptb2RpZmllZF91bmNvdmVyZWRfaW50ZXJzZWN0aW9uX2luc3RhbmNlKSB7IGluc3RhbmNlX2RvdWJsZShDb3ZlcmFnZVJlcG9ydGVyOjpNb2RpZmllZFVuY292ZXJlZEludGVyc2VjdGlvbiwgY2FsbDogYW5hbHlzaXNfcmVzdWx0KSB9CiAgICMgUHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBvdmVycmlkZGVuIHBlciBleGFtcGxlCi0gIGxldCg6Y292ZXJhZ2UpIHsgeyAibGliL2Zvby5yYiIgPT4gWzEsIDJdIH0gfQotICBsZXQoOmRpZmYpIHsgeyAibGliL2Zvby5yYiIgPT4gWzEsIDIsIDNdIH0gfQotICBsZXQoOnVuY292ZXJlZF9ieV9maWxlKSB7IHsgImxpYi9mb28ucmIiID0+IFszXSB9IH0KLSAgbGV0KDpkaWZmX2NvdmVyYWdlKSB7IDY2LjY3IH0KLSAgbGV0KDp0b3RhbF9jaGFuZ2VkKSB7IDMgfQotICBsZXQoOnRvdGFsX2NvdmVyZWQpIHsgMiB9CisgIGxldCg6Y292ZXJhZ2UpIHsgeyAibGliL2Zvby5yYiIgPT4gW1sxLCAyXV0gfSB9CisgIGxldCg6ZGlmZikgeyB7ICJsaWIvZm9vLnJiIiA9PiBbWzEsIDNdXSB9IH0KKyAgbGV0KDptb2RpZmllZF9yYW5nZXNfZXh0cmFjdG9yX2luc3RhbmNlKSB7IGluc3RhbmNlX2RvdWJsZShDb3ZlcmFnZVJlcG9ydGVyOjpNb2RpZmllZFJhbmdlc0V4dHJhY3RvciwgY2FsbDogZGlmZikgfQorICBsZXQoOmNvdmVyYWdlX3JlcG9ydF9kYXRhKSB7IHsgImxpYi9mb28ucmIiID0+IHsgImxpbmVzIiA9PiBbMSwgMSwgMCwgMSwgbmlsXSB9IH0gfQogICBsZXQoOnByX251bWJlcikgeyA5OSB9CiAgIGxldCg6cmVwbykgeyAidXNlci9yZXBvIiB9CiAgIGxldCg6aHRtbF9yb290KSAgICAgeyAiY292ZXJhZ2UiIH0KICAgbGV0KDpnaXRodWJfdG9rZW4pICB7ICJnaC10b2tlbiIgfQotICBsZXQoOmJhc2VfcmVmKSAgICAgIHsgIm9yaWdpbi9tYWluIiB9CiAgIGxldCg6Y29tbWl0X3NoYSkgICAgeyAiYWJjMTIzIiB9CiAKICAgbGV0KDpvcHRpb25zKSBkbwogICAgIHsKLSAgICAgIGNvdmVyYWdlX3BhdGg6IGNvdmVyYWdlX3BhdGgsCi0gICAgICBodG1sX3Jvb3Q6ICAgICBodG1sX3Jvb3QsCi0gICAgICBnaXRodWJfdG9rZW46ICBnaXRodWJfdG9rZW4sCi0gICAgICBiYXNlX3JlZjogICAgICBiYXNlX3JlZiwKLSAgICAgIHByX251bWJlcjogICAgIHByX251bWJlciwKLSAgICAgIHJlcG86ICAgICAgICAgIHJlcG8sCi0gICAgICBjb21taXRfc2hhOiAgICBjb21taXRfc2hhCisgICAgICBjb3ZlcmFnZV9yZXBvcnRfcGF0aDogY292ZXJhZ2VfcmVwb3J0X3BhdGgsCisgICAgICBnaXRodWJfdG9rZW46ICAgICAgICAgZ2l0aHViX3Rva2VuLAorICAgICAgcHJfbnVtYmVyOiAgICAgICAgICAgIHByX251bWJlciwKKyAgICAgIHJlcG86ICAgICAgICAgICAgICAgICByZXBvLAorICAgICAgY29tbWl0X3NoYTogICAgICAgICAgIGNvbW1pdF9zaGEsCisgICAgICBidWlsZF91cmw6ICAgICAgICAgICAgbmlsCiAgICAgfQogICBlbmQKIAogICBiZWZvcmUgZG8KLSAgICBhbGxvdyhDb3ZlcmFnZVJlcG9ydGVyOjpDb3ZlcmFnZVBhcnNlcikKLSAgICAgIC50byByZWNlaXZlKDpuZXcpLndpdGgoY292ZXJhZ2VfcGF0aCkuYW5kX3JldHVybihwYXJzZXJfaW5zdGFuY2UpCisgICAgYWxsb3coQ292ZXJhZ2VSZXBvcnRlcjo6Q292ZXJhZ2VSZXBvcnRMb2FkZXIpCisgICAgICAudG8gcmVjZWl2ZSg6bmV3KS53aXRoKGNvdmVyYWdlX3JlcG9ydF9wYXRoKS5hbmRfcmV0dXJuKGNvdmVyYWdlX3JlcG9ydF9sb2FkZXJfaW5zdGFuY2UpCisKKyAgICBhbGxvdyhDb3ZlcmFnZVJlcG9ydGVyOjpVbmNvdmVyZWRSYW5nZXNFeHRyYWN0b3IpCisgICAgICAudG8gcmVjZWl2ZSg6bmV3KS53aXRoKGNvdmVyYWdlX3JlcG9ydF9kYXRhKS5hbmRfcmV0dXJuKHVuY292ZXJlZF9yYW5nZXNfZXh0cmFjdG9yX2luc3RhbmNlKQogCi0gICAgYWxsb3coQ292ZXJhZ2VSZXBvcnRlcjo6RGlmZlBhcnNlcikKLSAgICAgIC50byByZWNlaXZlKDpuZXcpLndpdGgoYmFzZV9yZWYpLmFuZF9yZXR1cm4oZGlmZl9pbnN0YW5jZSkKKyAgICBhbGxvdyhDb3ZlcmFnZVJlcG9ydGVyOjpNb2RpZmllZFJhbmdlc0V4dHJhY3RvcikKKyAgICAgIC50byByZWNlaXZlKDpuZXcpLndpdGgoZGlmZl90ZXh0KS5hbmRfcmV0dXJuKG1vZGlmaWVkX3Jhbmdlc19leHRyYWN0b3JfaW5zdGFuY2UpCiAKLSAgICBhbGxvdyhDb3ZlcmFnZVJlcG9ydGVyOjpDb3ZlcmFnZUFuYWx5c2VyKQotICAgICAgLnRvIHJlY2VpdmUoOm5ldykud2l0aChjb3ZlcmFnZTogY292ZXJhZ2UsIGRpZmY6IGRpZmYpCi0gICAgICAuYW5kX3JldHVybihhbmFseXNlcl9pbnN0YW5jZSkKKyAgICBhbGxvdyhDb3ZlcmFnZVJlcG9ydGVyOjpNb2RpZmllZFVuY292ZXJlZEludGVyc2VjdGlvbikKKyAgICAgIC50byByZWNlaXZlKDpuZXcpLndpdGgodW5jb3ZlcmVkX3JhbmdlczogY292ZXJhZ2UsIG1vZGlmaWVkX3JhbmdlczogZGlmZikKKyAgICAgIC5hbmRfcmV0dXJuKG1vZGlmaWVkX3VuY292ZXJlZF9pbnRlcnNlY3Rpb25faW5zdGFuY2UpCiAKICAgICBhbGxvdyhDb3ZlcmFnZVJlcG9ydGVyOjpQdWxsUmVxdWVzdCkKICAgICAgIC50byByZWNlaXZlKDpuZXcpLndpdGgoZ2l0aHViX3Rva2VuOiBnaXRodWJfdG9rZW4sIHJlcG86IHJlcG8sIHByX251bWJlcjogcHJfbnVtYmVyKQogICAgICAgLmFuZF9yZXR1cm4ocHVsbF9yZXF1ZXN0X2luc3RhbmNlKQogCi0gICAgYWxsb3coQ292ZXJhZ2VSZXBvcnRlcjo6Q29tbWVudFBvc3RlcikKLSAgICAgIC50byByZWNlaXZlKDpuZXcpLndpdGgocHVsbF9yZXF1ZXN0OiBwdWxsX3JlcXVlc3RfaW5zdGFuY2UsIGFuYWx5c2lzOiBhbmFseXNpc19yZXN1bHQsIGNvbW1pdF9zaGE6IGNvbW1pdF9zaGEpCi0gICAgICAuYW5kX3JldHVybihwb3N0ZXJfaW5zdGFuY2UpCisgICAgYWxsb3coQ292ZXJhZ2VSZXBvcnRlcjo6SW5saW5lQ29tbWVudEZhY3RvcnkpCisgICAgICAudG8gcmVjZWl2ZSg6bmV3KS53aXRoKGludGVyc2VjdGlvbjogYW5hbHlzaXNfcmVzdWx0LCBjb21taXRfc2hhOiBjb21taXRfc2hhKQorICAgICAgLmFuZF9yZXR1cm4oaW5saW5lX2NvbW1lbnRfZmFjdG9yeV9pbnN0YW5jZSkKKworICAgIGFsbG93KGlubGluZV9jb21tZW50X2ZhY3RvcnlfaW5zdGFuY2UpLnRvIHJlY2VpdmUoOmNhbGwpLmFuZF9yZXR1cm4oW10pCisKKyAgICBhbGxvdyhDb3ZlcmFnZVJlcG9ydGVyOjpJbmxpbmVDb21tZW50UG9zdGVyKQorICAgICAgLnRvIHJlY2VpdmUoOm5ldykud2l0aChwdWxsX3JlcXVlc3Q6IHB1bGxfcmVxdWVzdF9pbnN0YW5jZSwgY29tbWl0X3NoYTogY29tbWl0X3NoYSwgaW5saW5lX2NvbW1lbnRzOiBbXSkKKyAgICAgIC5hbmRfcmV0dXJuKGlubGluZV9jb21tZW50X3Bvc3Rlcl9pbnN0YW5jZSkKKworICAgIGFsbG93KENvdmVyYWdlUmVwb3J0ZXI6Okdsb2JhbENvbW1lbnRGYWN0b3J5KQorICAgICAgLnRvIHJlY2VpdmUoOm5ldykud2l0aChjb21taXRfc2hhOiBjb21taXRfc2hhKQorICAgICAgLmFuZF9yZXR1cm4oZ2xvYmFsX2NvbW1lbnRfZmFjdG9yeV9pbnN0YW5jZSkKKworICAgIGFsbG93KGdsb2JhbF9jb21tZW50X2ZhY3RvcnlfaW5zdGFuY2UpLnRvIHJlY2VpdmUoOmNhbGwpLmFuZF9yZXR1cm4oaW5zdGFuY2VfZG91YmxlKENvdmVyYWdlUmVwb3J0ZXI6Okdsb2JhbENvbW1lbnQpKQorCisgICAgYWxsb3coQ292ZXJhZ2VSZXBvcnRlcjo6R2xvYmFsQ29tbWVudFBvc3RlcikKKyAgICAgIC50byByZWNlaXZlKDpuZXcpLndpdGgocHVsbF9yZXF1ZXN0OiBwdWxsX3JlcXVlc3RfaW5zdGFuY2UsIGdsb2JhbF9jb21tZW50OiBhbnl0aGluZykKKyAgICAgIC5hbmRfcmV0dXJuKGdsb2JhbF9jb21tZW50X3Bvc3Rlcl9pbnN0YW5jZSkKIAotICAgIGFsbG93KHBvc3Rlcl9pbnN0YW5jZSkudG8gcmVjZWl2ZSg6Y2FsbCkKKyAgICBhbGxvdyhpbmxpbmVfY29tbWVudF9wb3N0ZXJfaW5zdGFuY2UpLnRvIHJlY2VpdmUoOmNhbGwpCisgICAgYWxsb3coZ2xvYmFsX2NvbW1lbnRfcG9zdGVyX2luc3RhbmNlKS50byByZWNlaXZlKDpjYWxsKQogICBlbmQKIAogICBkZXNjcmliZSAiI3J1biIgZG8KICAgICBpdCAicGFyc2VzIGNvdmVyYWdlLCBmZXRjaGVzIGRpZmYsIGFuYWx5emVzLCBhbmQgcHVibGlzaGVzIGlubGluZSAmIGdsb2JhbCBjb21tZW50cyIgZG8KICAgICAgIHJ1bm5lci5ydW4KIAotICAgICAgZXhwZWN0KHBhcnNlcl9pbnN0YW5jZSkudG8gaGF2ZV9yZWNlaXZlZCg6Y2FsbCkub25jZQotICAgICAgZXhwZWN0KGRpZmZfaW5zdGFuY2UpLnRvIGhhdmVfcmVjZWl2ZWQoOmNhbGwpLm9uY2UKLSAgICAgIGV4cGVjdChhbmFseXNlcl9pbnN0YW5jZSkudG8gaGF2ZV9yZWNlaXZlZCg6Y2FsbCkub25jZQorICAgICAgZXhwZWN0KGNvdmVyYWdlX3JlcG9ydF9sb2FkZXJfaW5zdGFuY2UpLnRvIGhhdmVfcmVjZWl2ZWQoOmNhbGwpLm9uY2UKKyAgICAgIGV4cGVjdCh1bmNvdmVyZWRfcmFuZ2VzX2V4dHJhY3Rvcl9pbnN0YW5jZSkudG8gaGF2ZV9yZWNlaXZlZCg6Y2FsbCkub25jZQorICAgICAgZXhwZWN0KG1vZGlmaWVkX3Jhbmdlc19leHRyYWN0b3JfaW5zdGFuY2UpLnRvIGhhdmVfcmVjZWl2ZWQoOmNhbGwpLm9uY2UKKyAgICAgIGV4cGVjdChtb2RpZmllZF91bmNvdmVyZWRfaW50ZXJzZWN0aW9uX2luc3RhbmNlKS50byBoYXZlX3JlY2VpdmVkKDpjYWxsKS5vbmNlCiAKLSAgICAgIGV4cGVjdChwb3N0ZXJfaW5zdGFuY2UpLnRvIGhhdmVfcmVjZWl2ZWQoOmNhbGwpCisgICAgICBleHBlY3QoaW5saW5lX2NvbW1lbnRfcG9zdGVyX2luc3RhbmNlKS50byBoYXZlX3JlY2VpdmVkKDpjYWxsKQorICAgICAgZXhwZWN0KGdsb2JhbF9jb21tZW50X3Bvc3Rlcl9pbnN0YW5jZSkudG8gaGF2ZV9yZWNlaXZlZCg6Y2FsbCkKICAgICBlbmQKIAogICAgIGNvbnRleHQgIndoZW4gdGhlcmUgYXJlIG5vIHVuY292ZXJlZCBsaW5lcyIgZG8KLSAgICAgIGxldCg6dW5jb3ZlcmVkX2J5X2ZpbGUpIHsge30gfQotICAgICAgbGV0KDpjb3ZlcmFnZSkgeyB7ICJsaWIvYmFyLnJiIiA9PiBbNSwgNiwgN10gfSB9Ci0gICAgICBsZXQoOmRpZmYpIHsgeyAibGliL2Jhci5yYiIgPT4gWzUsIDYsIDddIH0gfQotICAgICAgbGV0KDpkaWZmX2NvdmVyYWdlKSB7IDEwMC4wIH0KKyAgICAgIGxldCg6YW5hbHlzaXNfcmVzdWx0KSB7IHt9IH0KKyAgICAgIGxldCg6Y292ZXJhZ2UpIHsgeyAibGliL2Jhci5yYiIgPT4gW1s1LCA2LCA3XV0gfSB9CisgICAgICBsZXQoOmRpZmYpIHsgeyAibGliL2Jhci5yYiIgPT4gW1s1LCA2LCA3XV0gfSB9CiAKICAgICAgIGl0ICJzdGlsbCBwdWJsaXNoZXMgYm90aCBpbmxpbmUgKHdpdGggZW1wdHkgbWFwcGluZykgYW5kIGdsb2JhbCBjb21tZW50cyIgZG8KICAgICAgICAgcnVubmVyLnJ1bgogCi0gICAgICAgIGV4cGVjdChwb3N0ZXJfaW5zdGFuY2UpLnRvIGhhdmVfcmVjZWl2ZWQoOmNhbGwpCisgICAgICAgIGV4cGVjdChpbmxpbmVfY29tbWVudF9wb3N0ZXJfaW5zdGFuY2UpLnRvIGhhdmVfcmVjZWl2ZWQoOmNhbGwpCisgICAgICAgIGV4cGVjdChnbG9iYWxfY29tbWVudF9wb3N0ZXJfaW5zdGFuY2UpLnRvIGhhdmVfcmVjZWl2ZWQoOmNhbGwpCiAgICAgICBlbmQKICAgICBlbmQKICAgZW5kCmRpZmYgLS1naXQgYS9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL3VuY292ZXJlZF9yYW5nZXNfZXh0cmFjdG9yX3NwZWMucmIgYi9zcGVjL2NvdmVyYWdlX3JlcG9ydGVyL3VuY292ZXJlZF9yYW5nZXNfZXh0cmFjdG9yX3NwZWMucmIKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uNTJjZmE4YgotLS0gL2Rldi9udWxsCisrKyBiL3NwZWMvY292ZXJhZ2VfcmVwb3J0ZXIvdW5jb3ZlcmVkX3Jhbmdlc19leHRyYWN0b3Jfc3BlYy5yYgpAQCAtMCwwICsxLDI3MiBAQAorIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUKKworcmVxdWlyZSAic3BlY19oZWxwZXIiCisKK1JTcGVjLmRlc2NyaWJlIENvdmVyYWdlUmVwb3J0ZXI6OlVuY292ZXJlZFJhbmdlc0V4dHJhY3RvciBkbworICBjb250ZXh0ICJ3aGVuIHRoZSBjb3ZlcmFnZSByZXBvcnQgaXMgbmlsIiBkbworICAgIGl0ICJyZXR1cm5zIGFuIGVtcHR5IGhhc2giIGRvCisgICAgICBwYXJzZXIgPSBkZXNjcmliZWRfY2xhc3MubmV3KG5pbCkKKyAgICAgIGV4cGVjdChwYXJzZXIuY2FsbCkudG8gZXEoe30pCisgICAgZW5kCisgIGVuZAorCisgIGNvbnRleHQgIndoZW4gdGhlIGNvdmVyYWdlIHJlcG9ydCBpcyBub3QgYSBIYXNoIiBkbworICAgIGl0ICJyZXR1cm5zIGFuIGVtcHR5IGhhc2giIGRvCisgICAgICBwYXJzZXIgPSBkZXNjcmliZWRfY2xhc3MubmV3KCV3W2FycmF5IG5vdCBoYXNoXSkKKyAgICAgIGV4cGVjdChwYXJzZXIuY2FsbCkudG8gZXEoe30pCisgICAgZW5kCisgIGVuZAorCisgIGNvbnRleHQgIndoZW4gdGhlIGNvdmVyYWdlIHJlcG9ydCBoYXMgbm8gJ2NvdmVyYWdlJyBrZXkiIGRvCisgICAgaXQgInJldHVybnMgYW4gZW1wdHkgaGFzaCIgZG8KKyAgICAgIHBhcnNlciA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoe30pCisgICAgICBleHBlY3QocGFyc2VyLmNhbGwpLnRvIGVxKHt9KQorICAgIGVuZAorICBlbmQKKworICBjb250ZXh0ICJ3aXRoIFNpbXBsZUNvdiBmb3JtYXQgY292ZXJhZ2UgZGF0YSIgZG8KKyAgICBsZXQoOmNvdmVyYWdlX3JlcG9ydCkgZG8KKyAgICAgIHsKKyAgICAgICAgImNvdmVyYWdlIiA9PiB7CisgICAgICAgICAgImxpYi9mb28ucmIiICA9PiB7ICJsaW5lcyIgPT4gW25pbCwgMSwgMCwgMl0gfSwgIyBsaW5lcyAyICYgNCBjb3ZlcmVkLCBsaW5lIDMgdW5jb3ZlcmVkCisgICAgICAgICAgImxpYi9iYXIucmIiICA9PiB7ICJsaW5lcyIgPT4gWzEsIDAsIDEsIDAsIDNdIH0sICMgbGluZXMgMSwgMywgNSBjb3ZlcmVkLCBsaW5lcyAyLCA0IHVuY292ZXJlZAorICAgICAgICAgICJsaWIvYmF6LnJiIiAgPT4geyAibGluZXMiID0+IFtuaWwsIDAsIDEsIDFdIH0sICMgbGluZXMgMyAmIDQgY292ZXJlZCwgbGluZSAyIHVuY292ZXJlZAorICAgICAgICAgICJsaWIvcXV4LnJiIiAgPT4geyAibGluZXMiID0+IFswLCAwLCA1XSB9LCAjIGxpbmVzIDEsIDIgdW5jb3ZlcmVkLCBsaW5lIDMgY292ZXJlZAorICAgICAgICAgICJsaWIvcXV1eC5yYiIgPT4geyAibGluZXMiID0+IFsxLCAyLCAwLCAzXSB9ICMgbGluZXMgMSwgMiwgNCBjb3ZlcmVkLCBsaW5lIDMgdW5jb3ZlcmVkCisgICAgICAgIH0KKyAgICAgIH0KKyAgICBlbmQKKworICAgIGl0ICJwYXJzZXMgY292ZXJhZ2UgZGF0YSBhbmQgZXh0cmFjdHMgdW5jb3ZlcmVkIHJhbmdlcyIgZG8KKyAgICAgIHBhcnNlciA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoY292ZXJhZ2VfcmVwb3J0KQorICAgICAgcmVzdWx0ID0gcGFyc2VyLmNhbGwKKworICAgICAgZXhwZWN0KHJlc3VsdC5rZXlzKS50byBtYXRjaF9hcnJheSgKKyAgICAgICAgJXdbCisgICAgICAgICAgbGliL2Zvby5yYgorICAgICAgICAgIGxpYi9iYXIucmIKKyAgICAgICAgICBsaWIvYmF6LnJiCisgICAgICAgICAgbGliL3F1eC5yYgorICAgICAgICAgIGxpYi9xdXV4LnJiCisgICAgICAgIF0KKyAgICAgICkKKworICAgICAgIyBsaWIvZm9vLnJiOiBsaW5lIDMgdW5jb3ZlcmVkCisgICAgICBleHBlY3QocmVzdWx0WyJsaWIvZm9vLnJiIl0pLnRvIGNvbnRhaW5fZXhhY3RseShbMywgM10pCisgICAgICAjIGxpYi9iYXIucmI6IGxpbmVzIDIsIDQgdW5jb3ZlcmVkCisgICAgICBleHBlY3QocmVzdWx0WyJsaWIvYmFyLnJiIl0pLnRvIGNvbnRhaW5fZXhhY3RseShbMiwgMl0sIFs0LCA0XSkKKyAgICAgICMgbGliL2Jhei5yYjogbGluZSAyIHVuY292ZXJlZAorICAgICAgZXhwZWN0KHJlc3VsdFsibGliL2Jhei5yYiJdKS50byBjb250YWluX2V4YWN0bHkoWzIsIDJdKQorICAgICAgIyBsaWIvcXV4LnJiOiBsaW5lcyAxLCAyIHVuY292ZXJlZAorICAgICAgZXhwZWN0KHJlc3VsdFsibGliL3F1eC5yYiJdKS50byBjb250YWluX2V4YWN0bHkoWzEsIDJdKQorICAgICAgIyBsaWIvcXV1eC5yYjogbGluZSAzIHVuY292ZXJlZAorICAgICAgZXhwZWN0KHJlc3VsdFsibGliL3F1dXgucmIiXSkudG8gY29udGFpbl9leGFjdGx5KFszLCAzXSkKKyAgICBlbmQKKyAgZW5kCisKKyAgY29udGV4dCAid2l0aCBtdWx0aXBsZSBmaWxlcyBoYXZpbmcgZGlmZmVyZW50IGNvdmVyYWdlIHBhdHRlcm5zIiBkbworICAgIGxldCg6Y292ZXJhZ2VfcmVwb3J0KSBkbworICAgICAgeworICAgICAgICAiY292ZXJhZ2UiID0+IHsKKyAgICAgICAgICAibGliL2ZpbGUxLnJiIiA9PiB7ICJsaW5lcyIgPT4gW25pbCwgMSwgMCwgMl0gfSwgIyBsaW5lcyAyICYgNCBjb3ZlcmVkLCBsaW5lIDMgdW5jb3ZlcmVkCisgICAgICAgICAgImxpYi9maWxlMi5yYiIgPT4geyAibGluZXMiID0+IFswLCAwLCAxLCAwLCAxXSB9LCAjIGxpbmVzIDMgJiA1IGNvdmVyZWQsIGxpbmVzIDEsIDIsIDQgdW5jb3ZlcmVkCisgICAgICAgICAgImxpYi9maWxlMy5yYiIgPT4geyAibGluZXMiID0+IFsxLCAyLCAwLCAzLCAwXSB9ICMgbGluZXMgMSwgMiwgNCBjb3ZlcmVkLCBsaW5lcyAzLCA1IHVuY292ZXJlZAorICAgICAgICB9CisgICAgICB9CisgICAgZW5kCisKKyAgICBpdCAiZXh0cmFjdHMgdW5jb3ZlcmVkIHJhbmdlcyBmb3IgZWFjaCBmaWxlIiBkbworICAgICAgcGFyc2VyID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhjb3ZlcmFnZV9yZXBvcnQpCisgICAgICByZXN1bHQgPSBwYXJzZXIuY2FsbAorCisgICAgICBleHBlY3QocmVzdWx0WyJsaWIvZmlsZTEucmIiXSkudG8gY29udGFpbl9leGFjdGx5KFszLCAzXSkKKyAgICAgIGV4cGVjdChyZXN1bHRbImxpYi9maWxlMi5yYiJdKS50byBjb250YWluX2V4YWN0bHkoWzEsIDJdLCBbNCwgNF0pCisgICAgICBleHBlY3QocmVzdWx0WyJsaWIvZmlsZTMucmIiXSkudG8gY29udGFpbl9leGFjdGx5KFszLCAzXSwgWzUsIDVdKQorICAgIGVuZAorICBlbmQKKworICBjb250ZXh0ICJ3aGVuIGNvdmVyYWdlIGRhdGEgaXMgZW1wdHkgb3IgaW52YWxpZCIgZG8KKyAgICBsZXQoOmNvdmVyYWdlX3JlcG9ydCkgZG8KKyAgICAgIHsKKyAgICAgICAgImNvdmVyYWdlIiA9PiB7fQorICAgICAgfQorICAgIGVuZAorCisgICAgaXQgInJldHVybnMgYW4gZW1wdHkgaGFzaCIgZG8KKyAgICAgIHBhcnNlciA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoY292ZXJhZ2VfcmVwb3J0KQorICAgICAgZXhwZWN0KHBhcnNlci5jYWxsKS50byBlcSh7fSkKKyAgICBlbmQKKyAgZW5kCisKKyAgY29udGV4dCAid2l0aCB6ZXJvIC8gbmlsIC8gbm9uLXBvc2l0aXZlIGNvdW50cyBpbiBjb3ZlcmFnZSBhcnJheXMiIGRvCisgICAgbGV0KDpjb3ZlcmFnZV9yZXBvcnQpIGRvCisgICAgICB7CisgICAgICAgICJjb3ZlcmFnZSIgPT4geworICAgICAgICAgICJsaWIvbWl4ZWRfY291bnRzLnJiIiA9PiB7ICJsaW5lcyIgPT4gWzAsIG5pbCwgMSwgMiwgMF0gfSwgIyBsaW5lcyAzICYgNCBjb3ZlcmVkLCBsaW5lcyAxICYgNSB1bmNvdmVyZWQKKyAgICAgICAgICAibGliL3plcm9fbGluZXMucmIiICAgPT4geyAibGluZXMiID0+IFswLCAwLCAwLCAxLCAwXSB9ICMgbGluZXMgMSwgMiwgMywgNSB1bmNvdmVyZWQsIGxpbmUgNCBjb3ZlcmVkCisgICAgICAgIH0KKyAgICAgIH0KKyAgICBlbmQKKworICAgIGl0ICJpZGVudGlmaWVzIHVuY292ZXJlZCBsaW5lcyAoY291bnQgPT0gMCkgYW5kIGlnbm9yZXMgbnVsbC9uZWdhdGl2ZSB2YWx1ZXMiIGRvCisgICAgICBwYXJzZXIgPSBkZXNjcmliZWRfY2xhc3MubmV3KGNvdmVyYWdlX3JlcG9ydCkKKyAgICAgIHJlc3VsdCA9IHBhcnNlci5jYWxsCisKKyAgICAgIGV4cGVjdChyZXN1bHRbImxpYi9taXhlZF9jb3VudHMucmIiXSkudG8gY29udGFpbl9leGFjdGx5KFsxLCAxXSwgWzUsIDVdKQorICAgICAgZXhwZWN0KHJlc3VsdFsibGliL3plcm9fbGluZXMucmIiXSkudG8gY29udGFpbl9leGFjdGx5KFsxLCAzXSwgWzUsIDVdKQorICAgIGVuZAorICBlbmQKKworICBjb250ZXh0ICJ3aXRoIGFic29sdXRlIGZpbGUgcGF0aHMgaW4gY292ZXJhZ2UgZGF0YSIgZG8KKyAgICBpdCAicmVtb3ZlcyBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IHByZWZpeCBmcm9tIGFic29sdXRlIHBhdGhzIiBkbworICAgICAgIyBVc2UgdGhlIGFjdHVhbCBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IGluIHRoZSB0ZXN0IGRhdGEKKyAgICAgIGN1cnJlbnRfZGlyID0gRGlyLnB3ZAorICAgICAgY292ZXJhZ2VfcmVwb3J0ID0geworICAgICAgICAiY292ZXJhZ2UiID0+IHsKKyAgICAgICAgICAiI3tjdXJyZW50X2Rpcn0vbGliL2Fic29sdXRlLnJiIiA9PiB7ICJsaW5lcyIgPT4gW25pbCwgMSwgMCwgMl0gfSwgIyBsaW5lcyAyICYgNCBjb3ZlcmVkLCBsaW5lIDMgdW5jb3ZlcmVkCisgICAgICAgICAgImxpYi9yZWxhdGl2ZS5yYiIgICAgICAgICAgICAgICAgPT4geyAibGluZXMiID0+IFtuaWwsIDAsIDFdIH0sICMgbGluZSAzIGNvdmVyZWQsIGxpbmUgMiB1bmNvdmVyZWQKKyAgICAgICAgICAiL3NvbWUvb3RoZXIvcGF0aC9vdXRzaWRlLnJiIiAgICA9PiB7ICJsaW5lcyIgPT4gW25pbCwgMV0gfSAjIGxpbmUgMiBjb3ZlcmVkLCBidXQgb3V0c2lkZSBwcm9qZWN0CisgICAgICAgIH0KKyAgICAgIH0KKworICAgICAgcGFyc2VyID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhjb3ZlcmFnZV9yZXBvcnQpCisgICAgICByZXN1bHQgPSBwYXJzZXIuY2FsbAorCisgICAgICAjIFNob3VsZCByZW1vdmUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBwcmVmaXggZnJvbSBhYnNvbHV0ZSBwYXRoCisgICAgICBleHBlY3QocmVzdWx0WyJsaWIvYWJzb2x1dGUucmIiXSkudG8gY29udGFpbl9leGFjdGx5KFszLCAzXSkKKyAgICAgICMgU2hvdWxkIGtlZXAgcmVsYXRpdmUgcGF0aHMgYXMtaXMKKyAgICAgIGV4cGVjdChyZXN1bHRbImxpYi9yZWxhdGl2ZS5yYiJdKS50byBjb250YWluX2V4YWN0bHkoWzIsIDJdKQorICAgICAgIyBTaG91bGQga2VlcCBwYXRocyB0aGF0IGRvbid0IHN0YXJ0IHdpdGggY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBhcy1pcworICAgICAgZXhwZWN0KHJlc3VsdFsiL3NvbWUvb3RoZXIvcGF0aC9vdXRzaWRlLnJiIl0pLnRvIGVxKFtdKQorICAgIGVuZAorICBlbmQKKworICBjb250ZXh0ICJ3aXRoIHZhcmlvdXMgZmlsZSBwYXRoIGZvcm1hdHMiIGRvCisgICAgaXQgInJlbW92ZXMgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBwcmVmaXggd2hlbiBwcmVzZW50LCBrZWVwcyBvdGhlcnMgYXMtaXMiIGRvCisgICAgICAjIFVzZSB0aGUgYWN0dWFsIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgaW4gdGhlIHRlc3QgZGF0YQorICAgICAgY3VycmVudF9kaXIgPSBEaXIucHdkCisgICAgICBjb3ZlcmFnZV9yZXBvcnQgPSB7CisgICAgICAgICJjb3ZlcmFnZSIgPT4geworICAgICAgICAgICIje2N1cnJlbnRfZGlyfS9saWIvYWJzb2x1dGUucmIiID0+IHsgImxpbmVzIiA9PiBbbmlsLCAxLCAwLCAyXSB9LCAjIEFic29sdXRlIHBhdGggd2l0aCBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5CisgICAgICAgICAgImxpYi9yZWxhdGl2ZS5yYiIgICAgICAgICAgICAgICAgPT4geyAibGluZXMiID0+IFtuaWwsIDAsIDFdIH0sICMgUmVsYXRpdmUgcGF0aAorICAgICAgICAgICIvZXRjL3Bhc3N3ZCIgICAgICAgICAgICAgICAgICAgID0+IHsgImxpbmVzIiA9PiBbbmlsLCAxXSB9LCAjIEFic29sdXRlIHBhdGggb3V0c2lkZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5CisgICAgICAgICAgIi4uL3NpYmxpbmcvZmlsZS5yYiIgICAgICAgICAgICAgPT4geyAibGluZXMiID0+IFtuaWwsIDFdIH0sICMgUmVsYXRpdmUgcGF0aCBvdXRzaWRlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkKKyAgICAgICAgICAiYXBwL21vZGVscy91c2VyLnJiIiAgICAgICAgICAgICA9PiB7ICJsaW5lcyIgPT4gW25pbCwgMV0gfSAjIEFub3RoZXIgcmVsYXRpdmUgcGF0aAorICAgICAgICB9CisgICAgICB9CisKKyAgICAgIHBhcnNlciA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoY292ZXJhZ2VfcmVwb3J0KQorICAgICAgcmVzdWx0ID0gcGFyc2VyLmNhbGwKKworICAgICAgIyBTaG91bGQgcmVtb3ZlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgcHJlZml4IGZyb20gYWJzb2x1dGUgcGF0aCB0aGF0IHN0YXJ0cyB3aXRoIGl0CisgICAgICBleHBlY3QocmVzdWx0WyJsaWIvYWJzb2x1dGUucmIiXSkudG8gY29udGFpbl9leGFjdGx5KFszLCAzXSkKKyAgICAgICMgU2hvdWxkIGtlZXAgcmVsYXRpdmUgcGF0aHMgYXMtaXMKKyAgICAgIGV4cGVjdChyZXN1bHRbImxpYi9yZWxhdGl2ZS5yYiJdKS50byBjb250YWluX2V4YWN0bHkoWzIsIDJdKQorICAgICAgZXhwZWN0KHJlc3VsdFsiYXBwL21vZGVscy91c2VyLnJiIl0pLnRvIGVxKFtdKQorICAgICAgIyBTaG91bGQga2VlcCBwYXRocyB0aGF0IGRvbid0IHN0YXJ0IHdpdGggY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBhcy1pcworICAgICAgZXhwZWN0KHJlc3VsdFsiL2V0Yy9wYXNzd2QiXSkudG8gZXEoW10pCisgICAgICBleHBlY3QocmVzdWx0WyIuLi9zaWJsaW5nL2ZpbGUucmIiXSkudG8gZXEoW10pCisgICAgZW5kCisgIGVuZAorCisgIGNvbnRleHQgIndpdGggcGF0aHMgdGhhdCBkb24ndCBzdGFydCB3aXRoIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkiIGRvCisgICAgbGV0KDpjb3ZlcmFnZV9yZXBvcnQpIGRvCisgICAgICB7CisgICAgICAgICJjb3ZlcmFnZSIgPT4geworICAgICAgICAgICIvYWJzb2x1dGUvcGF0aC9maWxlLnJiIiA9PiB7ICJsaW5lcyIgPT4gW25pbCwgMV0gfSwKKyAgICAgICAgICAicmVsYXRpdmUvZmlsZS5yYiIgICAgICAgPT4geyAibGluZXMiID0+IFtuaWwsIDFdIH0KKyAgICAgICAgfQorICAgICAgfQorICAgIGVuZAorCisgICAgaXQgImtlZXBzIG9yaWdpbmFsIHBhdGhzIHdoZW4gdGhleSBkb24ndCBzdGFydCB3aXRoIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkiIGRvCisgICAgICBwYXJzZXIgPSBkZXNjcmliZWRfY2xhc3MubmV3KGNvdmVyYWdlX3JlcG9ydCkKKyAgICAgIHJlc3VsdCA9IHBhcnNlci5jYWxsCisKKyAgICAgICMgU2hvdWxkIGtlZXAgb3JpZ2luYWwgcGF0aHMgd2hlbiB0aGV5IGRvbid0IHN0YXJ0IHdpdGggY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeQorICAgICAgZXhwZWN0KHJlc3VsdC5rZXlzKS50byBjb250YWluX2V4YWN0bHkoIi9hYnNvbHV0ZS9wYXRoL2ZpbGUucmIiLCAicmVsYXRpdmUvZmlsZS5yYiIpCisgICAgICBleHBlY3QocmVzdWx0WyIvYWJzb2x1dGUvcGF0aC9maWxlLnJiIl0pLnRvIGVxKFtdKQorICAgICAgZXhwZWN0KHJlc3VsdFsicmVsYXRpdmUvZmlsZS5yYiJdKS50byBlcShbXSkKKyAgICBlbmQKKyAgZW5kCisKKyAgY29udGV4dCAicmFuZ2UgY29udmVyc2lvbiBsb2dpYyIgZG8KKyAgICBpdCAiY29udmVydHMgY29uc2VjdXRpdmUgdW5jb3ZlcmVkIGxpbmVzIGludG8gcmFuZ2VzIiBkbworICAgICAgY292ZXJhZ2VfcmVwb3J0ID0geworICAgICAgICAiY292ZXJhZ2UiID0+IHsKKyAgICAgICAgICAibGliL2NvbnNlY3V0aXZlLnJiIiA9PiB7ICJsaW5lcyIgPT4gWzAsIDAsIDAsIDEsIDAsIDAsIDAsIDEsIDBdIH0gIyBsaW5lcyAxLDIsMyw1LDYsNyw5IHVuY292ZXJlZAorICAgICAgICB9CisgICAgICB9CisKKyAgICAgIHBhcnNlciA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoY292ZXJhZ2VfcmVwb3J0KQorICAgICAgcmVzdWx0ID0gcGFyc2VyLmNhbGwKKworICAgICAgZXhwZWN0KHJlc3VsdFsibGliL2NvbnNlY3V0aXZlLnJiIl0pLnRvIGNvbnRhaW5fZXhhY3RseShbMSwgM10sIFs1LCA3XSwgWzksIDldKQorICAgIGVuZAorCisgICAgaXQgImhhbmRsZXMgc2luZ2xlIHVuY292ZXJlZCBsaW5lcyBhcyBzaW5nbGUtZWxlbWVudCByYW5nZXMiIGRvCisgICAgICBjb3ZlcmFnZV9yZXBvcnQgPSB7CisgICAgICAgICJjb3ZlcmFnZSIgPT4geworICAgICAgICAgICJsaWIvc2luZ2xlLnJiIiA9PiB7ICJsaW5lcyIgPT4gWzEsIDAsIDEsIDAsIDFdIH0gIyBsaW5lcyAyLDQgdW5jb3ZlcmVkCisgICAgICAgIH0KKyAgICAgIH0KKworICAgICAgcGFyc2VyID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhjb3ZlcmFnZV9yZXBvcnQpCisgICAgICByZXN1bHQgPSBwYXJzZXIuY2FsbAorCisgICAgICBleHBlY3QocmVzdWx0WyJsaWIvc2luZ2xlLnJiIl0pLnRvIGNvbnRhaW5fZXhhY3RseShbMiwgMl0sIFs0LCA0XSkKKyAgICBlbmQKKworICAgIGl0ICJoYW5kbGVzIGFsbCBsaW5lcyB1bmNvdmVyZWQgYXMgb25lIHJhbmdlIiBkbworICAgICAgY292ZXJhZ2VfcmVwb3J0ID0geworICAgICAgICAiY292ZXJhZ2UiID0+IHsKKyAgICAgICAgICAibGliL2FsbF91bmNvdmVyZWQucmIiID0+IHsgImxpbmVzIiA9PiBbMCwgMCwgMCwgMF0gfSAjIGxpbmVzIDEsMiwzLDQgdW5jb3ZlcmVkCisgICAgICAgIH0KKyAgICAgIH0KKworICAgICAgcGFyc2VyID0gZGVzY3JpYmVkX2NsYXNzLm5ldyhjb3ZlcmFnZV9yZXBvcnQpCisgICAgICByZXN1bHQgPSBwYXJzZXIuY2FsbAorCisgICAgICBleHBlY3QocmVzdWx0WyJsaWIvYWxsX3VuY292ZXJlZC5yYiJdKS50byBjb250YWluX2V4YWN0bHkoWzEsIDRdKQorICAgIGVuZAorCisgICAgaXQgImhhbmRsZXMgbm8gdW5jb3ZlcmVkIGxpbmVzIGFzIGVtcHR5IGFycmF5IiBkbworICAgICAgY292ZXJhZ2VfcmVwb3J0ID0geworICAgICAgICAiY292ZXJhZ2UiID0+IHsKKyAgICAgICAgICAibGliL2FsbF9jb3ZlcmVkLnJiIiA9PiB7ICJsaW5lcyIgPT4gWzEsIDIsIDMsIDRdIH0gIyBhbGwgbGluZXMgY292ZXJlZAorICAgICAgICB9CisgICAgICB9CisKKyAgICAgIHBhcnNlciA9IGRlc2NyaWJlZF9jbGFzcy5uZXcoY292ZXJhZ2VfcmVwb3J0KQorICAgICAgcmVzdWx0ID0gcGFyc2VyLmNhbGwKKworICAgICAgZXhwZWN0KHJlc3VsdFsibGliL2FsbF9jb3ZlcmVkLnJiIl0pLnRvIGVxKFtdKQorICAgIGVuZAorCisgICAgaXQgImhhbmRsZXMgbWl4ZWQgbnVsbCBhbmQgemVybyB2YWx1ZXMgY29ycmVjdGx5IiBkbworICAgICAgY292ZXJhZ2VfcmVwb3J0ID0geworICAgICAgICAiY292ZXJhZ2UiID0+IHsKKyAgICAgICAgICAibGliL21peGVkLnJiIiA9PiB7ICJsaW5lcyIgPT4gW25pbCwgMCwgbmlsLCAwLCAwLCBuaWwsIDFdIH0gIyBsaW5lcyAyLDQsNSB1bmNvdmVyZWQKKyAgICAgICAgfQorICAgICAgfQorCisgICAgICBwYXJzZXIgPSBkZXNjcmliZWRfY2xhc3MubmV3KGNvdmVyYWdlX3JlcG9ydCkKKyAgICAgIHJlc3VsdCA9IHBhcnNlci5jYWxsCisKKyAgICAgIGV4cGVjdChyZXN1bHRbImxpYi9taXhlZC5yYiJdKS50byBjb250YWluX2V4YWN0bHkoWzIsIDJdLCBbNCwgNV0pCisgICAgZW5kCisKKyAgICBpdCAiaGFuZGxlcyBlbXB0eSBjb3ZlcmFnZSBhcnJheSIgZG8KKyAgICAgIGNvdmVyYWdlX3JlcG9ydCA9IHsKKyAgICAgICAgImNvdmVyYWdlIiA9PiB7CisgICAgICAgICAgImxpYi9lbXB0eS5yYiIgPT4geyAibGluZXMiID0+IFtdIH0KKyAgICAgICAgfQorICAgICAgfQorCisgICAgICBwYXJzZXIgPSBkZXNjcmliZWRfY2xhc3MubmV3KGNvdmVyYWdlX3JlcG9ydCkKKyAgICAgIHJlc3VsdCA9IHBhcnNlci5jYWxsCisKKyAgICAgIGV4cGVjdChyZXN1bHRbImxpYi9lbXB0eS5yYiJdKS50byBlcShbXSkKKyAgICBlbmQKKyAgZW5kCitlbmQKZGlmZiAtLWdpdCBhL3NwZWMvZml4dHVyZXMvcmF3X3JlcXVlc3RzL3ByXzEyM19leGFtcGxlLmpzb24gYi9zcGVjL2ZpeHR1cmVzL3Jhd19yZXF1ZXN0cy9wcl8xMjNfZXhhbXBsZS5qc29uCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmQyZTNlNGUKLS0tIC9kZXYvbnVsbAorKysgYi9zcGVjL2ZpeHR1cmVzL3Jhd19yZXF1ZXN0cy9wcl8xMjNfZXhhbXBsZS5qc29uCkBAIC0wLDAgKzEsOTIgQEAKK3sKKyAgICAiY2FwdHVyZWRfYXQiOiAiMjAyNC0wMS0wMVQxMjowMDowMFoiLAorICAgICJyZXF1ZXN0cyI6IFsKKyAgICAgICAgeworICAgICAgICAgICAgIm1ldGhvZCI6ICJHRVQiLAorICAgICAgICAgICAgInVyaSI6ICJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL3Rlc3QvcmVwby9wdWxscy8xMjMiLAorICAgICAgICAgICAgImhlYWRlcnMiOiB7CisgICAgICAgICAgICAgICAgIkF1dGhvcml6YXRpb24iOiAidG9rZW4gZ2hwX3h4eHh4eHh4eHh4eCIsCisgICAgICAgICAgICAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi92bmQuZ2l0aHViLnYzK2pzb24iLAorICAgICAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk9jdG9raXQgUnVieSBHZW0gNC4yNS4xIgorICAgICAgICAgICAgfSwKKyAgICAgICAgICAgICJib2R5IjogIiIsCisgICAgICAgICAgICAidGltZXN0YW1wIjogIjIwMjQtMDEtMDFUMTI6MDA6MDFaIgorICAgICAgICB9LAorICAgICAgICB7CisgICAgICAgICAgICAibWV0aG9kIjogIkdFVCIsCisgICAgICAgICAgICAidXJpIjogImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvdGVzdC9yZXBvL3B1bGxzLzEyMyIsCisgICAgICAgICAgICAiaGVhZGVycyI6IHsKKyAgICAgICAgICAgICAgICAiQXV0aG9yaXphdGlvbiI6ICJ0b2tlbiBnaHBfeHh4eHh4eHh4eHh4IiwKKyAgICAgICAgICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMuZGlmZiIsCisgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiT2N0b2tpdCBSdWJ5IEdlbSA0LjI1LjEiCisgICAgICAgICAgICB9LAorICAgICAgICAgICAgImJvZHkiOiAiIiwKKyAgICAgICAgICAgICJ0aW1lc3RhbXAiOiAiMjAyNC0wMS0wMVQxMjowMDowMloiCisgICAgICAgIH0sCisgICAgICAgIHsKKyAgICAgICAgICAgICJtZXRob2QiOiAiR0VUIiwKKyAgICAgICAgICAgICJ1cmkiOiAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy90ZXN0L3JlcG8vcHVsbHMvMTIzL2NvbW1lbnRzIiwKKyAgICAgICAgICAgICJoZWFkZXJzIjogeworICAgICAgICAgICAgICAgICJBdXRob3JpemF0aW9uIjogInRva2VuIGdocF94eHh4eHh4eHh4eHgiLAorICAgICAgICAgICAgICAgICJBY2NlcHQiOiAiYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52Mytqc29uIiwKKyAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJPY3Rva2l0IFJ1YnkgR2VtIDQuMjUuMSIKKyAgICAgICAgICAgIH0sCisgICAgICAgICAgICAiYm9keSI6ICIiLAorICAgICAgICAgICAgInRpbWVzdGFtcCI6ICIyMDI0LTAxLTAxVDEyOjAwOjAzWiIKKyAgICAgICAgfSwKKyAgICAgICAgeworICAgICAgICAgICAgIm1ldGhvZCI6ICJQT1NUIiwKKyAgICAgICAgICAgICJ1cmkiOiAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy90ZXN0L3JlcG8vcHVsbHMvMTIzL2NvbW1lbnRzIiwKKyAgICAgICAgICAgICJoZWFkZXJzIjogeworICAgICAgICAgICAgICAgICJBdXRob3JpemF0aW9uIjogInRva2VuIGdocF94eHh4eHh4eHh4eHgiLAorICAgICAgICAgICAgICAgICJBY2NlcHQiOiAiYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52Mytqc29uIiwKKyAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAorICAgICAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk9jdG9raXQgUnVieSBHZW0gNC4yNS4xIgorICAgICAgICAgICAgfSwKKyAgICAgICAgICAgICJib2R5IjogIntcImJvZHlcIjpcIjwhLS0gY292ZXJhZ2UtaW5saW5lLW1hcmtlciAtLT5cXG5Db3ZlcmFnZTogMCUgKDAvMTAgbGluZXMpXFxuXFxuVW5jb3ZlcmVkIGxpbmVzOiAxLTEwXCIsXCJjb21taXRfaWRcIjpcImFiYzEyM2RlZjQ1NlwiLFwicGF0aFwiOlwibGliL2V4YW1wbGUucmJcIixcImxpbmVcIjo1LFwic2lkZVwiOlwiUklHSFRcIn0iLAorICAgICAgICAgICAgInRpbWVzdGFtcCI6ICIyMDI0LTAxLTAxVDEyOjAwOjA0WiIKKyAgICAgICAgfQorICAgIF0sCisgICAgInJlc3BvbnNlcyI6IFsKKyAgICAgICAgeworICAgICAgICAgICAgInN0YXR1cyI6IDIwMCwKKyAgICAgICAgICAgICJoZWFkZXJzIjogeworICAgICAgICAgICAgICAgICJjb250ZW50LXR5cGUiOiAiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCIsCisgICAgICAgICAgICAgICAgIngtcmF0ZWxpbWl0LWxpbWl0IjogIjUwMDAiLAorICAgICAgICAgICAgICAgICJ4LXJhdGVsaW1pdC1yZW1haW5pbmciOiAiNDk5OSIKKyAgICAgICAgICAgIH0sCisgICAgICAgICAgICAiYm9keSI6ICJ7XCJpZFwiOjEyMyxcIm51bWJlclwiOjEyMyxcInN0YXRlXCI6XCJvcGVuXCIsXCJ0aXRsZVwiOlwiVGVzdCBQUlwiLFwiYm9keVwiOlwiVGVzdCBkZXNjcmlwdGlvblwiLFwiaGVhZFwiOntcInNoYVwiOlwiYWJjMTIzZGVmNDU2XCJ9fSIsCisgICAgICAgICAgICAidGltZXN0YW1wIjogIjIwMjQtMDEtMDFUMTI6MDA6MDFaIgorICAgICAgICB9LAorICAgICAgICB7CisgICAgICAgICAgICAic3RhdHVzIjogMjAwLAorICAgICAgICAgICAgImhlYWRlcnMiOiB7CisgICAgICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ICJ0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04IiwKKyAgICAgICAgICAgICAgICAieC1yYXRlbGltaXQtbGltaXQiOiAiNTAwMCIsCisgICAgICAgICAgICAgICAgIngtcmF0ZWxpbWl0LXJlbWFpbmluZyI6ICI0OTk4IgorICAgICAgICAgICAgfSwKKyAgICAgICAgICAgICJib2R5IjogImRpZmYgLS1naXQgYS9saWIvZXhhbXBsZS5yYiBiL2xpYi9leGFtcGxlLnJiXG5pbmRleCAxMjM0NTY3Li5hYmNkZWZnIDEwMDY0NFxuLS0tIGEvbGliL2V4YW1wbGUucmJcbisrKyBiL2xpYi9leGFtcGxlLnJiXG5AQCAtMSwxMCArMSwxMCBAQFxuIGNsYXNzIEV4YW1wbGVcbi0gIGRlZiBvbGRfbWV0aG9kXG4rICBkZWYgbmV3X21ldGhvZFxuICAgICBwdXRzIFwiaGVsbG9cIlxuICAgZW5kXG4gZW5kIiwKKyAgICAgICAgICAgICJ0aW1lc3RhbXAiOiAiMjAyNC0wMS0wMVQxMjowMDowMloiCisgICAgICAgIH0sCisgICAgICAgIHsKKyAgICAgICAgICAgICJzdGF0dXMiOiAyMDAsCisgICAgICAgICAgICAiaGVhZGVycyI6IHsKKyAgICAgICAgICAgICAgICAiY29udGVudC10eXBlIjogImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgiLAorICAgICAgICAgICAgICAgICJ4LXJhdGVsaW1pdC1saW1pdCI6ICI1MDAwIiwKKyAgICAgICAgICAgICAgICAieC1yYXRlbGltaXQtcmVtYWluaW5nIjogIjQ5OTciCisgICAgICAgICAgICB9LAorICAgICAgICAgICAgImJvZHkiOiAiW10iLAorICAgICAgICAgICAgInRpbWVzdGFtcCI6ICIyMDI0LTAxLTAxVDEyOjAwOjAzWiIKKyAgICAgICAgfSwKKyAgICAgICAgeworICAgICAgICAgICAgInN0YXR1cyI6IDIwMSwKKyAgICAgICAgICAgICJoZWFkZXJzIjogeworICAgICAgICAgICAgICAgICJjb250ZW50LXR5cGUiOiAiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCIsCisgICAgICAgICAgICAgICAgIngtcmF0ZWxpbWl0LWxpbWl0IjogIjUwMDAiLAorICAgICAgICAgICAgICAgICJ4LXJhdGVsaW1pdC1yZW1haW5pbmciOiAiNDk5NiIKKyAgICAgICAgICAgIH0sCisgICAgICAgICAgICAiYm9keSI6ICJ7XCJpZFwiOjQ1NixcImJvZHlcIjpcIjwhLS0gY292ZXJhZ2UtaW5saW5lLW1hcmtlciAtLT5cXG5Db3ZlcmFnZTogMCUgKDAvMTAgbGluZXMpXFxuXFxuVW5jb3ZlcmVkIGxpbmVzOiAxLTEwXCIsXCJwYXRoXCI6XCJsaWIvZXhhbXBsZS5yYlwiLFwibGluZVwiOjUsXCJzaWRlXCI6XCJSSUdIVFwifSIsCisgICAgICAgICAgICAidGltZXN0YW1wIjogIjIwMjQtMDEtMDFUMTI6MDA6MDRaIgorICAgICAgICB9CisgICAgXQorfQpkaWZmIC0tZ2l0IGEvc3BlYy9zcGVjX2hlbHBlci5yYiBiL3NwZWMvc3BlY19oZWxwZXIucmIKaW5kZXggYjhhOGYwYS4uYTdhNWRiZiAxMDA2NDQKLS0tIGEvc3BlYy9zcGVjX2hlbHBlci5yYgorKysgYi9zcGVjL3NwZWNfaGVscGVyLnJiCkBAIC0xLDE0ICsxLDIyIEBACiAjIGZyb3plbl9zdHJpbmdfbGl0ZXJhbDogdHJ1ZQogCiByZXF1aXJlICJzaW1wbGVjb3YiCityZXF1aXJlICJzaW1wbGVjb3ZfanNvbl9mb3JtYXR0ZXIiCiAKICMgQ29uZmlndXJlIFNpbXBsZUNvdiBmb3IgcGFyYWxsZWwgdGVzdCBleGVjdXRpb24KIGlmIEVOVlsiQlVJTERLSVRFX1BBUkFMTEVMX0pPQiJdCiAgICMgQnVpbGRraXRlIHBhcmFsbGVsIGV4ZWN1dGlvbgogICBTaW1wbGVDb3YuY29tbWFuZF9uYW1lICJSU3BlYy0je0VOVlsnQlVJTERLSVRFX1BBUkFMTEVMX0pPQiddfSIKKyAgU2ltcGxlQ292LmZvcm1hdHRlciA9IFNpbXBsZUNvdjo6Rm9ybWF0dGVyOjpKU09ORm9ybWF0dGVyCiBlbHNlCiAgICMgU2luZ2xlIGpvYiBleGVjdXRpb24KICAgU2ltcGxlQ292LmNvbW1hbmRfbmFtZSAiUlNwZWMiCisgIFNpbXBsZUNvdi5mb3JtYXR0ZXIgPSBTaW1wbGVDb3Y6OkZvcm1hdHRlcjo6TXVsdGlGb3JtYXR0ZXIubmV3KAorICAgIFsKKyAgICAgIFNpbXBsZUNvdjo6Rm9ybWF0dGVyOjpIVE1MRm9ybWF0dGVyLAorICAgICAgU2ltcGxlQ292OjpGb3JtYXR0ZXI6OkpTT05Gb3JtYXR0ZXIKKyAgICBdCisgICkKIGVuZAogCiBTaW1wbGVDb3Yuc3RhcnQKQEAgLTE2LDYgKzI0LDE5IEBACiAjIFJlcXVpcmUgdGhlIGxpYnJhcnkgdW5kZXIgdGVzdAogcmVxdWlyZSAiY292ZXJhZ2VfcmVwb3J0ZXIiCiAKKyMgVGVzdCBkb3VibGUgY2xhc3MgZm9yIEdpdEh1YiBBUEkgY29tbWVudHMKK2NsYXNzIENvbW1lbnQKKyAgYXR0cl9yZWFkZXIgOmlkLCA6Ym9keSwgOnBhdGgsIDpsaW5lLCA6c3RhcnRfbGluZQorCisgIGRlZiBpbml0aWFsaXplKGlkOiwgYm9keTosIHBhdGg6IG5pbCwgbGluZTogbmlsLCBzdGFydF9saW5lOiBuaWwpCisgICAgQGlkID0gaWQKKyAgICBAYm9keSA9IGJvZHkKKyAgICBAcGF0aCA9IHBhdGgKKyAgICBAbGluZSA9IGxpbmUKKyAgICBAc3RhcnRfbGluZSA9IHN0YXJ0X2xpbmUKKyAgZW5kCitlbmQKKwogIyBJZiB5b3UgbGF0ZXIgYWRkIHN1cHBvcnQgZmlsZXMgKGN1c3RvbSBtYXRjaGVycywgc2hhcmVkIGNvbnRleHRzLCBldGMuKQogIyB5b3UgY2FuIGtlZXAgdGhlbSBpbiBzcGVjL3N1cHBvcnQgYW5kIHVuY29tbWVudCB0aGUgRGlyW10gbGluZSBiZWxvdy4KICMgRGlyW0ZpbGUuam9pbihfX2Rpcl9fLCAic3VwcG9ydCIsICIqKiIsICIqLnJiIildLnNvcnQuZWFjaCB7IHxmfCByZXF1aXJlIGYgfQo=
  recorded_at: Thu, 25 Sep 2025 02:19:47 GMT
- request:
    method: get
    uri: https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls/5
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/vnd.github.v3+json
      User-Agent:
      - Octokit Ruby Gem 10.0.0
      Content-Type:
      - application/json
      Authorization:
      - token github_pat_123abc
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 25 Sep 2025 02:19:48 GMT
      Content-Type:
      - application/json; charset=utf-8
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      Etag:
      - W/"765f17532dd3e487d612fdbb1d2abd697fba6f54f15557d225ca599eb21e3917"
      Last-Modified:
      - Thu, 25 Sep 2025 00:25:37 GMT
      Github-Authentication-Token-Expiration:
      - '2025-12-06 19:46:53 +1100'
      X-Github-Media-Type:
      - github.v3; format=json
      X-Accepted-Github-Permissions:
      - pull_requests=read; contents=read
      X-Github-Api-Version-Selected:
      - '2022-11-28'
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4994'
      X-Ratelimit-Reset:
      - '1758767578'
      X-Ratelimit-Used:
      - '6'
      X-Ratelimit-Resource:
      - core
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Transfer-Encoding:
      - chunked
      Server:
      - github.com
      X-Github-Request-Id:
      - E588:140D4C:226D4B:29B9FB:68D4A6C3
    body:
      encoding: ASCII-8BIT
      string: '{"url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls/5","id":2805952509,"node_id":"PR_kwDOPZ5ypM6nP2_9","html_url":"https://github.com/gabrieltaylor/coverage-reporter/pull/5","diff_url":"https://github.com/gabrieltaylor/coverage-reporter/pull/5.diff","patch_url":"https://github.com/gabrieltaylor/coverage-reporter/pull/5.patch","issue_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/issues/5","number":5,"state":"open","locked":false,"title":"Integration
        test","user":{"login":"gabrieltaylor","id":3871682,"node_id":"MDQ6VXNlcjM4NzE2ODI=","avatar_url":"https://avatars.githubusercontent.com/u/3871682?v=4","gravatar_id":"","url":"https://api.github.com/users/gabrieltaylor","html_url":"https://github.com/gabrieltaylor","followers_url":"https://api.github.com/users/gabrieltaylor/followers","following_url":"https://api.github.com/users/gabrieltaylor/following{/other_user}","gists_url":"https://api.github.com/users/gabrieltaylor/gists{/gist_id}","starred_url":"https://api.github.com/users/gabrieltaylor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gabrieltaylor/subscriptions","organizations_url":"https://api.github.com/users/gabrieltaylor/orgs","repos_url":"https://api.github.com/users/gabrieltaylor/repos","events_url":"https://api.github.com/users/gabrieltaylor/events{/privacy}","received_events_url":"https://api.github.com/users/gabrieltaylor/received_events","type":"User","user_view_type":"public","site_admin":false},"body":null,"created_at":"2025-09-07T10:22:41Z","updated_at":"2025-09-25T00:25:37Z","closed_at":null,"merged_at":null,"merge_commit_sha":"dae29acab246698c85918fea7e4f45e5f26c12e2","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls/5/commits","review_comments_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls/5/comments","review_comment_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls/comments{/number}","comments_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/issues/5/comments","statuses_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/statuses/1e407ae37a301629818f642d162b2903767b85d7","head":{"label":"gabrieltaylor:integration-test","ref":"integration-test","sha":"1e407ae37a301629818f642d162b2903767b85d7","user":{"login":"gabrieltaylor","id":3871682,"node_id":"MDQ6VXNlcjM4NzE2ODI=","avatar_url":"https://avatars.githubusercontent.com/u/3871682?v=4","gravatar_id":"","url":"https://api.github.com/users/gabrieltaylor","html_url":"https://github.com/gabrieltaylor","followers_url":"https://api.github.com/users/gabrieltaylor/followers","following_url":"https://api.github.com/users/gabrieltaylor/following{/other_user}","gists_url":"https://api.github.com/users/gabrieltaylor/gists{/gist_id}","starred_url":"https://api.github.com/users/gabrieltaylor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gabrieltaylor/subscriptions","organizations_url":"https://api.github.com/users/gabrieltaylor/orgs","repos_url":"https://api.github.com/users/gabrieltaylor/repos","events_url":"https://api.github.com/users/gabrieltaylor/events{/privacy}","received_events_url":"https://api.github.com/users/gabrieltaylor/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1033794212,"node_id":"R_kgDOPZ5ypA","name":"coverage-reporter","full_name":"gabrieltaylor/coverage-reporter","private":false,"owner":{"login":"gabrieltaylor","id":3871682,"node_id":"MDQ6VXNlcjM4NzE2ODI=","avatar_url":"https://avatars.githubusercontent.com/u/3871682?v=4","gravatar_id":"","url":"https://api.github.com/users/gabrieltaylor","html_url":"https://github.com/gabrieltaylor","followers_url":"https://api.github.com/users/gabrieltaylor/followers","following_url":"https://api.github.com/users/gabrieltaylor/following{/other_user}","gists_url":"https://api.github.com/users/gabrieltaylor/gists{/gist_id}","starred_url":"https://api.github.com/users/gabrieltaylor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gabrieltaylor/subscriptions","organizations_url":"https://api.github.com/users/gabrieltaylor/orgs","repos_url":"https://api.github.com/users/gabrieltaylor/repos","events_url":"https://api.github.com/users/gabrieltaylor/events{/privacy}","received_events_url":"https://api.github.com/users/gabrieltaylor/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/gabrieltaylor/coverage-reporter","description":"Report
        Coverage to GitHub","fork":false,"url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter","forks_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/forks","keys_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/keys{/key_id}","collaborators_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/teams","hooks_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/hooks","issue_events_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/issues/events{/number}","events_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/events","assignees_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/assignees{/user}","branches_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/branches{/branch}","tags_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/tags","blobs_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/git/refs{/sha}","trees_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/git/trees{/sha}","statuses_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/statuses/{sha}","languages_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/languages","stargazers_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/stargazers","contributors_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/contributors","subscribers_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/subscribers","subscription_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/subscription","commits_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/commits{/sha}","git_commits_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/git/commits{/sha}","comments_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/comments{/number}","issue_comment_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/issues/comments{/number}","contents_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/contents/{+path}","compare_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/compare/{base}...{head}","merges_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/merges","archive_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/downloads","issues_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/issues{/number}","pulls_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls{/number}","milestones_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/milestones{/number}","notifications_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/labels{/name}","releases_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/releases{/id}","deployments_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/deployments","created_at":"2025-08-07T11:00:09Z","updated_at":"2025-09-07T10:08:20Z","pushed_at":"2025-09-25T00:23:49Z","git_url":"git://github.com/gabrieltaylor/coverage-reporter.git","ssh_url":"git@github.com:gabrieltaylor/coverage-reporter.git","clone_url":"https://github.com/gabrieltaylor/coverage-reporter.git","svn_url":"https://github.com/gabrieltaylor/coverage-reporter","homepage":null,"size":220,"stargazers_count":0,"watchers_count":0,"language":"Ruby","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":4,"license":{"key":"mit","name":"MIT
        License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":4,"watchers":0,"default_branch":"main"}},"base":{"label":"gabrieltaylor:main","ref":"main","sha":"3419f84145becc8c874241bc9b8ff9fdf990e2c3","user":{"login":"gabrieltaylor","id":3871682,"node_id":"MDQ6VXNlcjM4NzE2ODI=","avatar_url":"https://avatars.githubusercontent.com/u/3871682?v=4","gravatar_id":"","url":"https://api.github.com/users/gabrieltaylor","html_url":"https://github.com/gabrieltaylor","followers_url":"https://api.github.com/users/gabrieltaylor/followers","following_url":"https://api.github.com/users/gabrieltaylor/following{/other_user}","gists_url":"https://api.github.com/users/gabrieltaylor/gists{/gist_id}","starred_url":"https://api.github.com/users/gabrieltaylor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gabrieltaylor/subscriptions","organizations_url":"https://api.github.com/users/gabrieltaylor/orgs","repos_url":"https://api.github.com/users/gabrieltaylor/repos","events_url":"https://api.github.com/users/gabrieltaylor/events{/privacy}","received_events_url":"https://api.github.com/users/gabrieltaylor/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1033794212,"node_id":"R_kgDOPZ5ypA","name":"coverage-reporter","full_name":"gabrieltaylor/coverage-reporter","private":false,"owner":{"login":"gabrieltaylor","id":3871682,"node_id":"MDQ6VXNlcjM4NzE2ODI=","avatar_url":"https://avatars.githubusercontent.com/u/3871682?v=4","gravatar_id":"","url":"https://api.github.com/users/gabrieltaylor","html_url":"https://github.com/gabrieltaylor","followers_url":"https://api.github.com/users/gabrieltaylor/followers","following_url":"https://api.github.com/users/gabrieltaylor/following{/other_user}","gists_url":"https://api.github.com/users/gabrieltaylor/gists{/gist_id}","starred_url":"https://api.github.com/users/gabrieltaylor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gabrieltaylor/subscriptions","organizations_url":"https://api.github.com/users/gabrieltaylor/orgs","repos_url":"https://api.github.com/users/gabrieltaylor/repos","events_url":"https://api.github.com/users/gabrieltaylor/events{/privacy}","received_events_url":"https://api.github.com/users/gabrieltaylor/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/gabrieltaylor/coverage-reporter","description":"Report
        Coverage to GitHub","fork":false,"url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter","forks_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/forks","keys_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/keys{/key_id}","collaborators_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/teams","hooks_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/hooks","issue_events_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/issues/events{/number}","events_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/events","assignees_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/assignees{/user}","branches_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/branches{/branch}","tags_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/tags","blobs_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/git/refs{/sha}","trees_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/git/trees{/sha}","statuses_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/statuses/{sha}","languages_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/languages","stargazers_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/stargazers","contributors_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/contributors","subscribers_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/subscribers","subscription_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/subscription","commits_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/commits{/sha}","git_commits_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/git/commits{/sha}","comments_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/comments{/number}","issue_comment_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/issues/comments{/number}","contents_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/contents/{+path}","compare_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/compare/{base}...{head}","merges_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/merges","archive_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/downloads","issues_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/issues{/number}","pulls_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls{/number}","milestones_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/milestones{/number}","notifications_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/labels{/name}","releases_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/releases{/id}","deployments_url":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/deployments","created_at":"2025-08-07T11:00:09Z","updated_at":"2025-09-07T10:08:20Z","pushed_at":"2025-09-25T00:23:49Z","git_url":"git://github.com/gabrieltaylor/coverage-reporter.git","ssh_url":"git@github.com:gabrieltaylor/coverage-reporter.git","clone_url":"https://github.com/gabrieltaylor/coverage-reporter.git","svn_url":"https://github.com/gabrieltaylor/coverage-reporter","homepage":null,"size":220,"stargazers_count":0,"watchers_count":0,"language":"Ruby","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":4,"license":{"key":"mit","name":"MIT
        License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":4,"watchers":0,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls/5"},"html":{"href":"https://github.com/gabrieltaylor/coverage-reporter/pull/5"},"issue":{"href":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/issues/5"},"comments":{"href":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/issues/5/comments"},"review_comments":{"href":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls/5/comments"},"review_comment":{"href":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/pulls/5/commits"},"statuses":{"href":"https://api.github.com/repos/gabrieltaylor/coverage-reporter/statuses/1e407ae37a301629818f642d162b2903767b85d7"}},"author_association":"OWNER","auto_merge":null,"active_lock_reason":null,"merged":false,"mergeable":true,"rebaseable":true,"mergeable_state":"unstable","merged_by":null,"comments":1,"review_comments":0,"maintainer_can_modify":false,"commits":25,"additions":3292,"deletions":839,"changed_files":49}'
  recorded_at: Thu, 25 Sep 2025 02:19:48 GMT
recorded_with: VCR 6.3.1
